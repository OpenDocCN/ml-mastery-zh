["```py\n# Generating a dataset of 2D data points and their ground truth labels\nx, y_true = make_blobs(n_samples=100, centers=2, cluster_std=1.5, random_state=15)\n\n# Plotting the dataset\nscatter(x[:, 0], x[:, 1], c=y_true)\nshow()\n```", "```py\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = ms.train_test_split(x, y_true, test_size=0.2, random_state=10)\n```", "```py\n# Create a new Normal Bayes Classifier\nnorm_bayes = ml.NormalBayesClassifier_create()\n\n# Train the classifier on the training data\nnorm_bayes.train(x_train.astype(float32), ml.ROW_SAMPLE, y_train)\n\n# Generate a prediction from the trained classifier\nret, y_pred, y_probs = norm_bayes.predictProb(x_test.astype(float32))\n```", "```py\nfrom sklearn.datasets import make_blobs\nfrom sklearn import model_selection as ms\nfrom numpy import float32\nfrom matplotlib.pyplot import scatter, show\nfrom cv2 import ml\n\n# Generate a dataset of 2D data points and their ground truth labels\nx, y_true = make_blobs(n_samples=100, centers=2, cluster_std=1.5, random_state=15)\n\n# Plot the dataset\nscatter(x[:, 0], x[:, 1], c=y_true)\nshow()\n\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = ms.train_test_split(x, y_true, test_size=0.2, random_state=10)\n\n# Create a new Normal Bayes Classifier\nnorm_bayes = ml.NormalBayesClassifier_create()\n\n# Train the classifier on the training data\nnorm_bayes.train(x_train.astype(float32), ml.ROW_SAMPLE, y_train)\n\n# Generate a prediction from the trained classifier\nret, y_pred, y_probs = norm_bayes.predictProb(x_test.astype(float32))\n\n# Plot the class predictions\nscatter(x_test[:, 0], x_test[:, 1], c=y_pred)\nshow()\n```", "```py\nfrom cv2 import ml,\nfrom numpy import loadtxt, float32\nfrom matplotlib.colors import rgb_to_hsv\n\n# Load data from text file\ndata = loadtxt(\"Data/Skin_NonSkin.txt\", dtype=int)\n\n# Select the BGR values from the loaded data\nBGR = data[:, :3]\n\n# Convert to RGB by swapping the array columns\nRGB = BGR.copy()\nRGB[:, [2, 0]] = RGB[:, [0, 2]]\n\n# Convert RGB values to HSV\nHSV = rgb_to_hsv(RGB.reshape(RGB.shape[0], -1, 3) / 255)\nHSV = HSV.reshape(RGB.shape[0], 3)\n\n# Select only the hue values\nhue = HSV[:, 0] * 360\n\n# Select the labels from the loaded data\nlabels = data[:, -1]\n\n# Create a new Normal Bayes Classifier\nnorm_bayes = ml.NormalBayesClassifier_create()\n\n# Train the classifier on the hue values\nnorm_bayes.train(hue.astype(float32), ml.ROW_SAMPLE, labels)\n```", "```py\nfrom numpy import histogram\nfrom matplotlib.pyplot import bar, title, xlabel, ylabel, show\n\n# Choose the skin-labelled hue values\nskin = x[labels == 1]\n\n# Compute their histogram\nhist, bin_edges = histogram(skin, range=[0, 360], bins=360)\n\n# Display the computed histogram\nbar(bin_edges[:-1], hist, width=4)\nxlabel('Hue')\nylabel('Frequency')\ntitle('Histogram of the hue values of skin pixels')\nshow()\n```", "```py\nfrom cv2 import imread\nfrom matplotlib.pyplot import show, imshow\n\n# Load a test image\nface_img = imread(\"Images/face.jpg\")\n\n# Reshape the image into a three-column array\nface_BGR = face_img.reshape(-1, 3)\n\n# Convert to RGB by swapping the array columns\nface_RGB = face_BGR.copy()\nface_RGB[:, [2, 0]] = face_RGB[:, [0, 2]]\n\n# Convert from RGB to HSV\nface_HSV = rgb_to_hsv(face_RGB.reshape(face_RGB.shape[0], -1, 3) / 255)\nface_HSV = face_HSV.reshape(face_RGB.shape[0], 3)\n\n# Select only the hue values\nface_hue = face_HSV[:, 0] * 360\n\n# Display the hue image\nimshow(face_hue.reshape(face_img.shape[0], face_img.shape[1]))\nshow()\n\n# Generate a prediction from the trained classifier\nret, labels_pred, output_probs = norm_bayes.predictProb(face_hue.astype(float32))\n\n# Reshape array into the input image size and choose the skin-labelled pixels\nskin_mask = labels_pred.reshape(face_img.shape[0], face_img.shape[1], 1) == 1\n\n# Display the segmented image\nimshow(skin_mask, cmap='gray')\nshow()\n```"]