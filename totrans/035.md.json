["```py\nimport pandas as pd\n\ndf = pd.read_csv(\"All Countries.csv\")\ndf.info()\n```", "```py\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 194 entries, 0 to 193\nData columns (total 64 columns):\n    #   Column                                   Non-Null Count  Dtype\n---  ------                                   --------------  -----\n    0   country                                  194 non-null    object\n    1   country_long                             194 non-null    object\n    2   currency                                 194 non-null    object\n    3   capital_city                             194 non-null    object\n    4   region                                   194 non-null    object\n    5   continent                                194 non-null    object\n    6   demonym                                  194 non-null    object\n    7   latitude                                 194 non-null    float64\n    8   longitude                                194 non-null    float64\n    9   agricultural_land                        193 non-null    float64\n...\n    62  political_leader                         187 non-null    object\n    63  title                                    187 non-null    object\ndtypes: float64(48), int64(6), object(10)\nmemory usage: 97.1+ KB\n```", "```py\ndf.head(5)\n```", "```py\nprint(df.isnull().sum().sort_values(ascending=False))\n```", "```py\ninternally_displaced_persons           121\ncentral_government_debt_pct_gdp         74\nhiv_incidence                           61\nenergy_imports_pct                      56\nelectricty_production_renewable_pct     56\n                                        ...\nland_area                                0\nurban_population_under_5m                0\nrural_land                               0\nurban_land                               0\ncountry                                  0\nLength: 64, dtype: int64\n```", "```py\nimport missingno as msno\nimport matplotlib.pyplot as plt\n\nmsno.matrix(df, sparkline=False, fontsize=12)\nplt.show()\n```", "```py\nprint(df.describe())\n```", "```py\nprint(df.columns)\nprint(df.describe().columns)\n```", "```py\nprint(df.describe()[\"inflation\"])\n```", "```py\ncount    184.000000\nmean      13.046591\nstd       25.746553\nmin       -6.687320\n25%        4.720087\n50%        7.864485\n75%       11.649325\nmax      254.949000\nName: inflation, dtype: float64\n```", "```py\nprint(df.groupby(\"region\").mean(numeric_only=True)[\"life_expectancy\"])\n```", "```py\ndf[\"gdp_per_capita\"] = df[\"gdp\"] / df[\"population\"]\nprint(df.groupby(\"region\").mean(numeric_only=True)[\"gdp_per_capita\"])\n```", "```py\nprint(df.pivot_table(index=\"region\", columns=\"democracy_type\", aggfunc=\"count\")[\"country\"])\n```", "```py\nimport seaborn as sns\n\nsns.scatterplot(data=df, x=\"life_expectancy\", y=\"gdp_per_capita\", hue=\"continent\")\n```", "```py\nsns.scatterplot(data=df, x=\"life_expectancy\", y=\"gdp_per_capita\", hue=\"continent\")\nplt.yscale(\"log\")  # make y axis in log scale\n```", "```py\ntop_features = df.corr(numeric_only=True)[\"life_expectancy\"].abs().sort_values(ascending=False).index[:6]\nprint(top_features)\n```", "```py\nsns.pairplot(df, vars=list(top_features))\nplt.show()\n```", "```py\ndf[\"urban_pct\"] = df[\"urban_population\"]/(df[\"rural_population\"] + df[\"urban_population\"])\ndf_urban = df[df[\"urban_pct\"] > 0.5]\ndf_rural = df[df[\"urban_pct\"] <= 0.5]\n```", "```py\nplt.hist(df_urban[\"life_expectancy\"], alpha=0.7, bins=15, color=\"blue\", label=\"Urba\")\nplt.hist(df_rural[\"life_expectancy\"], alpha=0.7, bins=15, color=\"green\", label=\"Rural\")\nplt.xlabel(\"Life expectancy\")\nplt.ylabel(\"Number of countries\")\nplt.legend(loc=\"upper left\")\nplt.tight_layout()\nplt.show()\n```", "```py\nimport scipy.stats as stats\n\ndf_urban = df[(df[\"urban_pct\"] > 0.5) & df[\"life_expectancy\"].notnull()]\ndf_rural = df[(df[\"urban_pct\"] <= 0.5) & df[\"life_expectancy\"].notnull()]\nt_stat, p_value = stats.ttest_ind(df_urban[\"life_expectancy\"], df_rural[\"life_expectancy\"], equal_var=False)\nprint(\"t-Statistic:\", t_stat)\nprint(\"p-value\", p_value)\n```", "```py\nboxcox_life, lmbda = stats.boxcox(df_rural[\"life_expectancy\"])\nboxcox_life = pd.Series(boxcox_life)\nprint(df_rural[\"life_expectancy\"].skew(), boxcox_life.skew())\n```", "```py\nplt.hist(boxcox_life, bins=15)\nplt.show()\n```", "```py\nmean, stdev = boxcox_life.mean(), boxcox_life.std()\nplus2sd = mean + 2 * stdev\nminus2sd = mean - 2 * stdev\nupperthreshold = (plus2sd * lmbda + 1)**(1/lmbda)\nlowerthreshold = (minus2sd * lmbda + 1)**(1/lmbda)\nprint(lowerthreshold, upperthreshold)\n```", "```py\nprint(df_rural[df_rural[\"life_expectancy\"] <= lowerthreshold])\nprint(df_rural[df_rural[\"life_expectancy\"] >= upperthreshold])\n```"]