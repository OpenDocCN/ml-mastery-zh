["```py\nif value > -1 and value < 1:\n    ...\n```", "```py\nif -1 < value < 1:\n    ...\n```", "```py\nvalue = 0 # This is obtained from a model\n\nvalue_to_name = {0: \"cat\", 1: \"dog\"}\nprint(\"Result is %s\" % value_to_name[value])\n```", "```py\nResult is cat\n```", "```py\nsentence = \"Portez ce vieux whisky au juge blond qui fume\"\ncounter = {}\nfor char in sentence:\n    if char not in counter:\n        counter[char] = 0\n    counter[char] += 1\n\nprint(counter)\n```", "```py\n{'P': 1, 'o': 2, 'r': 1, 't': 1, 'e': 5, 'z': 1, ' ': 8, 'c': 1, 'v': 1, 'i': 3, 'u': 5, 'x': 1, 'w': 1, 'h': 1, 's': 1, 'k': 1, 'y': 1, 'a': 1, 'j': 1, 'g': 1, 'b': 1, 'l': 1, 'n': 1, 'd': 1, 'q': 1, 'f': 1, 'm': 1}\n```", "```py\nA = [1, 2, \"fizz\", 4, \"buzz\", \"fizz\", 7]\nA += [8, \"fizz\", \"buzz\", 11, \"fizz\", 13, 14, \"fizzbuzz\"]\nprint(A)\n```", "```py\n[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz']\n```", "```py\n...\nA[2:2] = [2.1, 2.2]\nprint(A)\n```", "```py\n[1, 2, 2.1, 2.2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz']\n```", "```py\n...\nA[0:2] = []\nprint(A)\n```", "```py\n[2.1, 2.2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz']\n```", "```py\nA = (\"foo\", \"bar\")\n```", "```py\na = 42\nb = \"foo\"\nprint(\"a is %s; b is %s\" % (a,b))\na, b = b, a # swap\nprint(\"After swap, a is %s; b is %s\" % (a,b))\n```", "```py\na is 42; b is foo\nAfter swap, a is foo; b is 42\n```", "```py\ntemplate = \"Square root of %d is %.3f\"\nn = 10\nanswer = template % (n, n**0.5)\nprint(answer)\n```", "```py\nSquare root of 10 is 3.162\n```", "```py\nimport pandas as pd\nA = pd.DataFrame([[1,2,3],[2,3,4],[3,4,5],[5,6,7]], columns=[\"x\",\"y\",\"z\"])\nprint(A)\n\nfor _, row in A.iterrows():\n    print(row[\"z\"])\n```", "```py\nx y z\n0 1 2 3\n1 2 3 4\n2 3 4 5\n3 5 6 7\n\n3\n4\n5\n7\n```", "```py\nabs()\naiter()\nall()\nany()\nanext()\nascii()\nbin()\nbool()\nbreakpoint()\nbytearray()\nbytes()\ncallable()\nchr()\nclassmethod()\ncompile()\ncomplex()\ndelattr()\ndict()\ndir()\ndivmod()\nenumerate()\neval()\nexec()\nfilter()\nfloat()\nformat()\nfrozenset()\ngetattr()\nglobals()\nhasattr()\nhash()\nhelp()\nhex()\nid()\ninput()\nint()\nisinstance()\nissubclass()\niter()\nlen()\nlist()\nlocals()\nmap()\nmax()\nmemoryview()\nmin()\nnext()\nobject()\noct()\nopen()\nord()\npow()\nprint()\nproperty()\nrange()\nrepr()\nreversed()\nround()\nset()\nsetattr()\nslice()\nsorted()\nstaticmethod()\nstr()\nsum()\nsuper()\ntuple()\ntype()\nvars()\nzip()\n__import__()\n```", "```py\na = [\"x\", \"y\", \"z\"]\nb = [3, 5, 7, 9]\nc = [2.1, 2.5, 2.9]\nfor x in zip(a, b, c):\n    print(x)\n```", "```py\n('x', 3, 2.1)\n('y', 5, 2.5)\n('z', 7, 2.9)\n```", "```py\na = [['x', 3, 2.1], ['y', 5, 2.5], ['z', 7, 2.9]]\np,q,r = zip(*a)\nprint(p)\nprint(q)\nprint(r)\n```", "```py\n('x', 'y', 'z')\n(3, 5, 7)\n(2.1, 2.5, 2.9)\n```", "```py\na = [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\"]\nfor num, item in enumerate(a):\n    print(\"item %d is %s\" % (num, item))\n```", "```py\nitem 0 is quick\nitem 1 is brown\nitem 2 is fox\nitem 3 is jumps\nitem 4 is over\n```", "```py\na = [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\"]\nfor num in range(len(a)):\n    print(\"item %d is %s\" % (num, a[num]))\n```", "```py\nfor (i=0; i<100; ++i) {\n...\n}\n```", "```py\nfor i in range(100):\n    ...\n```"]