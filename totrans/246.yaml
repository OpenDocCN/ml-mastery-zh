- en: 'What you need to know before you get started: A brief tour of Calculus Pre-Requisites'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/what-you-need-to-know-before-you-get-started-a-brief-tour-of-calculus-pre-requisites/](https://machinelearningmastery.com/what-you-need-to-know-before-you-get-started-a-brief-tour-of-calculus-pre-requisites/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We have [previously](https://machinelearningmastery.com/calculus-in-machine-learning-why-it-works/)
    seen that calculus is one of the core mathematical concepts in machine learning
    that permits us to understand the internal workings of different machine learning
    algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Calculus, in turn, builds on several fundamental concepts that derive from algebra
    and geometry. The importance of having these fundamentals at hand will become
    even more important as we work our way through more advanced topics of calculus,
    such as the evaluation of limits and the computation of derivatives, to name a
    few.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, you will discover several pre-requisites that will help you
    work with calculus.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing this tutorial, you will know:'
  prefs: []
  type: TYPE_NORMAL
- en: Linear and non-linear functions are central to calculus and machine learning,
    and many calculus problems involve their use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamental concepts from algebra and trigonometry provide the foundations for
    calculus, and will become especially important as we tackle more advanced calculus
    topics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/f5c9623d57f993d68d798f5e59cfa11c.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_cover-scaled.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'What you need to know before you get started: A brief tour of Calculus Pre-Requisites'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Dino Reichmuth](https://unsplash.com/photos/A5rCN8626Ck), some rights
    reserved.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tutorial Overview**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This tutorial is divided into three parts; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: The Concept of a Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamentals of Pre-Algebra and Algebra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamentals of Trigonometry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Concept of a Function**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A function is a rule that defines the relationship between a dependent variable
    and an independent variable.
  prefs: []
  type: TYPE_NORMAL
- en: '*Examples are all around us: The average daily temperature for your city depends
    on, and is a function of, the time of year; the distance an object has fallen
    is a function of how much time has elapsed since you dropped it; the area of a
    circle is a function of its radius; and the pressure of an enclosed gas is a function
    of its temperature. *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*–* Page 43, Calculus for Dummies, 2016.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In machine learning, a neural network learns a function by which it can represent
    the relationship between features in the input, the independent variable, and
    the expected output, the dependent variable. In such a scenario, therefore, the
    learned function defines a deterministic mapping between the input values and
    one or more output values. We can represent this mapping as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Output(s) = function(Inputs)
  prefs: []
  type: TYPE_NORMAL
- en: 'More formally, however, a function is often represented by *y* = *f*(*x*),
    which translates to *y is a function of x*. This notation specifies *x* as the
    independent input variable that we already know, whereas *y* is the dependent
    output variable that we wish to find. For example, if we consider the squaring
    function, *f*(*x*) = *x*², then inputting a value of 3 would produce an output
    of 9:'
  prefs: []
  type: TYPE_NORMAL
- en: '*y* = *f*(3) = 9'
  prefs: []
  type: TYPE_NORMAL
- en: A function can also be represented pictorially by a *graph* on an *x*–*y* coordinate
    plane.
  prefs: []
  type: TYPE_NORMAL
- en: '*By the graph of the function f we mean the collection of all points (x, f(x)). *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*–* Page 13, The Hitchhiker’s Guide To Calculus, 2019.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When graphing a function, the independent input variable is placed on the *x*-axis,
    while the dependent output variable goes on the *y*-axis. A graph helps to illustrate
    the relationship between the independent and dependent variables better: is the
    graph (and, hence, the relationship) rising or falling, and by which rate?'
  prefs: []
  type: TYPE_NORMAL
- en: 'A straight line is one of the simplest functions that can be graphed on the
    coordinate plane. Take, for example, the graph of the line *y* = 3*x* + 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/4d87e86655a56dcbc79279a33495fe85.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plot of a Linear Function
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: 'This straight line can be described by a *linear* function, so called because
    the output changes proportionally to any change in the input. The linear function
    that describes this straight line can be represented in slope-intercept form,
    where the slope is denoted by *m*, and the *y*-intercept by *c*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*f*(*x*) = *mx* + *c* = 3*x* + 5'
  prefs: []
  type: TYPE_NORMAL
- en: We had seen how to calculate the slope when we addressing the topic of [Rate
    of Change](https://machinelearningmastery.com/?p=12415&preview=true).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we had to consider the special case of setting the slope to zero, the resulting
    horizontal line would be described by a *constant* function of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '*f*(*x*) = *c* = 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the context of machine learning, the calculation defined by such a linear
    function is implemented by every neuron in a neural network. Specifically, each
    neuron receives a set of *n* inputs, *x**[i]*, from the previous layer of neurons
    or from the training data, and calculates a weighted sum of these inputs (where
    the *weight*, *w**[i]*, is more common term for the slope, *m*, in machine learning)
    to produce an output, *z*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/80ab764860745537a8cc9deb3ec76f08.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_2.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The Weighted Sum of Inputs
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Deep Learning
  prefs: []
  type: TYPE_NORMAL
- en: The process of training a neural network involves learning the weights that
    best represent the patterns in the input dataset, which process is carried out
    by the gradient descent algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the linear function, there exists another family of *non-linear*
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest of all non-linear functions can be considered to be the parabola,
    that may be described by:'
  prefs: []
  type: TYPE_NORMAL
- en: '*y* = *f*(*x*) = *x*²'
  prefs: []
  type: TYPE_NORMAL
- en: When graphed, we find that this is an even function, because it is symmetric
    about the *y*-axis, and never falls below the *x*-axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/d68b07600585b308a55ea8ec5e840ab3.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plot of a Parabola
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, non-linear functions can take many different shapes. Consider,
    for instance, the exponential function of the form *f*(*x*) = *b**^x*, which grows
    or decays indefinitely, or *monotonically*, depending on the value of *x*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/d74a852056178e22428d340eabd1e1db.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_5.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plot of an Exponential Function
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: 'Or the logarithmic function of the form *f*(*x*) = *log**[2]**x*, which is
    similar to the exponential function but with the *x*– and *y*-axes switched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/bab8900674d8d2ae497e7a9e43a9289e.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_6.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plot of a Logarithmic Function
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: 'Of particular interest for deep learning are the logistic, tanh, and the rectified
    linear units (ReLU) non-linear functions, which serve as *activation functions*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/6e556e1bb91fd0d27db63c3823e1720e.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plots of the Logistic, Tanh and ReLU Functions
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Deep Learning
  prefs: []
  type: TYPE_NORMAL
- en: 'The importance of these activation functions lies in the introduction of a
    non-linear mapping into the processing of a neuron. If we had to rely solely on
    the linear regression performed by each neuron in calculating a weighted sum of
    the inputs, then we would be restricted to learning only a linear mapping from
    the inputs to the outputs. However, many real-world relationships are more complex
    than this, and a linear mapping would not accurately model them. Introducing a
    non-linearity to the output, *z*, of the neuron, allows the neural network to
    model such non-linear relationships:'
  prefs: []
  type: TYPE_NORMAL
- en: Output = activation_function(z)
  prefs: []
  type: TYPE_NORMAL
- en: '*… a neuron, the fundamental building block of neural networks and deep learning,
    is defined by a simple two-step sequence of operations: calculating a weighted
    sum and then passing the result through an activation function. *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*–* Page 76, Deep Learning, 2019.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Non-linear functions appear elsewhere in the process of training a neural network
    too, in the form of error functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'A non-linear error function can be generated by calculating the error between
    the predicted and the target output values as the weights of the model change.
    Its shape can be as simple as a parabola, but most often it is characterised by
    many local minima and saddle points. The gradient descent algorithm descends this
    non-linear error function by calculating the slope of the *tangent* line that
    touches the curve at some particular instance: another important concept in calculus
    that permits us to analyse complex curved functions by cutting them into many
    infinitesimal straight pieces arranged alongside one another.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fundamentals of Pre-Algebra and Algebra**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Algebra is one of the important foundations of calculus.
  prefs: []
  type: TYPE_NORMAL
- en: '*Algebra is the language of calculus. You can’t do calculus without knowing
    algebra any more than you can write Chinese poetry without knowing Chinese. *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*–* Page 29, Calculus for Dummies, 2016.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are several fundamental concepts of algebra that turn out to be useful
    for calculus, such as those concerning fractions, powers, square roots, and logarithms.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first start by revising the basics for working with fractions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Division by Zero**: The denominator of a fraction can never be equal to zero.
    For example, the result of a fraction such as 5/0 is undefined. The intuition
    behind this is that you can never add up the value in the numerator, using multiples
    of the zero in the denominator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reciprocal**: The reciprocal of a fraction is its multiplicative inverse.
    In simpler terms, to find the reciprocal of a fraction, flip it upside down. Hence,
    the reciprocal of 3/4, for instance, becomes 4/3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiplication of Fractions**: Multiplication between fractions is as straightforward
    as multiplying across the numerators, and multiplying across the denominators:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (a / b) * (c / d) = ac / bd
  prefs: []
  type: TYPE_NORMAL
- en: '**Division of Fractions**: The division of fractions is very similar to multiplication,
    but with an additional step; the reciprocal of the second fraction is first found
    before multiplying. Hence, considering again two generic fractions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (a / b) ÷ (c / d) = (a / b) * (d / c) = ad / bc
  prefs: []
  type: TYPE_NORMAL
- en: '**Addition of Fractions**: An important first step is to find a common denominator
    between all fractions to be added. Any common denominator will do, but we usually
    find the *least* common denominator. Finding the least common denominator is,
    at times, as simple as multiplying the denominators of all individual fractions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (a / b) + (c / d) = (ad + cb) / bd
  prefs: []
  type: TYPE_NORMAL
- en: '**Subtraction of Fractions**: The subtraction of fractions follows a similar
    procedure as for the addition of fractions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (a / b) – (c / d) = (ad – cb) / bd
  prefs: []
  type: TYPE_NORMAL
- en: '**Cancelling in Fractions**: Fractions with an unbroken chain of multiplications
    across the entire numerator, as well as across the entire denominator, can be
    simplified by cancelling out any common terms that appear in both the numerator
    and the denominator:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a³b² / ac = a²b² / c
  prefs: []
  type: TYPE_NORMAL
- en: The next important pre-requisite for calculus revolves around exponents, or
    powers as they are also commonly referred to. There are several rules to keep
    in mind when working with powers too.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Power of Zero**: The result of any number (whether rational or irrational,
    negative or positive, *except* for zero itself) raised to the power of zero, is
    equal to one:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x⁰ = 1
  prefs: []
  type: TYPE_NORMAL
- en: '**Negative Powers**: A base number raised to a negative power turns into a
    fraction, but does not change sign:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x^(-a) = 1 / x^a
  prefs: []
  type: TYPE_NORMAL
- en: '**Fractional Powers**: A base number raised to a fractional power can be converted
    into a root problem:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x^(a/b) = (^b√x)^a = ^b√x^a
  prefs: []
  type: TYPE_NORMAL
- en: '**Addition of Powers**: If two (or more) *equivalent* base terms are being
    multiplied to one another, then their powers may be added:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x^a * x^b = x^((a + b))
  prefs: []
  type: TYPE_NORMAL
- en: '**Subtraction of Powers**: Similarly, if two equivalent base terms are being
    divided, then their power may be subtracted:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x^a / x^b = x^((a – b))
  prefs: []
  type: TYPE_NORMAL
- en: '**Power of Powers**: If a power is also raised to a power, then the two powers
    may be multiplied by one another:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (x^a)^b = x^((ab))
  prefs: []
  type: TYPE_NORMAL
- en: '**Distribution of Powers**: Whether the base numbers are being multiplied or
    divided, the power may be distributed to each variable. However, it *cannot* be
    distributed if the base numbers are, otherwise, being added or subtracted:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (xyz)^a = x^a y^a z^a
  prefs: []
  type: TYPE_NORMAL
- en: (x / y)^(a =) x^a / y^a
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we have rules for working with roots and rules for working with
    logarithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/459e87ea43b2ce10dd2cea9acdc3b9c3.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_7.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Properties of Roots
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/2b5241d0edecb9501d04fb3f12263317.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_8.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Properties of Logarithms
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: Finally, knowing how to solve quadratic equations can also come in handy in
    calculus.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the quadratic equation is factorable, then the easiest method to solve it
    is to express the sum of terms in product form. For example, the following quadratic
    equation can be factored as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: x² – 9 = (x + 3)(x – 3) = 0
  prefs: []
  type: TYPE_NORMAL
- en: Setting each factor to zero permits us to find a solution to this equation,
    which in this case is *x* = ±3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the following quadratic formula may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/e9974c4aa32b4c0f37fec64e629838ae.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_9.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The Quadratic Formula
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: If we had to consider the same quadratic equation as above, then we would set
    the coefficient values to, *a* = 1, *b* = 0, and *c* = 9, which would again result
    in *x* = ±3 as our solution.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fundamentals of Trigonometry**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Trigonometry revolves around three main trigonometric functions, which are the
    sine, the cosine and the tangent, and their reciprocals, which are the cosecant,
    the secant and the cotangent, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'When applied to a right angled triangle, these three main functions allow us
    to calculate the lengths of the sides, or any of the other two acute angles of
    the triangle, depending on the information that we have available to start off
    with. Specifically, for some angle, *x*, in the following 3-4-5 triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/998f034a4cd637fb0451c834a03396f1.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_10.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The 3-4-5 Triangle
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/03d34c6a394b89e054b7aaec6808c7a7.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_11.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The Three Main Trigonometric Functions
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: 'The sine, cosine and tangent functions only work with right-angled triangles,
    and hence can only be used in the calculation of acute angles that are smaller
    than 90^o. Nonetheless, if we had to work within the *unit circle* on the *x*–*y*
    coordinate plane, then we would be able to apply trigonometry to all angles between
    0^o and 360^o:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/f7278067a0da26a78382b8a9cad4e998.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_12.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The Unit Circle
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: The unit circle has its center at the origin of the *x*–*y* coordinate plane,
    and a radius of one unit. Rotations around the unit circle are performed in a
    counterclockwise manner, starting from the positive *x*-axis. The cosine of the
    rotated angle would then be given by the *x*-coordinate of the point that hits
    the unit circle, whereas the *y*-coordinate specifies the sine of the rotated
    angle. It is also worth noting that the quadrants are symmetrical, and hence a
    point in one quadrant has symmetrical counterparts in the other three.
  prefs: []
  type: TYPE_NORMAL
- en: 'The graphed sine, cosine and tangent functions appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/651d90ae51163c29998c4e61a1302e39.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/what_you_need_to_know_13.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plots of the Sine, Cosine and Tangent Functions
  prefs: []
  type: TYPE_NORMAL
- en: Taken from Calculus for Dummies
  prefs: []
  type: TYPE_NORMAL
- en: 'All functions are periodic, with the sine and cosine functions featuring the
    same shape albeit being displaced by 90^o between one another. The sine and cosine
    functions may, indeed, be easily sketched from the calculated *x*– and *y*-coordinates
    as one rotates around the unit circle. The tangent function may also be sketched
    similarly, since for any angle ???? this function may be defined by:'
  prefs: []
  type: TYPE_NORMAL
- en: tan ???? = sin ???? / cos ???? = *y* / *x*
  prefs: []
  type: TYPE_NORMAL
- en: The tangent function is undefined at ±90^o, since the cosine in the denominator
    returns a value of zero at this angle. Hence, we draw vertical *asymptotes* at
    these angles, which are imaginary lines that the curve approaches but never touches.
  prefs: []
  type: TYPE_NORMAL
- en: One final note concerns the inverse of these trigonometric functions. Taking
    the sine function as an example, its inverse is denoted by sin^(-1). This is not
    to be mistaken for the cosecant function, which is rather the *reciprocal* of
    sine, and hence not the same as its inverse.
  prefs: []
  type: TYPE_NORMAL
- en: '**Further Reading**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section provides more resources on the topic if you are looking to go deeper.
  prefs: []
  type: TYPE_NORMAL
- en: '**Books**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Deep Learning](https://www.amazon.com/Deep-Learning-Press-Essential-Knowledge/dp/0262537559/ref=sr_1_4?dchild=1&keywords=deep+learning&qid=1622968138&sr=8-4),
    2019.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Calculus for Dummies](https://www.amazon.com/Calculus-Dummies-Math-Science/dp/1119293499/ref=as_li_ss_tl?dchild=1&keywords=calculus&qid=1606170839&sr=8-2&linkCode=sl1&tag=inspiredalgor-20&linkId=539ed0b89e326b6eb27b1a9a028e9cee&language=en_US),
    2016.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Hitchhiker’s Guide to Calculus](https://www.amazon.com/Hitchhikers-Calculus-Classroom-Resource-Materials/dp/1470449625/ref=as_li_ss_tl?dchild=1&keywords=The+Hitchhiker%27s+Guide+to+Calculus&qid=1606170787&sr=8-1&linkCode=sl1&tag=inspiredalgor-20&linkId=f8875fa9736746bf29d78fc0c55553d8&language=en_US),
    2019.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, you discovered several pre-requisites for working with calculus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: Linear and non-linear functions are central to calculus and machine learning,
    and many calculus problems involve their use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamental concepts from algebra and trigonometry provide the foundations for
    calculus, and will become especially important as we tackle more advanced calculus
    topics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any questions?
  prefs: []
  type: TYPE_NORMAL
- en: Ask your questions in the comments below and I will do my best to answer.
  prefs: []
  type: TYPE_NORMAL
