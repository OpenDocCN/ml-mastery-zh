["```py\n# Generating a dataset of 2D data points and their ground truth labels\nx, y_true = make_blobs(n_samples=100, centers=5, cluster_std=1.5, random_state=10)\n\n# Plotting the dataset\nscatter(x[:, 0], x[:, 1])\nshow()\n```", "```py\n# Specify the algorithm's termination criteria\ncriteria = (TERM_CRITERIA_MAX_ITER + TERM_CRITERIA_EPS, 10, 1.0)\n\n# Run the k-means clustering algorithm on the input data\ncompactness, y_pred, centers = kmeans(data=x.astype(float32), K=5, bestLabels=None, criteria=criteria, attempts=10, flags=KMEANS_RANDOM_CENTERS)\n\n# Plot the data clusters, each having a different color, together with the corresponding cluster centers\nscatter(x[:, 0], x[:, 1], c=y_pred)\nscatter(centers[:, 0], centers[:, 1], c='red')\nshow()\n```", "```py\nfrom cv2 import kmeans, TERM_CRITERIA_MAX_ITER, TERM_CRITERIA_EPS, KMEANS_RANDOM_CENTERS\nfrom numpy import float32\nfrom matplotlib.pyplot import scatter, show\nfrom sklearn.datasets import make_blobs\n\n# Generate a dataset of 2D data points and their ground truth labels\nx, y_true = make_blobs(n_samples=100, centers=5, cluster_std=1.5, random_state=10)\n\n# Plot the dataset\nscatter(x[:, 0], x[:, 1])\nshow()\n\n# Specify the algorithm's termination criteria\ncriteria = (TERM_CRITERIA_MAX_ITER + TERM_CRITERIA_EPS, 10, 1.0)\n\n# Run the k-means clustering algorithm on the input data\ncompactness, y_pred, centers = kmeans(data=x.astype(float32), K=5, bestLabels=None, criteria=criteria, attempts=10, flags=KMEANS_RANDOM_CENTERS)\n\n# Plot the data clusters, each having a different colour, together with the corresponding cluster centers\nscatter(x[:, 0], x[:, 1], c=y_pred)\nscatter(centers[:, 0], centers[:, 1], c='red')\nshow()\n```", "```py\n# Read image\nimg = imread('Images/bricks.jpg')\n\n# Convert it from BGR to RGB\nimg_RGB = cvtColor(img, COLOR_BGR2RGB)\n```", "```py\n# Reshape image to an Mx3 array\nimg_data = img_RGB.reshape(-1, 3)\n\n# Find the number of unique RGB values\nprint(len(unique(img_data, axis=0)), 'unique RGB values out of', img_data.shape[0], 'pixels')\n\n# Specify the algorithm's termination criteria\ncriteria = (TERM_CRITERIA_MAX_ITER + TERM_CRITERIA_EPS, 10, 1.0)\n\n# Run the k-means clustering algorithm on the pixel values\ncompactness, labels, centers = kmeans(data=img_data.astype(float32), K=5, bestLabels=None, criteria=criteria, attempts=10, flags=KMEANS_RANDOM_CENTERS)\n```", "```py\n# Apply the RGB values of the cluster centers to all pixel labels\ncolours = centers[labels].reshape(-1, 3)\n\n# Find the number of unique RGB values\nprint(len(unique(colours, axis=0)), 'unique RGB values out of', img_data.shape[0], 'pixels')\n\n# Reshape array to the original image shape\nimg_colours = colours.reshape(img_RGB.shape)\n\n# Display the quantized image\nimshow(img_colours.astype(uint8))\nshow()\n```", "```py\n5 unique RGB values out of 14155776 pixels\n```", "```py\nfrom cv2 import kmeans, TERM_CRITERIA_MAX_ITER, TERM_CRITERIA_EPS, KMEANS_RANDOM_CENTERS, imread, cvtColor, COLOR_BGR2RGB\nfrom numpy import float32, uint8, unique\nfrom matplotlib.pyplot import show, imshow\n\n# Read image\nimg = imread('Images/bricks.jpg')\n\n# Convert it from BGR to RGB\nimg_RGB = cvtColor(img, COLOR_BGR2RGB)\n\n# Reshape image to an Mx3 array\nimg_data = img_RGB.reshape(-1, 3)\n\n# Find the number of unique RGB values\nprint(len(unique(img_data, axis=0)), 'unique RGB values out of', img_data.shape[0], 'pixels')\n\n# Specify the algorithm's termination criteria\ncriteria = (TERM_CRITERIA_MAX_ITER + TERM_CRITERIA_EPS, 10, 1.0)\n\n# Run the k-means clustering algorithm on the pixel values\ncompactness, labels, centers = kmeans(data=img_data.astype(float32), K=5, bestLabels=None, criteria=criteria, attempts=10, flags=KMEANS_RANDOM_CENTERS)\n\n# Apply the RGB values of the cluster centers to all pixel labels\ncolours = centers[labels].reshape(-1, 3)\n\n# Find the number of unique RGB values\nprint(len(unique(colours, axis=0)), 'unique RGB values out of', img_data.shape[0], 'pixels')\n\n# Reshape array to the original image shape\nimg_colours = colours.reshape(img_RGB.shape)\n\n# Display the quantized image\nimshow(img_colours.astype(uint8))\nshow()\n```"]