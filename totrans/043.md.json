["```py\n# Importing the essential libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the dataset\nAmes = pd.read_csv('Ames.csv')\n\n# Convert 'YrSold' to a categorical variable\nAmes['YrSold'] = Ames['YrSold'].astype('category')\n\nplt.figure(figsize=(10, 6))\nsns.boxplot(x=Ames['YrSold'], y=Ames['SalePrice'], hue=Ames['YrSold'])\nplt.title('Boxplot of Sales Prices by Year', fontsize=18)\nplt.xlabel('Year Sold', fontsize=15)\nplt.ylabel('Sales Price (US$)', fontsize=15)\nplt.legend('')\nplt.show()\n```", "```py\n# Calculating mean and median sales price by year\nsummary_table = Ames.groupby('YrSold')['SalePrice'].agg(['mean', 'median'])\n\n# Rounding the values for better presentation\nsummary_table = summary_table.round(2)\nprint(summary_table)\n```", "```py\n             mean    median\nYrSold                     \n2006    176615.62  157000.0\n2007    179045.08  159000.0\n2008    178170.02  162700.0\n2009    180387.64  162000.0\n2010    173971.67  157900.0\n```", "```py\n# Import an additional library\nimport scipy.stats as stats\n\n# Perform the ANOVA\nf_value, p_value = stats.f_oneway(*[Ames['SalePrice'][Ames['YrSold'] == year]\n                                    for year in Ames['YrSold'].unique()])\n\nprint(f_value, p_value)\n```", "```py\n0.4478735462379817 0.774024927554816\n```", "```py\n# Import an additional library\nimport statsmodels.api as sm\n\n# Fit an ordinary least squares model and get residuals\nmodel = sm.OLS(Ames['SalePrice'], Ames['YrSold'].astype('int')).fit()\nresiduals = model.resid\n\n# Plot QQ plot\nsm.qqplot(residuals, line='s')\nplt.title('Normality Assessment of Residuals via QQ Plot', fontsize=18)\nplt.xlabel('Theoretical Quantiles', fontsize=15)\nplt.ylabel('Sample Residual Quantiles', fontsize=15)\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()\n```", "```py\n#Import shapiro from scipy.stats package\nfrom scipy.stats import shapiro\n\n# Shapiro-Wilk Test\nshapiro_stat, shapiro_p = shapiro(residuals)\nprint(f\"Shapiro-Wilk Test Statistic: {shapiro_stat}\\nP-value: {shapiro_p}\")\n```", "```py\nShapiro-Wilk Test Statistic: 0.8774482011795044\nP-value: 4.273399796804962e-41\n```", "```py\n# Check for equal variances using Levene's test\nlevene_stat, levene_p = stats.levene(*[Ames['SalePrice'][Ames['YrSold'] == year]\n                                      for year in Ames['YrSold'].unique()])\n\nprint(f\"Levene's Test Statistic: {levene_stat}\\nP-value: {levene_p}\")\n```", "```py\nLevene's Test Statistic: 0.2514412478357097\nP-value: 0.9088910499612235\n```", "```py\n# Importing the essential libraries\nimport pandas as pd\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom scipy.stats import shapiro\n\n# Load the dataset\nAmes = pd.read_csv('Ames.csv')\n\n# Perform the ANOVA\nf_value, p_value = stats.f_oneway(*[Ames['SalePrice'][Ames['YrSold'] == year]\n                                    for year in Ames['YrSold'].unique()])\nprint(\"F-value:\", f_value)\nprint(\"p-value:\", p_value)\n\n# Fit an ordinary least squares model and get residuals\nmodel = sm.OLS(Ames['SalePrice'], Ames['YrSold'].astype('int')).fit()\nresiduals = model.resid\n\n# Plot QQ plot\nsm.qqplot(residuals, line='s')\nplt.title('Normality Assessment of Residuals via QQ Plot', fontsize=18)\nplt.xlabel('Theoretical Quantiles', fontsize=15)\nplt.ylabel('Sample Residual Quantiles', fontsize=15)\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()\n\n# Shapiro-Wilk Test\nshapiro_stat, shapiro_p = shapiro(residuals)\nprint(f\"Shapiro-Wilk Test Statistic: {shapiro_stat}\\nP-value: {shapiro_p}\")\n\n# Check for equal variances using Levene's test\nlevene_stat, levene_p = stats.levene(*[Ames['SalePrice'][Ames['YrSold'] == year]\n                                      for year in Ames['YrSold'].unique()])\n\nprint(f\"Levene's Test Statistic: {levene_stat}\\nP-value: {levene_p}\")\n```", "```py\n# Perform the Kruskal-Wallis H-test\nH_statistic, kruskal_p_value = stats.kruskal(*[Ames['SalePrice'][Ames['YrSold'] == year]\n                                               for year in Ames['YrSold'].unique()])\n\nprint(H_statistic, kruskal_p_value)\n```", "```py\n2.1330989438609236 0.7112941815590765\n```", "```py\n# Plot histograms of Sales Price for each year\nfig, axes = plt.subplots(nrows=5, ncols=1, figsize=(12, 8), sharex=True)\n\nfor idx, year in enumerate(sorted(Ames['YrSold'].unique())):\n    sns.histplot(Ames[Ames['YrSold'] == year]['SalePrice'], kde=True, ax=axes[idx], color='skyblue')\n    axes[idx].set_title(f'Distribution of Sales Prices for Year {year}', fontsize=16)\n    axes[idx].set_ylabel('Frequency', fontsize=14)\n    if idx == 4:\n        axes[idx].set_xlabel('Sales Price', fontsize=15)\n    else:\n        axes[idx].set_xlabel('')\n\nplt.tight_layout()\nplt.show()\n```", "```py\n# Run KS Test from scipy.stats\nfrom scipy.stats import ks_2samp\nresults = {}\nfor i, year1 in enumerate(sorted(Ames['YrSold'].unique())):\n    for j, year2 in enumerate(sorted(Ames['YrSold'].unique())):\n        if i < j:\n            ks_stat, ks_p = ks_2samp(Ames[Ames['YrSold'] == year1]['SalePrice'], \n                                     Ames[Ames['YrSold'] == year2]['SalePrice'])\n            results[f\"{year1} vs {year2}\"] = (ks_stat, ks_p)\n\n# Convert the results into a DataFrame for tabular representation\nks_df = pd.DataFrame(results).transpose()\nks_df.columns = ['KS Statistic', 'P-value']\nks_df.reset_index(inplace=True)\nks_df.rename(columns={'index': 'Years Compared'}, inplace=True)\n\nprint(ks_df)\n```", "```py\n  Years Compared  KS Statistic   P-value\n0   2006 vs 2007      0.038042  0.798028\n1   2006 vs 2008      0.052802  0.421325\n2   2006 vs 2009      0.062235  0.226623\n3   2006 vs 2010      0.040006  0.896946\n4   2007 vs 2008      0.039539  0.732841\n5   2007 vs 2009      0.044231  0.586558\n6   2007 vs 2010      0.051508  0.620135\n7   2008 vs 2009      0.032488  0.908322\n8   2008 vs 2010      0.052752  0.603031\n9   2009 vs 2010      0.053236  0.586128\n```"]