["```py\ndef hog_descriptors(imgs):\n    # Create a list to store the HOG feature vectors\n    hog_features = []\n\n    # Set parameter values for the HOG descriptor based on the image data in use\n    winSize = (20, 20)\n    blockSize = (10, 10)\n    blockStride = (5, 5)\n    cellSize = (10, 10)\n    nbins = 9\n\n    # Set the remaining parameters to their default values\n    derivAperture = 1\n    winSigma = -1.\n    histogramNormType = 0\n    L2HysThreshold = 0.2\n    gammaCorrection = False\n    nlevels = 64\n\n    # Create a HOG descriptor\n    hog = HOGDescriptor(winSize, blockSize, blockStride, cellSize, nbins, derivAperture, winSigma,\n                        histogramNormType, L2HysThreshold, gammaCorrection, nlevels)\n\n    # Compute HOG descriptors for the input images and append the feature vectors to the list\n    for img in imgs:\n        hist = hog.compute(img.reshape(20, 20).astype(uint8))\n        hog_features.append(hist)\n\n    return array(hog_features)\n```", "```py\ndef bow_descriptors(imgs):\n    # Create a SIFT descriptor\n    sift = SIFT_create()\n\n    # Create a BoW descriptor\n    # The number of clusters equal to 50 (analogous to the vocabulary size) has been chosen empirically\n    bow_trainer = BOWKMeansTrainer(50)\n    bow_extractor = BOWImgDescriptorExtractor(sift, BFMatcher(NORM_L2))\n\n    for img in imgs:\n        # Reshape each RGB image and convert it to grayscale\n        img = reshape(img, (32, 32, 3), 'F')\n        img = cvtColor(img, COLOR_RGB2GRAY).transpose()\n\n        # Extract the SIFT descriptors\n        _, descriptors = sift.detectAndCompute(img, None)\n\n        # Add the SIFT descriptors to the BoW vocabulary trainer\n        if descriptors is not None:\n            bow_trainer.add(descriptors)\n\n    # Perform k-means clustering and return the vocabulary\n    voc = bow_trainer.cluster()\n\n    # Assign the vocabulary to the BoW descriptor extractor\n    bow_extractor.setVocabulary(voc)\n\n    # Create a list to store the BoW feature vectors\n    bow_features = []\n\n    for img in imgs:\n        # Reshape each RGB image and convert it to grayscale\n        img = reshape(img, (32, 32, 3), 'F')\n        img = cvtColor(img, COLOR_RGB2GRAY).transpose()\n\n        # Compute the BoW feature vector\n        hist = bow_extractor.compute(img, sift.detect(img))\n\n        # Append the feature vectors to the list\n        if hist is not None:\n            bow_features.append(hist[0])\n\n    return array(bow_features)\n```", "```py\nfrom digits_dataset import split_images, split_data\nfrom cifar_dataset import load_images\n\n# Load the digits image\nimg, sub_imgs = split_images('Images/digits.png', 20)\n\n# Obtain a dataset from the digits image\ndigits_imgs, _, _, _ = split_data(20, sub_imgs, 0.8)\n\n# Load a batch of images from the CIFAR dataset\ncifar_imgs = load_images('Images/cifar-10-batches-py/data_batch_1')\n\n# Consider only a subset of images\ndigits_subset = digits_imgs[0:100, :]\ncifar_subset = cifar_imgs[0:100, :]\n```", "```py\ndigits_hog = hog_descriptors(digits_subset)\nprint('Size of HOG feature vectors:', digits_hog.shape)\n\ncifar_bow = bow_descriptors(cifar_subset)\nprint('Size of BoW feature vectors:', cifar_bow.shape)\n```", "```py\nfrom cv2 import (imshow, waitKey, HOGDescriptor, SIFT_create, BOWKMeansTrainer,\n                 BOWImgDescriptorExtractor, BFMatcher, NORM_L2, cvtColor, COLOR_RGB2GRAY)\nfrom digits_dataset import split_images, split_data\nfrom cifar_dataset import load_images\nfrom numpy import uint8, array, reshape\n\n# Load the digits image\nimg, sub_imgs = split_images('Images/digits.png', 20)\n\n# Obtain a dataset from the digits image\ndigits_imgs, _, _, _ = split_data(20, sub_imgs, 0.8)\n\n# Load a batch of images from the CIFAR dataset\ncifar_imgs = load_images('Images/cifar-10-batches-py/data_batch_1')\n\n# Consider only a subset of images\ndigits_subset = digits_imgs[0:100, :]\ncifar_subset = cifar_imgs[0:100, :]\n\ndef hog_descriptors(imgs):\n    # Create a list to store the HOG feature vectors\n    hog_features = []\n\n    # Set parameter values for the HOG descriptor based on the image data in use\n    winSize = (20, 20)\n    blockSize = (10, 10)\n    blockStride = (5, 5)\n    cellSize = (10, 10)\n    nbins = 9\n\n    # Set the remaining parameters to their default values\n    derivAperture = 1\n    winSigma = -1.\n    histogramNormType = 0\n    L2HysThreshold = 0.2\n    gammaCorrection = False\n    nlevels = 64\n\n    # Create a HOG descriptor\n    hog = HOGDescriptor(winSize, blockSize, blockStride, cellSize, nbins, derivAperture, winSigma,\n                        histogramNormType, L2HysThreshold, gammaCorrection, nlevels)\n\n    # Compute HOG descriptors for the input images and append the feature vectors to the list\n    for img in imgs:\n        hist = hog.compute(img.reshape(20, 20).astype(uint8))\n        hog_features.append(hist)\n\n    return array(hog_features)\n\ndef bow_descriptors(imgs):\n    # Create a SIFT descriptor\n    sift = SIFT_create()\n\n    # Create a BoW descriptor\n    # The number of clusters equal to 50 (analogous to the vocabulary size) has been chosen empirically\n    bow_trainer = BOWKMeansTrainer(50)\n    bow_extractor = BOWImgDescriptorExtractor(sift, BFMatcher(NORM_L2))\n\n    for img in imgs:\n        # Reshape each RGB image and convert it to grayscale\n        img = reshape(img, (32, 32, 3), 'F')\n        img = cvtColor(img, COLOR_RGB2GRAY).transpose()\n\n        # Extract the SIFT descriptors\n        _, descriptors = sift.detectAndCompute(img, None)\n\n        # Add the SIFT descriptors to the BoW vocabulary trainer\n        if descriptors is not None:\n            bow_trainer.add(descriptors)\n\n    # Perform k-means clustering and return the vocabulary\n    voc = bow_trainer.cluster()\n\n    # Assign the vocabulary to the BoW descriptor extractor\n    bow_extractor.setVocabulary(voc)\n\n    # Create a list to store the BoW feature vectors\n    bow_features = []\n\n    for img in imgs:\n        # Reshape each RGB image and convert it to grayscale\n        img = reshape(img, (32, 32, 3), 'F')\n        img = cvtColor(img, COLOR_RGB2GRAY).transpose()\n\n        # Compute the BoW feature vector\n        hist = bow_extractor.compute(img, sift.detect(img))\n\n        # Append the feature vectors to the list\n        if hist is not None:\n            bow_features.append(hist[0])\n\n    return array(bow_features)\n\ndigits_hog = hog_descriptors(digits_subset)\nprint('Size of HOG feature vectors:', digits_hog.shape)\n\ncifar_bow = bow_descriptors(cifar_subset)\nprint('Size of BoW feature vectors:', cifar_bow.shape)\n```", "```py\nSize of HOG feature vectors:  (100, 81)\nSize of BoW feature vectors: (100, 50)\n```"]