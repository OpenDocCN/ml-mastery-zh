["```py\nfrom pandas import read_csv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\n\n# Load dataset\nurl = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv\"\nnames = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']\ndataset = read_csv(url, names=names)\n\n# Split-out validation dataset\narray = dataset.values\nX = array[:,0:4]\ny = array[:,4]\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=1, shuffle=True)\n\n# Train\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Test\nscore = clf.score(X_val, y_val)\nprint(\"Validation accuracy\", score)\n```", "```py\nfrom pandas import read_csv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n# Load dataset\nurl = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv\"\nnames = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']\ndataset = read_csv(url, names=names)\n\n# Split-out validation dataset\narray = dataset.values\nX = array[:,0:4]\ny = array[:,4]\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=1, shuffle=True)\n\n# Train\nclf = Pipeline([('scaler',StandardScaler()), ('classifier',SVC())])\nclf.fit(X_train, y_train)\n\n# Test\nscore = clf.score(X_val, y_val)\nprint(\"Validation accuracy\", score)\n```", "```py\nclf = SVC()\nclf = Pipeline([('scaler',StandardScaler()), ('classifier',SVC())])\n```", "```py\nUSE_SCALER = True\n\nif USE_SCALER:\n    clf = Pipeline([('scaler',StandardScaler()), ('classifier',SVC())])\nelse:\n    clf = SVC()\n```", "```py\nSCALER = \"standard\"\nCLASSIFIER = \"svc\"\n\nif CLASSIFIER == \"svc\":\n    model = SVC()\nelif CLASSIFIER == \"cart\":\n    model = DecisionTreeClassifier()\nelse:\n    raise NotImplementedError\n\nif SCALER == \"standard\":\n    clf = Pipeline([('scaler',StandardScaler()), ('classifier',model)])\nelif SCALER == \"maxmin\":\n    clf = Pipeline([('scaler',MaxMinScaler()), ('classifier',model)])\nelif SCALER == None:\n    clf = model\nelse:\n    raise NotImplementedError\n```", "```py\nfrom pandas import read_csv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n# toggle between options\nSCALER = \"maxmin\"    # \"standard\", \"maxmin\", or None\nCLASSIFIER = \"cart\"  # \"svc\" or \"cart\"\n\n# Load dataset\nurl = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv\"\nnames = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']\ndataset = read_csv(url, names=names)\n\n# Split-out validation dataset\narray = dataset.values\nX = array[:,0:4]\ny = array[:,4]\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=1, shuffle=True)\n\n# Create model\nif CLASSIFIER == \"svc\":\n    model = SVC()\nelif CLASSIFIER == \"cart\":\n    model = DecisionTreeClassifier()\nelse:\n    raise NotImplementedError\n\nif SCALER == \"standard\":\n    clf = Pipeline([('scaler',StandardScaler()), ('classifier',model)])\nelif SCALER == \"maxmin\":\n    clf = Pipeline([('scaler',MinMaxScaler()), ('classifier',model)])\nelif SCALER == None:\n    clf = model\nelse:\n    raise NotImplementedError\n\n# Train\nclf.fit(X_train, y_train)\n\n# Test\nscore = clf.score(X_val, y_val)\nprint(\"Validation accuracy\", score)\n```", "```py\nimport numpy as np\nimport scipy.stats as stats\n\n# Covariance matrix and Cholesky decomposition\ncov = np.array([[1, 0.8], [0.8, 1]])\nL = np.linalg.cholesky(cov)\n\n# Generate 100 pairs of bi-variate Gaussian random numbers\nif not \"USE SCIPY\":\n   z = np.random.randn(100,2)\n   x = z @ L.T\nelse:\n   x = stats.multivariate_normal(mean=[0, 0], cov=cov).rvs(100)\n\n...\n```", "```py\nimport numpy as np\n\nDIST = \"normal\"\n\nif DIST == \"normal\":\n    rangen = np.random.normal\nelif DIST == \"uniform\":\n    rangen = np.random.uniform\nelse:\n    raise NotImplementedError\n\nrandom_data = rangen(size=(10,5))\nprint(random_data)\n```", "```py\nimport numpy as np\n\nDIST = \"t\"\n\nif DIST == \"normal\":\n    rangen = np.random.normal\nelif DIST == \"uniform\":\n    rangen = np.random.uniform\nelif DIST == \"t\":\n    def t_wrapper(size):\n        # Student's t distribution with 3 degree of freedom\n        return np.random.standard_t(df=3, size=size)\n    rangen = t_wrapper\nelse:\n    raise NotImplementedError\n\nrandom_data = rangen(size=(10,5))\nprint(random_data)\n```"]