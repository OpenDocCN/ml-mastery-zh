- en: Loading and Providing Datasets in PyTorch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和提供PyTorch中的数据集
- en: 原文：[https://machinelearningmastery.com/loading-and-providing-datasets-in-pytorch/](https://machinelearningmastery.com/loading-and-providing-datasets-in-pytorch/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/loading-and-providing-datasets-in-pytorch/](https://machinelearningmastery.com/loading-and-providing-datasets-in-pytorch/)
- en: Structuring the data pipeline in a way that it can be effortlessly linked to
    your deep learning model is an important aspect of any deep learning-based system.
    PyTorch packs everything to do just that.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据管道结构化，以便轻松地与您的深度学习模型连接是任何基于深度学习的系统的重要方面。PyTorch将所有内容打包到一个地方，以便做到这一点。
- en: While in the [previous tutorial](https://machinelearningmastery.com/using-dataset-classes-in-pytorch/),
    we used simple datasets, we’ll need to work with larger datasets in real world
    scenarios in order to fully exploit the potential of deep learning and neural
    networks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在[上一个教程](https://machinelearningmastery.com/using-dataset-classes-in-pytorch/)中，我们使用了简单的数据集，但在实际场景中，为了充分发挥深度学习和神经网络的潜力，我们需要处理更大的数据集。
- en: 'In this tutorial, you’ll learn how to build custom datasets in PyTorch. While
    the focus here remains only on the image data, concepts learned in this session
    can be applied to any form of dataset such as text or tabular datasets. So, here
    you’ll learn:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，您将学习如何在PyTorch中构建自定义数据集。虽然这里的重点仅限于图像数据，但本节学习的概念可以应用于任何形式的数据集，例如文本或表格数据。因此，在这里您将学到：
- en: How to work with pre-loaded image datasets in PyTorch.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在PyTorch中处理预加载的图像数据集。
- en: How to apply torchvision transforms on preloaded datasets.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在预加载的数据集上应用torchvision转换。
- en: How to build custom image dataset class in PyTorch and apply various transforms
    on it.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在PyTorch中构建自定义图像数据集类，并对其应用各种转换。
- en: '**Kick-start your project** with my book [Deep Learning with PyTorch](https://machinelearningmastery.com/deep-learning-with-pytorch/).
    It provides **self-study tutorials** with **working code**.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动您的项目**，使用我的书籍[《Deep Learning with PyTorch》](https://machinelearningmastery.com/deep-learning-with-pytorch/)。它提供带有**工作代码**的**自学教程**。'
- en: Let’s get started.![](../Images/690e48696ca0dcd77f159c205093fb87.png)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！![](../Images/690e48696ca0dcd77f159c205093fb87.png)
- en: Loading and Providing Datasets in PyTorch
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 加载和提供PyTorch中的数据集
- en: Picture by [Uriel SC](https://unsplash.com/photos/11KDtiUWRq4). Some rights
    reserved.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Uriel SC](https://unsplash.com/photos/11KDtiUWRq4)提供。部分权利保留。
- en: Overview
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: This tutorial is in three parts; they are
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为三部分；它们是：
- en: Preloaded Datasets in PyTorch
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch中的预加载数据集
- en: Applying Torchvision Transforms on Image Datasets
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像数据集上应用Torchvision转换
- en: Building Custom Image Datasets
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义图像数据集
- en: Preloaded Datasets in PyTorch
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyTorch中的预加载数据集
- en: A variety of preloaded datasets such as CIFAR-10, MNIST, Fashion-MNIST, etc.
    are available in the PyTorch domain library. You can import them from torchvision
    and perform your experiments. Additionally, you can benchmark your model using
    these datasets.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyTorch领域库中有多种预加载数据集，如CIFAR-10、MNIST、Fashion-MNIST等。您可以从torchvision导入它们并进行实验。此外，您还可以使用这些数据集来评估您的模型。
- en: We’ll move on by importing Fashion-MNIST dataset from torchvision. The Fashion-MNIST
    dataset includes 70,000 grayscale images in 28×28 pixels, divided into ten classes,
    and each class contains 7,000 images. There are 60,000 images for training and
    10,000 for testing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续从torchvision导入Fashion-MNIST数据集。Fashion-MNIST数据集包含70,000个灰度图像，每个图像为28×28像素，分为十类，每类包含7,000张图像。其中有60,000张图像用于训练，10,000张用于测试。
- en: Let’s start by importing a few libraries we’ll use in this tutorial.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先导入本教程中将使用的几个库。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s also define a helper function to display the sample elements in the dataset
    using matplotlib.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还定义一个辅助函数，使用matplotlib显示数据集中的示例元素。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we’ll load the Fashion-MNIST dataset, using the function `FashionMNIST()`
    from `torchvision.datasets`. This function takes some arguments:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`torchvision.datasets`中的`FashionMNIST()`函数加载Fashion-MNIST数据集。此函数接受一些参数：
- en: '`root`: specifies the path where we are going to store our data.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root`：指定我们将存储数据的路径。'
- en: '`train`: indicates whether it’s train or test data. We’ll set it to False as
    we don’t yet need it for training.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`train`：指示它是训练数据还是测试数据。我们将其设置为False，因为我们目前不需要用于训练。'
- en: '`download`: set to `True`, meaning it will download the data from the internet.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`download`：设置为`True`，表示它将从互联网上下载数据。'
- en: '`transform`: allows us to use any of the available transforms that we need
    to apply on our dataset.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transform`：允许我们在数据集上应用任何需要的转换。'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s check the class names along with their corresponding labels we have in
    the Fashion-MNIST dataset.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下 Fashion-MNIST 数据集中我们拥有的类别名称及其对应标签。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It prints
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它会打印
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Similarly, for class labels:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 类别标签也类似：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It prints
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它会打印
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here is how we can visualize the first element of the dataset with its corresponding
    label using the helper function defined above.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何使用上述定义的帮助函数来可视化数据集的第一个元素及其对应标签的。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![First element of the Fashion MNIST dataset](../Images/8eb784afc1dd3a52d6a76ad6a8e0bc60.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![时尚 MNIST 数据集的第一个元素](../Images/8eb784afc1dd3a52d6a76ad6a8e0bc60.png)'
- en: First element of the Fashion MNIST dataset
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 时尚 MNIST 数据集的第一个元素
- en: Want to Get Started With Deep Learning with PyTorch?
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想要开始使用 PyTorch 进行深度学习吗？
- en: Take my free email crash course now (with sample code).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 立即参加我的免费电子邮件速成课程（附带示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注册并获得课程的免费 PDF 电子书版本。
- en: Applying Torchvision Transforms on Image Datasets
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在图像数据集上应用 Torchvision 变换
- en: In many cases, we’ll have to apply several transforms before feeding the images
    to neural networks. For instance, a lot of times we’ll need to `RandomCrop` the
    images for data augmentation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们需要在将图像输入神经网络之前应用几个变换。例如，我们经常需要对图像进行 `RandomCrop` 以进行数据增强。
- en: As you can see below, PyTorch enables us to choose from a variety of transforms.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，PyTorch 允许我们选择各种变换。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This shows all available transform functions:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了所有可用的变换函数：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As an example, let’s apply the `RandomCrop` transform to the Fashion-MNIST images
    and convert them to a tensor. We can use `transform.Compose` to combine multiple
    transforms as we learned from the previous tutorial.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，让我们对 Fashion-MNIST 图像应用 `RandomCrop` 变换并将其转换为张量。我们可以使用 `transform.Compose`
    来组合多个变换，正如我们从之前的教程中学到的那样。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This prints
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这会打印
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see image has now been cropped to $16\times 16$ pixels. Now, let’s
    plot the first element of the dataset to see how they have been randomly cropped.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，图像现在已被裁剪为 $16\times 16$ 像素。现在，让我们绘制数据集的第一个元素，以查看它们是如何被随机裁剪的。
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This shows the following image
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了以下图像
- en: '![](../Images/9baac4179f41ede2f91c546d3f2210ec.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9baac4179f41ede2f91c546d3f2210ec.png)'
- en: Cropped image from Fashion MNIST dataset
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Fashion MNIST 数据集中裁剪的图像
- en: 'Putting everything together, the complete code is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 综合所有内容，完整代码如下：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Building Custom Image Datasets
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建自定义图像数据集
- en: Until now we have been discussing prebuilt datasets in PyTorch, but what if
    we have to build a custom dataset class for our image dataset? While in the [previous
    tutorial](https://machinelearningmastery.com/using-dataset-classes-in-pytorch/)
    we only had a simple overview about the components of the `Dataset` class, here
    we’ll build a custom image dataset class from scratch.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在讨论 PyTorch 中的预构建数据集，但如果我们需要为我们的图像数据集构建一个自定义数据集类呢？虽然在 [之前的教程](https://machinelearningmastery.com/using-dataset-classes-in-pytorch/)
    中我们只是简单了解了 `Dataset` 类的组件，但在这里我们将从头开始构建一个自定义图像数据集类。
- en: 'Firstly, in the constructor we define the parameters of the class. The `__init__`
    function in the class instantiates the `Dataset` object. The directory where images
    and annotations are stored is initialized along with the transforms if we want
    to apply them on our dataset later. Here we assume we have some images in a directory
    structure like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在构造函数中我们定义了类的参数。`__init__` 函数在类中实例化了 `Dataset` 对象。存储图像和注释的目录被初始化，同时如果我们希望稍后在数据集上应用变换，这些变换也会被初始化。这里我们假设我们在一个如下的目录结构中有一些图像：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'and the annotation is a CSV file like the following, located under the root
    directory of the images (i.e., “attface” above):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注释是如下的 CSV 文件，位于图像根目录下（即上面的“attface”）：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: where the first column of the CSV data is the path to the image and the second
    column is the label.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 CSV 数据的第一列是图像的路径，第二列是标签。
- en: Similarly, we define the `__len__` function in the class that returns the total
    number of samples in our image dataset while the `__getitem__` method reads and
    returns a data element from the dataset at a given index.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们在类中定义了 `__len__` 函数，它返回我们图像数据集中样本的总数，而 `__getitem__` 方法从数据集中读取并返回给定索引处的一个数据元素。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we can create our dataset object and apply the transforms on it. We assume
    the image data are located under the directory named “attface” and the annotation
    CSV file is at “attface/imagedata.csv”. Then the dataset is created as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建我们的数据集对象并对其应用变换。我们假设图像数据位于名为“attface”的目录下，注释 CSV 文件位于“attface/imagedata.csv”下。然后，数据集的创建如下：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Optionally, you can add the transform function to the dataset as well:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，你还可以将变换函数添加到数据集中：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can use this custom image dataset class to any of your datasets stored in
    your directory and apply the transforms for your requirements.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个自定义图像数据集类用于存储在目录中的任何数据集，并根据需要应用变换。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this tutorial, you learned how to work with image datasets and transforms
    in PyTorch. Particularly, you learned:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你学习了如何在 PyTorch 中处理图像数据集和变换。特别地，你学习了：
- en: How to work with pre-loaded image datasets in PyTorch.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 PyTorch 中处理预加载的图像数据集。
- en: How to apply torchvision transforms on pre-loaded datasets.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何对预加载的数据集应用 torchvision 变换。
- en: How to build custom image dataset class in PyTorch and apply various transforms
    on it.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 PyTorch 中构建自定义图像数据集类并对其应用各种变换。
