["```py\ndef calculate_area_rectangle(width, height):\n    return width * height\n```", "```py\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\n    def set_width(self, width):\n        self.width = width\n\n    def set_height(self, height):\n        self.height = height\n```", "```py\nimport unittest\n```", "```py\nclass TestGetAreaRectangle(unittest.TestCase):\n    def runTest(self):\n        rectangle = Rectangle(2, 3)\n        self.assertEqual(rectangle.get_area(), 6, \"incorrect area\")\n```", "```py\n...\nunittest.main()\n```", "```py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nOK\n```", "```py\nimport unittest\n\n# Our code to be tested\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\n    def set_width(self, width):\n        self.width = width\n\n    def set_height(self, height):\n        self.height = height\n\n# The test based on unittest module\nclass TestGetAreaRectangle(unittest.TestCase):\n    def runTest(self):\n        rectangle = Rectangle(2, 3)\n        self.assertEqual(rectangle.get_area(), 6, \"incorrect area\")\n\n# run the test\nunittest.main()\n```", "```py\nclass TestGetAreaRectangle(unittest.TestCase):\n    def test_normal_case(self):\n        rectangle = Rectangle(2, 3)\n        self.assertEqual(rectangle.get_area(), 6, \"incorrect area\")\n\n    def test_negative_case(self): \n        \"\"\"expect -1 as output to denote error when looking at negative area\"\"\"\n        rectangle = Rectangle(-1, 2)\n        self.assertEqual(rectangle.get_area(), -1, \"incorrect negative output\")\n```", "```py\nF.\n======================================================================\nFAIL: test_negative_case (__main__.TestGetAreaRectangle)\nexpect -1 as output to denote error when looking at negative area\n----------------------------------------------------------------------\nTraceback (most recent call last):\n \tFile \"<ipython-input-96-59b1047bb08a>\", line 9, in test_negative_case\n \t\tself.assertEqual(rectangle.get_area(), -1, \"incorrect negative output\")\nAssertionError: -2 != -1 : incorrect negative output\n----------------------------------------------------------------------\nRan 2 tests in 0.003s\n\nFAILED (failures=1)\n```", "```py\ndef test_geq(self):\n  \"\"\"tests if value is greater than or equal to a particular target\"\"\"\n  self.assertGreaterEqual(self.rectangle.get_area(), -1)\n```", "```py\ndef test_assert_raises(self): \n  \"\"\"using assertRaises to detect if an expected error is raised when running a particular block of code\"\"\"\n  with self.assertRaises(ZeroDivisionError):\n    a = 1 / 0\n```", "```py\nclass TestGetAreaRectangleWithSetUp(unittest.TestCase):\n  def setUp(self):\n    self.rectangle = Rectangle(0, 0)\n\n  def test_normal_case(self):\n    self.rectangle.set_width(2)\n    self.rectangle.set_height(3)\n    self.assertEqual(self.rectangle.get_area(), 6, \"incorrect area\")\n\n  def test_negative_case(self): \n    \"\"\"expect -1 as output to denote error when looking at negative area\"\"\"\n    self.rectangle.set_width(-1)\n    self.rectangle.set_height(2)\n    self.assertEqual(self.rectangle.get_area(), -1, \"incorrect negative output\")\n```", "```py\nclass TestGetAreaRectangleWithSetUp(unittest.TestCase):\n  @classmethod\n  def setUpClass(self):\n    self.rectangle = Rectangle(0, 0)\n```", "```py\n...\n# loads all unit tests from TestGetAreaRectangle into a test suite\ncalculate_area_suite = unittest.TestLoader() \\\n                       .loadTestsFromTestCase(TestGetAreaRectangleWithSetUp)\n```", "```py\nrunner = unittest.TextTestRunner()\nrunner.run(calculate_area_suite)\n```", "```py\nclass TestGetAreaRectangleWithSetUp(unittest.TestCase):\n\n  @classmethod\n  def setUpClass(self):\n    #this method is only run once for the entire class rather than being run for each test which is done for setUp()\n    self.rectangle = Rectangle(0, 0)\n\n  def test_normal_case(self):\n    self.rectangle.set_width(2)\n    self.rectangle.set_height(3)\n    self.assertEqual(self.rectangle.get_area(), 6, \"incorrect area\")\n\n  def test_geq(self):\n    \"\"\"tests if value is greater than or equal to a particular target\"\"\"\n    self.assertGreaterEqual(self.rectangle.get_area(), -1)\n\n  def test_assert_raises(self): \n    \"\"\"using assertRaises to detect if an expected error is raised when running a particular block of code\"\"\"\n    with self.assertRaises(ZeroDivisionError):\n      a = 1 / 0\n```", "```py\npip install pytest\n```", "```py\ndef test_normal_case(self):\n    rectangle = Rectangle(2, 3)\n    assert rectangle.get_area() == 6, \"incorrect area\"\n```", "```py\n# Our code to be tested\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\n    def set_width(self, width):\n        self.width = width\n\n    def set_height(self, height):\n        self.height = height\n\n# The test function to be executed by PyTest\ndef test_normal_case():\n    rectangle = Rectangle(2, 3)\n    assert rectangle.get_area() == 6, \"incorrect area\"\n```", "```py\npython -m pytest test_file.py\n```", "```py\n=================== test session starts ====================\nplatform darwin -- Python 3.9.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /Users/MLM\nplugins: anyio-3.4.0, typeguard-2.13.2\ncollected 1 item\n\ntest_file.py .                                       [100%]\n\n==================== 1 passed in 0.01s =====================\n```", "```py\nclass TestGetAreaRectangle:\n    def test_normal_case(self):\n        rectangle = Rectangle(2, 3)\n        assert rectangle.get_area() == 6, \"incorrect area\"\n    def test_negative_case(self): \n        \"\"\"expect -1 as output to denote error when looking at negative area\"\"\"\n        rectangle = Rectangle(-1, 2)\n        assert rectangle.get_area() == -1, \"incorrect negative output\"\n```", "```py\n=================== test session starts ====================\nplatform darwin -- Python 3.9.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /Users/MLM\nplugins: anyio-3.4.0, typeguard-2.13.2\ncollected 2 items\n\ntest_code.py .F                                      [100%]\n\n========================= FAILURES =========================\n_________ TestGetAreaRectangle.test_negative_case __________\n\nself = <test_code.TestGetAreaRectangle object at 0x10f5b3fd0>\n\n    def test_negative_case(self):\n        \"\"\"expect -1 as output to denote error when looking at negative area\"\"\"\n        rectangle = Rectangle(-1, 2)\n>       assert rectangle.get_area() == -1, \"incorrect negative output\"\nE       AssertionError: incorrect negative output\nE       assert -2 == -1\nE        +  where -2 = <bound method Rectangle.get_area of <test_code.Rectangle object at 0x10f5b3df0>>()\nE        +    where <bound method Rectangle.get_area of <test_code.Rectangle object at 0x10f5b3df0>> = <test_code.Rectangle object at 0x10f5b3df0>.get_area\n\nunittest5.py:24: AssertionError\n================= short test summary info ==================\nFAILED test_code.py::TestGetAreaRectangle::test_negative_case\n=============== 1 failed, 1 passed in 0.12s ================\n```", "```py\n# Our code to be tested\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\n    def set_width(self, width):\n        self.width = width\n\n    def set_height(self, height):\n        self.height = height\n\n# The test functions to be executed by PyTest\nclass TestGetAreaRectangle:\n    def test_normal_case(self):\n        rectangle = Rectangle(2, 3)\n        assert rectangle.get_area() == 6, \"incorrect area\"\n    def test_negative_case(self):\n        \"\"\"expect -1 as output to denote error when looking at negative area\"\"\"\n        rectangle = Rectangle(-1, 2)\n        assert rectangle.get_area() == -1, \"incorrect negative output\"\n```", "```py\n@pytest.fixture\ndef rectangle():\n    return Rectangle(0, 0)\n\ndef test_negative_case(rectangle): \n    print (rectangle.width)\n    rectangle.set_width(-1)\n    rectangle.set_height(2)\n    assert rectangle.get_area() == -1, \"incorrect negative output\"\n```", "```py\nimport pytest\n\n# Our code to be tested\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\n    def set_width(self, width):\n        self.width = width\n\n    def set_height(self, height):\n        self.height = height\n\n@pytest.fixture\ndef rectangle():\n    return Rectangle(0, 0)\n\ndef test_negative_case(rectangle):\n    print (rectangle.width)\n    rectangle.set_width(-1)\n    rectangle.set_height(2)\n    assert rectangle.get_area() == -1, \"incorrect negative output\"\n```", "```py\nimport pandas_datareader.data as web\n\ndef get_stock_data(ticker):\n    \"\"\"pull data from stooq\"\"\"\n    df = web.DataReader(ticker, \"yahoo\")\n    return df\n```", "```py\nimport datetime\nimport unittest\n\nimport pandas as pd\nimport pandas_datareader.data as web\n\ndef get_stock_data(ticker):\n    \"\"\"pull data from stooq\"\"\"\n    df = web.DataReader(ticker, 'yahoo')\n    return df\n\nclass TestGetStockData(unittest.TestCase):\n    @classmethod\n    def setUpClass(self):\n        \"\"\"We only want to pull this data once for each TestCase since it is an expensive operation\"\"\"\n        self.df = get_stock_data('^DJI')\n\n    def test_columns_present(self):\n        \"\"\"ensures that the expected columns are all present\"\"\"\n        self.assertIn(\"Open\", self.df.columns)\n        self.assertIn(\"High\", self.df.columns)\n        self.assertIn(\"Low\", self.df.columns)\n        self.assertIn(\"Close\", self.df.columns)\n        self.assertIn(\"Volume\", self.df.columns)\n\n    def test_non_empty(self):\n        \"\"\"ensures that there is more than one row of data\"\"\"\n        self.assertNotEqual(len(self.df.index), 0)\n\n    def test_high_low(self):\n        \"\"\"ensure high and low are the highest and lowest in the same row\"\"\"\n        ohlc = self.df[[\"Open\",\"High\",\"Low\",\"Close\"]]\n        highest = ohlc.max(axis=1)\n        lowest = ohlc.min(axis=1)\n        self.assertTrue(ohlc.le(highest, axis=0).all(axis=None))\n        self.assertTrue(ohlc.ge(lowest, axis=0).all(axis=None))\n\n    def test_most_recent_within_week(self):\n        \"\"\"most recent data was collected within the last week\"\"\"\n        most_recent_date = pd.to_datetime(self.df.index[-1])\n        self.assertLessEqual((datetime.datetime.today() - most_recent_date).days, 7)\n\nunittest.main()\n```", "```py\nimport pytest\n\n# scope=\"class\" tears down the fixture only at the end of the last test in the class, so we avoid rerunning this step.\n@pytest.fixture(scope=\"class\")\ndef stock_df():\n  # We only want to pull this data once for each TestCase since it is an expensive operation\n  df = get_stock_data('^DJI')\n  return df\n\nclass TestGetStockData:\n\n  def test_columns_present(self, stock_df):\n    # ensures that the expected columns are all present\n    assert \"Open\" in stock_df.columns\n    assert \"High\" in stock_df.columns\n    assert \"Low\" in stock_df.columns\n    assert \"Close\" in stock_df.columns\n    assert \"Volume\" in stock_df.columns\n\n  def test_non_empty(self, stock_df):\n    # ensures that there is more than one row of data\n    assert len(stock_df.index) != 0\n\n  def test_most_recent_within_week(self, stock_df):\n    # most recent data was collected within the last week\n    most_recent_date = pd.to_datetime(stock_df.index[0])\n    assert (datetime.datetime.today() - most_recent_date).days <= 7\n```"]