["```py\nimport time\n\ndef task():\n    print('Sleeping for 0.5 seconds')\n    time.sleep(0.5)\n    print('Finished sleeping')\n```", "```py\n...\nimport multiprocessing\np1 = multiprocessing.Process(target=task)\np2 = multiprocessing.Process(target=task)\n```", "```py\n...\np1.start()\np2.start()\n```", "```py\nimport multiprocessing\nimport time\n\ndef task():\n    print('Sleeping for 0.5 seconds')\n    time.sleep(0.5)\n    print('Finished sleeping')\n\nif __name__ == \"__main__\":\n    start_time = time.perf_counter()\n\n    # Creates two processes\n    p1 = multiprocessing.Process(target=task)\n    p2 = multiprocessing.Process(target=task)\n\n    # Starts both processes\n    p1.start()\n    p2.start()\n\n    finish_time = time.perf_counter()\n\n    print(f\"Program finished in {finish_time-start_time} seconds\")\n```", "```py\nProgram finished in 0.012921249988721684 seconds\nSleeping for 0.5 seconds\nSleeping for 0.5 seconds\nFinished sleeping\nFinished sleeping\n```", "```py\n...\np1.join()\np2.join()\n```", "```py\nSleeping for 0.5 seconds\nSleeping for 0.5 seconds\nFinished sleeping\nFinished sleeping\nProgram finished in 0.5688213340181392 seconds\n```", "```py\nimport multiprocessing\nimport time\n\ndef task():\n    print('Sleeping for 0.5 seconds')\n    time.sleep(0.5)\n    print('Finished sleeping')\n\nif __name__ == \"__main__\": \n    start_time = time.perf_counter()\n    processes = []\n\n    # Creates 10 processes then starts them\n    for i in range(10):\n        p = multiprocessing.Process(target = task)\n        p.start()\n        processes.append(p)\n\n    # Joins all the processes \n    for p in processes:\n        p.join()\n\n    finish_time = time.perf_counter()\n\n    print(f\"Program finished in {finish_time-start_time} seconds\")\n```", "```py\ndef cube(x):\n    return x**3\n```", "```py\nimport multiprocessing\n\ndef cube(x):\n    return x**3\n\nif __name__ == \"__main__\":\n    # this does not work\n    processes = [multiprocessing.Process(target=cube, args=(x,)) for x in range(1,1000)]\n    [p.start() for p in processes]\n    result = [p.join() for p in processes]\n    print(result)\n```", "```py\nimport multiprocessing\nimport time\n\ndef cube(x):\n    return x**3\n\nif __name__ == \"__main__\":\n    pool = multiprocessing.Pool(3)\n    start_time = time.perf_counter()\n    processes = [pool.apply_async(cube, args=(x,)) for x in range(1,1000)]\n    result = [p.get() for p in processes]\n    finish_time = time.perf_counter()\n    print(f\"Program finished in {finish_time-start_time} seconds\")\n    print(result)\n```", "```py\nimport multiprocessing\nimport time\n\ndef cube(x):\n    return x**3\n\nif __name__ == \"__main__\":\n    pool = multiprocessing.Pool(3)\n    start_time = time.perf_counter()\n    result = pool.map(cube, range(1,1000))\n    finish_time = time.perf_counter()\n    print(f\"Program finished in {finish_time-start_time} seconds\")\n    print(result)\n```", "```py\nresult = [cube(x) for x in range(1,1000)]\n```", "```py\nimport concurrent.futures\nimport time\n\ndef cube(x):\n    return x**3\n\nif __name__ == \"__main__\":\n    with concurrent.futures.ProcessPoolExecutor(3) as executor:\n        start_time = time.perf_counter()\n        result = list(executor.map(cube, range(1,1000)))\n        finish_time = time.perf_counter()\n    print(f\"Program finished in {finish_time-start_time} seconds\")\n    print(result)\n```", "```py\npip install joblib\n```", "```py\nimport time\nfrom joblib import Parallel, delayed\n\ndef cube(x):\n    return x**3\n\nstart_time = time.perf_counter()\nresult = Parallel(n_jobs=3)(delayed(cube)(i) for i in range(1,1000))\nfinish_time = time.perf_counter()\nprint(f\"Program finished in {finish_time-start_time} seconds\")\nprint(result)\n```", "```py\nresult = Parallel(n_jobs=3)((cube, (i,), {}) for i in range(1,1000))\n```", "```py\nresult = Parallel(n_jobs=3, prefer=\"threads\")(delayed(cube)(i) for i in range(1,1000))\n```"]