- en: Two-Dimensional Tensors in Pytorch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/two-dimensional-tensors-in-pytorch/](https://machinelearningmastery.com/two-dimensional-tensors-in-pytorch/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Two-dimensional tensors are analogous to two-dimensional metrics. Like a two-dimensional
    metric, a two-dimensional tensor also has $n$ number of rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a gray-scale image as an example, which is a two-dimensional matrix
    of numeric values, commonly known as pixels. Ranging from ‘0’ to ‘255’, each number
    represents a pixel intensity value. Here, the lowest intensity number (which is
    ‘0’) represents black regions in the image while the highest intensity number
    (which is ‘255’) represents white regions in the image. Using the PyTorch framework,
    this two-dimensional image or matrix can be converted to a two-dimensional tensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous post, we learned about [one-dimensional tensors in PyTorch](https://machinelearningmastery.com/one-dimensional-tensors-in-pytorch/)
    and applied some useful tensor operations. In this tutorial, we’ll apply those
    operations to two-dimensional tensors using the PyTorch library. Specifically,
    we’ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create two-dimensional tensors in PyTorch and explore their types and
    shapes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About slicing and indexing operations on two-dimensional tensors in detail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To apply a number of methods to tensors such as, tensor addition, multiplication,
    and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kick-start your project** with my book [Deep Learning with PyTorch](https://machinelearningmastery.com/deep-learning-with-pytorch/).
    It provides **self-study tutorials** with **working code**.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.![](../Images/9660d9ef15ab9f0b20162f27d5ced700.png)
  prefs: []
  type: TYPE_NORMAL
- en: Two-Dimensional Tensors in Pytorch
  prefs: []
  type: TYPE_NORMAL
- en: Picture by [dylan dolte](https://unsplash.com/photos/NIrgENd0sAY). Some rights
    reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Tutorial Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This tutorial is divided into parts; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: Types and shapes of two-dimensional tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting two-dimensional tensors into NumPy arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting pandas series to two-dimensional tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing and slicing operations on two-dimensional tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations on two-dimensional tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Types and Shapes of Two-Dimensional Tensors**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s first import a few necessary libraries we’ll use in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To check the types and shapes of the two-dimensional tensors, we’ll use the
    same methods from PyTorch, [introduced previously for one-dimensional tensors](https://machinelearningmastery.com/one-dimensional-tensors-in-pytorch/).
    But, should it work the same way it did for the one-dimensional tensors?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s demonstrate by converting a 2D list of integers to a 2D tensor object.
    As an example, we’ll create a 2D list and apply `torch.tensor()` for conversion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `torch.tensor()` method also works well for the two-dimensional
    tensors. Now, let’s use `shape()`, `size()`, and `ndimension()` methods to return
    the shape, size, and dimensions of a tensor object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Want to Get Started With Deep Learning with PyTorch?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take my free email crash course now (with sample code).
  prefs: []
  type: TYPE_NORMAL
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  prefs: []
  type: TYPE_NORMAL
- en: '**Converting Two-Dimensional Tensors to NumPy Arrays**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyTorch allows us to convert a two-dimensional tensor to a NumPy array and then
    back to a tensor. Let’s find out how.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Converting Pandas Series to Two-Dimensional Tensors**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similarly, we can also convert a pandas DataFrame to a tensor. As with the one-dimensional
    tensors, we’ll use the same steps for the conversion. Using values attribute we’ll
    get the NumPy array and then use `torch.from_numpy` that allows you to convert
    a pandas DataFrame to a tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Here is how we’ll do it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Indexing and Slicing Operations on Two-Dimensional Tensors**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For indexing operations, different elements in a tensor object can be accessed
    using square brackets. You can simply put corresponding indices in square brackets
    to access the desired elements in a tensor.
  prefs: []
  type: TYPE_NORMAL
- en: In the below example, we’ll create a tensor and access certain elements using
    two different methods. Note that the index value should always be one less than
    where the element is located in a two-dimensional tensor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What if we need to access two or more elements at the same time? That’s where
    tensor slicing comes into play. Let’s use the previous example to access first
    two elements of the second row and first three elements of the third row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Operations on Two-Dimensional Tensors**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While there are a lot of operations you can apply on two-dimensional tensors
    using the PyTorch framework, here, we’ll introduce you to tensor addition, and
    scalar and matrix multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding Two-Dimensional Tensors**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding two tensors is similar to matrix addition. It’s quite a straight forward
    process as you simply need an addition (+) operator to perform the operation.
    Let’s add two tensors in the below example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Scalar and Matrix Multiplication of Two-Dimensional Tensors**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scalar multiplication in two-dimensional tensors is also identical to scalar
    multiplication in matrices. For instance, by multiplying a tensor with a scalar,
    say a scalar 4, you’ll be multiplying every element in a tensor by 4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Coming to the multiplication of the two-dimensional tensors, `torch.mm()` in
    PyTorch makes things easier for us. Similar to the matrix multiplication in linear
    algebra, number of columns in tensor object A (i.e. 2×3) must be equal to the
    number of rows in tensor object B (i.e. 3×2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Developed at the same time as TensorFlow, PyTorch used to have a simpler syntax
    until TensorFlow adopted Keras in its 2.x version. To learn the basics of PyTorch,
    you may want to read the PyTorch tutorials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pytorch.org/tutorials/](https://pytorch.org/tutorials/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Especially the basics of PyTorch tensor can be found in the Tensor tutorial
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html](https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also quite a few books on PyTorch that are suitable for beginners.
    A more recently published book should be recommended as the tools and syntax are
    actively evolving. One example is
  prefs: []
  type: TYPE_NORMAL
- en: Deep Learning with PyTorch by Eli Stevens, Luca Antiga, and Thomas Viehmann,
    2020.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.manning.com/books/deep-learning-with-pytorch](https://www.manning.com/books/deep-learning-with-pytorch)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, you learned about two-dimensional tensors in PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create two-dimensional tensors in PyTorch and explore their types and
    shapes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About slicing and indexing operations on two-dimensional tensors in detail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To apply a number of methods to tensors such as, tensor addition, multiplication,
    and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
