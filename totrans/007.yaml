- en: Using ChatGPT as Your Programming Assistant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/using-chatgpt-as-your-programming-assistant/](https://machinelearningmastery.com/using-chatgpt-as-your-programming-assistant/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A large language model is basically a machine that can understand and generate
    text. Depends on how it is trained, sometimes the model can generate something
    other than text. ChatGPT is such a large language model. It can generate programming
    code if you prompt it correctly. In this post, you will learn how to make ChatGPT
    to generate a program for you. Specifically, you will learn
  prefs: []
  type: TYPE_NORMAL
- en: How to make ChatGPT to bootstrap your programming project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use ChatGPT as your programming helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get started and apply ChatGPT** with my book [Maximizing Productivity with
    ChatGPT](https://machinelearningmastery.com/productivity-with-chatgpt/). It provides
    **real-world use cases** and **prompt examples** designed to get you using ChatGPT
    quickly.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.![](../Images/491c72032f6cec5038964e7202550e28.png)
  prefs: []
  type: TYPE_NORMAL
- en: Using ChatGPT as Your Programming Assistant
  prefs: []
  type: TYPE_NORMAL
- en: Picture generated by the author using Stable Diffusion. Some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This post is divided into two parts; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a Programming Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Code and Generating Function Snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start a Programming Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s consider a simple project: You want to set up a REST API server that
    can help you take a “screen capture” of an entire web page of a provided URL.
    Optionally, the REST API can accept an additional optional parameter of an email
    address. In that case, the screen capture is not returned but emailed out.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a project that involves multiple components. You need something that
    can act like a REST API server that listens to HTTP requests and responds accordingly.
    You also need something to fetch a URL and take a screenshot like a normal web
    browser. There is also a logic in it that depends on whether an email address
    is provided; the output can be an image file returned, or an email with an attachment
    is sent out.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are unfamiliar with how to create a REST API server or don’t know the
    tools available, you can ask ChatGPT for help. Simply put down all the detail
    in your prompt and ask:'
  prefs: []
  type: TYPE_NORMAL
- en: I need to create a REST API server that accepts a URL as input, captures the
    web page screenshot into JPEG format and returns it as output. Optionally, the
    user may provide an email address as an additional input. In that case, the screenshot
    should be emailed out instead of returned. Can you help me with this program?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'With this, ChatGPT produces the following suggestion:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Certainly! I can help you with that. To create a REST API server that captures
    web page screenshots and handles optional email functionality, you can use Node.js
    along with a few additional packages. Here’s an outline of the steps you can follow:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '1\. Set up a new Node.js project and initialize it using npm:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '2\. Install the necessary packages. You’ll need `express` for the API server,
    `puppeteer` for capturing screenshots, and `nodemailer` for sending emails:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '3\. Create an `index.js` file and set up the basic server using Express:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '4\. Inside the `/screenshot` route, use Puppeteer to capture the web page screenshot
    and handle the response accordingly:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '5\. To handle sending emails with the screenshot attachment, add the following
    code inside the `if (email)` block:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make sure to replace `'your-email-service-provider'`, `'your-email@example.com'`,
    and `'your-email-password'` with your actual email service provider’s details.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '6\. Finally, start the server:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, when you make a GET request to `http://localhost:3000/screenshot?url={URL}`,
    the server will capture a screenshot of the provided URL. If an email address
    is also provided as `email={EMAIL}`, the server will send the screenshot as an
    email attachment instead of returning it directly.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Remember to handle errors and add any necessary error checking or validation
    based on your requirements.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That’s it! You now have a basic REST API server that captures web page screenshots
    and optionally sends them via email. Feel free to enhance it further according
    to your needs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is a very detailed result that tells you how to finish this programming
    task. The response covered all the requirements, but you should notice that when
    you didn’t specify explicitly in the prompt, ChatGPT will make some design decisions
    for you, such as what programming language to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is not easy to think for all the details at the first run, but the nature
    of ChatGPT allows you to provide follow up prompt to revise the answer, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: For the above problem, I want to use Python and FastAPI as the web framework
    and Selenium for the web browser. Can you rewrite this?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The response from ChatGPT now becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: Certainly! Here’s a revised version of the solution using Python, FastAPI as
    the web framework, and Selenium for the web browser automation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '1\. Install the necessary packages. You’ll need `fastapi`, `uvicorn` for running
    the server, `selenium`, and `webdriver_manager` for managing the web driver:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '2\. Create a new file called `main.py` and import the required modules:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '3\. Define a request model to handle the input data:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '4\. Create a route to capture the web page screenshot:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '5\. Start the server using Uvicorn:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, when you make a GET request to `http://localhost:8000/screenshot?url={URL}`,
    the server will capture a screenshot of the provided URL. If an email address
    is also provided as `email={EMAIL}`, you can handle sending the email with the
    screenshot attachment using the `email` field in the request.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Remember to handle errors and add any necessary error checking or validation
    based on your requirements.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note: This solution assumes you have Chrome installed on your machine. If you’re
    using a different browser, you’ll need to adjust the webdriver accordingly.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That’s it! You now have a REST API server using Python, FastAPI, and Selenium
    to capture web page screenshots and handle optional email functionality.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can see that, you didn’t provide any unnecessary detail in your follow-up
    prompt except referencing to “the above problem” but ChatGPT can accurately “translated”
    the Node.js implementation into Python and using the libraries you specified.
  prefs: []
  type: TYPE_NORMAL
- en: It is a fantastic result, although you may still need to polish the code. One
    example is that the browser screen size is certainly affecting how a web page
    is rendered, but the size was hard-coded in the above since you didn’t specify
    that it should be adjustable in your prompt. Another potential reason to polish
    the generated code is to catch other coding style issues or add defensive measures
    against security concerns.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, as in the other use case, the more detail you put in the prompt
    with sufficient clarity is the key to a useful response. In the case of a programming
    task, it is crucial to lay out the details of
  prefs: []
  type: TYPE_NORMAL
- en: What is the objective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the input and output format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the tools the program should use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the different situations that the program may encounter and how should
    these situations be handled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Code and Generating Function Snippets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, it is not a large program that you want to write but a smaller function.
    You can ask ChatGPT to generate a function for you using a prompt similar to the
    above, except you need to specify the output format, such as a function or a class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Indeed you can also do the other way round, namely, provide a code to ChatGPT
    and ask it to explain in English. It is sometimes useful, especially to decipher
    other people’s code. Let’s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Please explain what the following code is doing:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This prompt is very simple: There is only one keyword, “explain”. But pay attention
    to how you provide the code to ChatGPT: The use of backticks follows the Markdown’s
    code fence syntax to quote the program. This helps identify which is your instruction
    and which is not.'
  prefs: []
  type: TYPE_NORMAL
- en: 'While this is not a very long program, ChatGPT explained the code with great
    verbosity. It also identifies the intent at a high level, namely, it is to calculate
    the determinant of a matrix. The following is the response:'
  prefs: []
  type: TYPE_NORMAL
- en: The code you provided is a recursive implementation of calculating the determinant
    of a square matrix using the Laplace expansion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here’s a step-by-step breakdown of what the code does:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The function `det` takes two parameters: a pointer to a 2D array (`float**
    a`) representing the matrix and the size of the matrix (`float k`).'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It declares some variables: `s` for sign, `ret` for the determinant value,
    and `**b` as a temporary matrix.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It checks if `k` is equal to 1\. If so, it means we have reached the base case
    of a 1×1 matrix, and the function returns the single value in the matrix, which
    is the determinant.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: If `k` is greater than 1, it proceeds with the calculation.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It dynamically allocates memory for the temporary matrix `b` with size `k`x`k`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It initializes `ret` to 0.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It enters a loop that iterates over each column of the first row of the matrix
    `a`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the loop, it resets the indices `m` and `n` to 0.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It enters a nested loop that iterates over each element of the matrix `a`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the nested loop, it sets the element in the temporary matrix `b` at position
    `m`,`n` to 0.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It checks if the current element is not in the first row (`i != 0`) and not
    in the current column (`j != c`).
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: If the element is not in the first row or the current column, it copies the
    value from matrix `a` to the temporary matrix `b` at position `m`,`n`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It updates the indices `m` and `n` based on the position of the next element
    in `b`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: After the nested loop, it calculates the determinant of the submatrix `b` by
    recursively calling the `det` function with the temporary matrix `b` and size
    `k - 1`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It multiplies the determinant of the submatrix by the sign `s` (alternating
    sign).
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It multiplies the sign `s` by -1 to switch the sign for the next iteration.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It adds the product of the sign, the element in the first row (`a[0][c]`), and
    the determinant of the submatrix to the running sum `ret`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: The loop continues to the next column.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: After the loop, it frees the memory allocated for each row of the temporary
    matrix `b`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: It frees the memory allocated for the temporary matrix `b`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, it returns the calculated determinant value `ret`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In summary, the code recursively calculates the determinant of a square matrix
    by performing a Laplace expansion along the first row. It uses a temporary matrix
    to store the submatrices obtained by excluding the first row and the selected
    column. The recursion continues until it reaches the base case of a 1×1 matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Follow-up to improve the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This code is not easy to understand at first glance. There may be a way to
    make it easier to read. Indeed, ChatGPT can do a good job in this case, with just
    a very simple follow-up prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: Can you rewrite this code for clarity and add comments?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The keywords here are “for clarity” and “add comments”. ChatGPT provides the
    following in response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Certainly! Here’s a revised version of the code with comments explaining each
    step:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I’ve added comments above each significant section of the code to explain what
    it does. This should make the code more readable and easier to understand.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This version is undoubtedly easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides, you can ask for more. Such as ask to catch bugs or potential security
    issues in the code. Let’s ask ChatGPT to produce some unit test code:'
  prefs: []
  type: TYPE_NORMAL
- en: Can you give me a few unit test cases to ensure this function works well?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Not require any further explanation, the following is the response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Certainly! Here are a few unit test cases to verify the correctness of the
    `determinant` function:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Test Case 1: 2×2 Matrix'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Test Case 2: 3×3 Matrix'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Test Case 3: 4×4 Matrix'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: These test cases cover matrices of different sizes (2×2, 3×3, and 4×4) and include
    positive, negative, and zero determinant values. By comparing the calculated determinant
    values with the expected outputs, you can verify if the `determinant` function
    is working correctly.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'But it is quite obvious, the unit test code missed a corner case: The 1×1 matrix.
    This reveals that ChatGPT is not always perfect. You should only use it as your
    assistant not replacement. You should always verify the result.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this post, you saw how ChatGPT can help you with programming. Not only can
    it generate code as part of its response to your question, but also it can figure
    out the intention of a code that you provided. Specifically, you have learned
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use ChatGPT to generate the initial code for your software project,
    or generate test code for a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can ask ChatGPT to explain the code to you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can make use of ChatGPT to refactor and clean up code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
