["```py\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\n# Load the dataset (replace 'data.csv' with your actual file path)\ndf = pd.read_csv('userdata.csv')\n\n# Data cleaning: remove duplicates and handle missing values\ndf = df.drop_duplicates()\ndf = df.dropna()\n\n# Feature selection: selecting relevant features for clustering\nselected_features = ['Quantity', 'UnitPrice', 'CustomerID']\nX = df[selected_features]\n\n# Normalization (standardization)\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n```", "```py\n# Determine the optimal number of clusters using the Elbow Method\ndef determine_optimal_clusters(X_scaled, max_clusters=10):\n    distances = []\n\n    for n in range(2, max_clusters+1):\n        kmeans = KMeans(n_clusters=n, random_state=42)\n        kmeans.fit(X_scaled)\n        distances.append(kmeans.inertia_)\n\n    plt.figure(figsize=(7, 5))\n    plt.plot(range(2, max_clusters+1), distances, marker='o')\n    plt.title('Elbow Method')\n    plt.xlabel('Number of clusters')\n    plt.ylabel('Sum of squared distances')\n    plt.xticks(range(2, max_clusters+1))\n    plt.grid(True)\n    plt.show()\n\n    return distances\n\ndistances = determine_optimal_clusters(X_scaled)\n```", "```py\n# Apply K-means clustering with the chosen number of clusters\nchosen_clusters = 7  \nkmeans = KMeans(n_clusters=chosen_clusters, random_state=42)\nkmeans.fit(X_scaled)\n\n# Get cluster labels\ncluster_labels = kmeans.labels_\n\n# Add the cluster labels to the original dataframe\ndf['Cluster'] = cluster_labels\n\n# Visualize the clusters in 3D\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Scatter plot for each cluster\nfor cluster in range(chosen_clusters):\n    cluster_data = df[df['Cluster'] == cluster]\n    ax.scatter(cluster_data['Quantity'], cluster_data['UnitPrice'], cluster_data['CustomerID'],\n               label=f'Cluster {cluster}', s=50)\n\nax.set_xlabel('Quantity')\nax.set_ylabel('UnitPrice')\nax.set_zlabel('CustomerID')\n\n# Add a legend\nax.legend()\nplt.show()\n```"]