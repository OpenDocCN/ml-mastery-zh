["```py\n$ pip install pylint\n```", "```py\nimport numpy as np\nimport h5py\nimport tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, AveragePooling2D, Dropout, Flatten\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n# Load MNIST digits\n(X_train, Y_train), (X_test, Y_test) = mnist.load_data()\n\n# Reshape data to (n_samples, height, wiedth, n_channel)\nX_train = np.expand_dims(X_train, axis=3).astype(\"float32\")\nX_test = np.expand_dims(X_test, axis=3).astype(\"float32\")\n\n# One-hot encode the output\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\n# LeNet5 model\ndef createmodel(activation):\n    model = Sequential([\n        Conv2D(6, (5,5), input_shape=(28,28,1), padding=\"same\", activation=activation),\n        AveragePooling2D((2,2), strides=2),\n        Conv2D(16, (5,5), activation=activation),\n        AveragePooling2D((2,2), strides=2),\n        Conv2D(120, (5,5), activation=activation),\n        Flatten(),\n        Dense(84, activation=activation),\n        Dense(10, activation=\"softmax\")\n    ])\n    return model\n\n# Train the model\nmodel = createmodel(tanh)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nearlystopping = EarlyStopping(monitor=\"val_loss\", patience=4, restore_best_weights=True)\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, batch_size=32, callbacks=[earlystopping])\n\n# Evaluate the model\nprint(model.evaluate(X_test, y_test, verbose=0))\nmodel.save(\"lenet5.h5\")\n```", "```py\n$ pylint lenet5-notworking.py\n```", "```py\n************* Module lenet5-notworking\nlenet5-notworking.py:39:0: C0301: Line too long (115/100) (line-too-long)\nlenet5-notworking.py:1:0: C0103: Module name \"lenet5-notworking\" doesn't conform to snake_case naming style (invalid-name)\nlenet5-notworking.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nlenet5-notworking.py:4:0: E0611: No name 'datasets' in module 'LazyLoader' (no-name-in-module)\nlenet5-notworking.py:5:0: E0611: No name 'models' in module 'LazyLoader' (no-name-in-module)\nlenet5-notworking.py:6:0: E0611: No name 'layers' in module 'LazyLoader' (no-name-in-module)\nlenet5-notworking.py:7:0: E0611: No name 'utils' in module 'LazyLoader' (no-name-in-module)\nlenet5-notworking.py:8:0: E0611: No name 'callbacks' in module 'LazyLoader' (no-name-in-module)\nlenet5-notworking.py:18:25: E0601: Using variable 'y_train' before assignment (used-before-assignment)\nlenet5-notworking.py:19:24: E0601: Using variable 'y_test' before assignment (used-before-assignment)\nlenet5-notworking.py:23:4: W0621: Redefining name 'model' from outer scope (line 36) (redefined-outer-name)\nlenet5-notworking.py:22:0: C0116: Missing function or method docstring (missing-function-docstring)\nlenet5-notworking.py:36:20: E0602: Undefined variable 'tanh' (undefined-variable)\nlenet5-notworking.py:2:0: W0611: Unused import h5py (unused-import)\nlenet5-notworking.py:3:0: W0611: Unused tensorflow imported as tf (unused-import)\nlenet5-notworking.py:6:0: W0611: Unused Dropout imported from tensorflow.keras.layers (unused-import)\n\n-------------------------------------\nYour code has been rated at -11.82/10\n```", "```py\n$ pylint -d E0611 lenet5-notworking.py\n```", "```py\n$ pylint -d E0611,C0301 lenet5-notworking.py\n```", "```py\n...\nfrom tensorflow.keras.datasets import mnist  # pylint: disable=no-name-in-module\nfrom tensorflow.keras.models import Sequential # pylint: disable=E0611\nfrom tensorflow.keras.layers import Conv2D, Dense, AveragePooling2D, Dropout, Flatten\nfrom tensorflow.keras.utils import to_categorical\n```", "```py\n$ pip install flake8\n```", "```py\n$ flake8 lenet5-notworking.py\nlenet5-notworking.py:2:1: F401 'h5py' imported but unused\nlenet5-notworking.py:3:1: F401 'tensorflow as tf' imported but unused\nlenet5-notworking.py:6:1: F401 'tensorflow.keras.layers.Dropout' imported but unused\nlenet5-notworking.py:6:80: E501 line too long (85 > 79 characters)\nlenet5-notworking.py:18:26: F821 undefined name 'y_train'\nlenet5-notworking.py:19:25: F821 undefined name 'y_test'\nlenet5-notworking.py:22:1: E302 expected 2 blank lines, found 1\nlenet5-notworking.py:24:21: E231 missing whitespace after ','\nlenet5-notworking.py:24:41: E231 missing whitespace after ','\nlenet5-notworking.py:24:44: E231 missing whitespace after ','\nlenet5-notworking.py:24:80: E501 line too long (87 > 79 characters)\nlenet5-notworking.py:25:28: E231 missing whitespace after ','\nlenet5-notworking.py:26:22: E231 missing whitespace after ','\nlenet5-notworking.py:27:28: E231 missing whitespace after ','\nlenet5-notworking.py:28:23: E231 missing whitespace after ','\nlenet5-notworking.py:36:1: E305 expected 2 blank lines after class or function definition, found 1\nlenet5-notworking.py:36:21: F821 undefined name 'tanh'\nlenet5-notworking.py:37:80: E501 line too long (86 > 79 characters)\nlenet5-notworking.py:38:80: E501 line too long (88 > 79 characters)\nlenet5-notworking.py:39:80: E501 line too long (115 > 79 characters)\n```", "```py\nflake8 --ignore E501,E231 lenet5-notworking.py\n```", "```py\nlenet5-notworking.py:2:1: F401 'h5py' imported but unused\nlenet5-notworking.py:3:1: F401 'tensorflow as tf' imported but unused\nlenet5-notworking.py:6:1: F401 'tensorflow.keras.layers.Dropout' imported but unused\nlenet5-notworking.py:18:26: F821 undefined name 'y_train'\nlenet5-notworking.py:19:25: F821 undefined name 'y_test'\nlenet5-notworking.py:22:1: E302 expected 2 blank lines, found 1\nlenet5-notworking.py:36:1: E305 expected 2 blank lines after class or function definition, found 1\nlenet5-notworking.py:36:21: F821 undefined name 'tanh'\n```", "```py\n...\nimport tensorflow as tf  # noqa: F401\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\n```", "```py\n$ pip install mypy\n```", "```py\n$ mypy lenet5-notworking.py\nlenet5-notworking.py:2: error: Skipping analyzing \"h5py\": module is installed, but missing library stubs or py.typed marker\nlenet5-notworking.py:2: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nlenet5-notworking.py:3: error: Skipping analyzing \"tensorflow\": module is installed, but missing library stubs or py.typed marker\nlenet5-notworking.py:4: error: Skipping analyzing \"tensorflow.keras.datasets\": module is installed, but missing library stubs or py.typed marker\nlenet5-notworking.py:5: error: Skipping analyzing \"tensorflow.keras.models\": module is installed, but missing library stubs or py.typed marker\nlenet5-notworking.py:6: error: Skipping analyzing \"tensorflow.keras.layers\": module is installed, but missing library stubs or py.typed marker\nlenet5-notworking.py:7: error: Skipping analyzing \"tensorflow.keras.utils\": module is installed, but missing library stubs or py.typed marker\nlenet5-notworking.py:8: error: Skipping analyzing \"tensorflow.keras.callbacks\": module is installed, but missing library stubs or py.typed marker\nlenet5-notworking.py:18: error: Cannot determine type of \"y_train\"\nlenet5-notworking.py:19: error: Cannot determine type of \"y_test\"\nlenet5-notworking.py:36: error: Name \"tanh\" is not defined\nFound 10 errors in 1 file (checked 1 source file)\n```", "```py\nimport h5py\n\ndef dumphdf5(filename: str) -> int:\n    \"\"\"Open a HDF5 file and print all the dataset and attributes stored\n\n    Args:\n        filename: The HDF5 filename\n\n    Returns:\n        Number of dataset found in the HDF5 file\n    \"\"\"\n    count: int = 0\n\n    def recur_dump(obj) -> None:\n        print(f\"{obj.name} ({type(obj).__name__})\")\n        if obj.attrs.keys():\n            print(\"\\tAttribs:\")\n            for key in obj.attrs.keys():\n                print(f\"\\t\\t{key}: {obj.attrs[key]}\")\n        if isinstance(obj, h5py.Group):\n            # Group has key-value pairs\n            for key, value in obj.items():\n                recur_dump(value)\n        elif isinstance(obj, h5py.Dataset):\n            count += 1\n            print(obj[()])\n\n    with h5py.File(filename) as obj:\n        recur_dump(obj)\n        print(f\"{count} dataset found\")\n\nwith open(\"my_model.h5\") as fp:\n    dumphdf5(fp)\n```", "```py\n$ mypy dumphdf5.py\ndumphdf5.py:1: error: Skipping analyzing \"h5py\": module is installed, but missing library stubs or py.typed marker\ndumphdf5.py:1: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\ndumphdf5.py:3: error: Missing return statement\ndumphdf5.py:33: error: Argument 1 to \"dumphdf5\" has incompatible type \"TextIO\"; expected \"str\"\nFound 3 errors in 1 file (checked 1 source file)\n```", "```py\nimport h5py # type: ignore\n\ndef dumphdf5(filename: str) -> int:\n    \"\"\"Open a HDF5 file and print all the dataset and attributes stored\n\n    Args:\n        filename: The HDF5 filename\n\n    Returns:\n        Number of dataset found in the HDF5 file\n    \"\"\"\n    count: int = 0\n\n    def recur_dump(obj) -> None:\n        nonlocal count\n        print(f\"{obj.name} ({type(obj).__name__})\")\n        if obj.attrs.keys():\n            print(\"\\tAttribs:\")\n            for key in obj.attrs.keys():\n                print(f\"\\t\\t{key}: {obj.attrs[key]}\")\n        if isinstance(obj, h5py.Group):\n            # Group has key-value pairs\n            for key, value in obj.items():\n                recur_dump(value)\n        elif isinstance(obj, h5py.Dataset):\n            count += 1\n            print(obj[()])\n\n    with h5py.File(filename) as obj:\n        recur_dump(obj)\n        print(f\"{count} dataset found\")\n    return count\n\ndumphdf5(\"my_model.h5\")\n```"]