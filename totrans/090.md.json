["```py\npython -m timeit -s 'import numpy as np' 'np.random.random()'\n```", "```py\nimport timeit\nimport numpy as np\n\ntime = timeit.timeit(\"np.random.random()\", globals=globals())\nprint(time)\n```", "```py\nimport random\n\ndef main():\n    n = random.random()\n    print(n)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\npython randomsample.py\n```", "```py\npython -m randomsample\n```", "```py\nimport randomsample\n\nrandomsample.main()\n```", "```py\nregressor/\n    __init__.py\n    data.json\n    model.pickle\n    predict.py\n    train.py\n```", "```py\nimport os\nimport json\nimport pickle\nfrom sklearn.linear_model import LinearRegression\n\ndef load_data():\n    current_dir = os.path.dirname(os.path.realpath(__file__))\n    filepath = os.path.join(current_dir, \"data.json\")\n    data = json.load(open(filepath))\n    return data\n\ndef train():\n    reg = LinearRegression()\n    data = load_data()\n    reg.fit(data[\"data\"], data[\"target\"])\n    return reg\n```", "```py\nimport os\nimport pickle\nimport sys\nimport numpy as np\n\ndef predict(features):\n    current_dir = os.path.dirname(os.path.realpath(__file__))\n    filepath = os.path.join(current_dir, \"model.pickle\")\n    with open(filepath, \"rb\") as fp:\n        reg = pickle.load(fp)\n    return reg.predict(features)\n\nif __name__ == \"__main__\":\n    arr = np.asarray(sys.argv[1:]).astype(float).reshape(1,-1)\n    y = predict(arr)\n    print(y[0])\n```", "```py\nimport pickle\nfrom regressor.train import train\n\nmodel = train()\nwith open(\"model.pickle\", \"wb\") as fp:\n    pickle.save(model, fp)\n```", "```py\npython -m regressor.predict 0.186 0 8.3 0 0.62 6.2 58 1.96 6 400 18.1 410 11.5\n```", "```py\nimport sys\nimport numpy as np\nfrom .predict import predict\n\nif __name__ == \"__main__\":\n    arr = np.asarray(sys.argv[1:]).astype(float).reshape(1,-1)\n    y = predict(arr)\n    print(y[0])\n```", "```py\npython -m regressor 0.186 0 8.3 0 0.62 6.2 58 1.96 6 400 18.1 410 11.5\n```", "```py\nproject/\n    pyproject.toml\n    setup.cfg\n    MANIFEST.in\n    regressor/\n        __init__.py\n        data.json\n        model.pickle\n        predict.py\n        train.py\n```", "```py\n[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n```", "```py\n[metadata]\nname = mlm_demo\nversion = 0.0.1\ndescription = a simple linear regression model\n\n[options]\npackages = regressor\ninclude_package_data = True\npython_requires = >=3.6\ninstall_requires =\n    scikit-learn==1.0.2\n    numpy>=1.22, <1.23\n    h5py\n```", "```py\ninclude regressor/data.json\ninclude regressor/model.pickle\n```", "```py\npip install .\n```", "```py\nimport numpy as np\nfrom regressor.predict import predict\n\nX = np.asarray([[0.186,0,8.3,0,0.62,6.2,58,1.96,6,400,18.1,410,11.5]])\ny = predict(X)\nprint(y[0])\n```", "```py\n__version__ = '0.0.1'\n```", "```py\nscikit-learn==1.0.2\nnumpy>=1.22, <1.23\nh5py\n```", "```py\npip install -r requirements.txt\n```", "```py\n$ python -m venv myproject\n```", "```py\n$ source myproject/bin/activate\n```", "```py\n$ deactivate\n```"]