["```py\ndef add(a, b):\n    return a + b\n\nc = add(\"one\", \"two\")\n```", "```py\ndef add(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise ValueError(\"Input must be numbers\")\n    return a + b\n```", "```py\ndef add(a, b):\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        raise ValueError(\"Input must be numbers\")\n    return a + b\n```", "```py\ndef range(a, b=None, c=None):\n    if c is None:\n        c = 1\n    if b is None:\n        b = a\n        a = 0\n    values = []\n    n = a\n    while n < b:\n        values.append(n)\n        n = n + c\n    return values\n```", "```py\ndef add(a, b):\n    assert isinstance(a, (int, float)), \"`a` must be a number\"\n    assert isinstance(b, (int, float)), \"`b` must be a number\"\n    return a + b\n```", "```py\n$ python -O script.py\n```", "```py\ndef evenitems(arr):\n    newarr = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            newarr.append(arr[i])\n    assert len(newarr) * 2 >= len(arr)\n    return newarr\n```", "```py\ndef binary_search(array, target):\n    \"\"\"Binary search on array for target\n\n    Args:\n        array: sorted array\n        target: the element to search for\n    Returns:\n        index n on the array such that array[n]==target\n        if the target not found, return -1\n    \"\"\"\n    s,e = 0, len(array)\n    while s < e:\n        m = (s+e)//2\n        if array[m] == target:\n            return m\n        elif array[m] > target:\n            e = m\n        elif array[m] < target:\n            s = m+1\n        assert m != (s+e)//2, \"we didn't move our midpoint\"\n    return -1\n```", "```py\nimport math\n\nREGISTRY = {}\n\ndef register(name):\n    def _decorator(fn):\n        REGISTRY[name] = fn\n        return fn\n    return _decorator\n\n@register(\"relu\")\ndef rectified(x):\n    return x if x > 0 else 0\n\n@register(\"sigmoid\")\ndef sigmoid(x):\n    return 1/(1 + math.exp(-x))\n\ndef activate(x, funcname):\n    if funcname not in REGISTRY:\n        raise NotImplementedError(f\"Function {funcname} is not implemented\")\n    else:\n        func = REGISTRY[funcname]\n        return func(x)\n\nprint(activate(1.23, \"relu\"))\nprint(activate(1.23, \"sigmoid\"))\nprint(activate(1.23, \"tanh\"))\n```", "```py\n1.23\n0.7738185742694538\nTraceback (most recent call last):\n  File \"/Users/MLM/offensive.py\", line 28, in <module>\n    print(activate(1.23, \"tanh\"))\n  File \"/Users/MLM/offensive.py\", line 21, in activate\n    raise NotImplementedError(f\"Function {funcname} is not implemented\")\nNotImplementedError: Function tanh is not implemented\n```", "```py\ndef func(a=[]):\n    a.append(1)\n    return a\n```", "```py\nLOGS = []\n\ndef log(action):\n    LOGS.append(action)\n\ndata = {\"name\": None}\nfor n in [\"Alice\", \"Bob\", \"Charlie\"]:\n    data[\"name\"] = n\n    ...  # do something with `data`\n    log(data)  # keep a record of what we did\n```", "```py\nimport copy\n\ndef log(action):\n    copied_action = copy.deepcopy(action)\n    LOGS.append(copied_action)\n```", "```py\ndef neg_in_upper_tri(matrix):\n    n_rows = len(matrix)\n    n_cols = len(matrix[0])\n    for i in range(n_rows):\n        for j in range(n_cols):\n            if i > j:\n                continue  # we are not in upper triangular\n            if matrix[i][j] < 0:\n                return True\n    return False\n```", "```py\ndef get_upper_tri(matrix):\n    n_rows = len(matrix)\n    n_cols = len(matrix[0])\n    for i in range(n_rows):\n        for j in range(n_cols):\n            if i > j:\n                continue  # we are not in upper triangular\n            yield matrix[i][j]\n\ndef neg_in_upper_tri(matrix):\n    for element in get_upper_tri(matrix):\n        if element[i][j] < 0:\n            return True\n    return False\n```", "```py\ndef isfloat(floatstring):\n    if not isinstance(floatstring, str):\n        raise ValueError(\"Expects a string input\")\n    seen_integer = False\n    seen_dot = False\n    seen_decimal = False\n    for char in floatstring:\n        if char.isdigit():\n            if not seen_integer:\n                seen_integer = True\n            elif seen_dot and not seen_decimal:\n                seen_decimal = True\n        elif char == \".\":\n            if not seen_integer:\n                return False  # e.g., \".3456\"\n            elif not seen_dot:\n                seen_dot = True\n            else:\n                return False  # e.g., \"1..23\"\n        else:\n            return False  # e.g. \"foo\"\n    if not seen_integer:\n        return False   # e.g., \"\"\n    if seen_dot and not seen_decimal:\n        return False  # e.g., \"2.\"\n    return True\n\nprint(isfloat(\"foo\"))       # False\nprint(isfloat(\".3456\"))     # False\nprint(isfloat(\"1.23\"))      # True\nprint(isfloat(\"1..23\"))     # False\nprint(isfloat(\"2\"))         # True\nprint(isfloat(\"2.\"))        # False\nprint(isfloat(\"2,345.67\"))  # False\n```", "```py\ndef isfloat(floatstring):\n    if not isinstance(floatstring, str):\n        raise ValueError(\"Expects a string input\")\n    # States: \"start\", \"integer\", \"dot\", \"decimal\"\n    state = \"start\"\n    for char in floatstring:\n        if state == \"start\":\n            if char.isdigit():\n                state = \"integer\"\n            else:\n                return False  # bad transition, can't continue\n        elif state == \"integer\":\n            if char.isdigit():\n                pass  # stay in the same state\n            elif char == \".\":\n                state = \"dot\"\n            else:\n                return False  # bad transition, can't continue\n        elif state == \"dot\":\n            if char.isdigit():\n                state = \"decimal\"\n            else:\n                return False  # bad transition, can't continue\n        elif state == \"decimal\":\n            if not char.isdigit():\n                return False  # bad transition, can't continue\n    if state in [\"integer\", \"decimal\"]:\n        return True\n    else:\n        return False\n\nprint(isfloat(\"foo\"))       # False\nprint(isfloat(\".3456\"))     # False\nprint(isfloat(\"1.23\"))      # True\nprint(isfloat(\"1..23\"))     # False\nprint(isfloat(\"2\"))         # True\nprint(isfloat(\"2.\"))        # False\nprint(isfloat(\"2,345.67\"))  # False\n```", "```py\nimport re\n\ndef isfloat(floatstring):\n    if not isinstance(floatstring, str):\n        raise ValueError(\"Expects a string input\")\n    m = re.match(r\"\\d+(\\.\\d+)?$\", floatstring)\n    return m is not None\n\nprint(isfloat(\"foo\"))       # False\nprint(isfloat(\".3456\"))     # False\nprint(isfloat(\"1.23\"))      # True\nprint(isfloat(\"1..23\"))     # False\nprint(isfloat(\"2\"))         # True\nprint(isfloat(\"2.\"))        # False\nprint(isfloat(\"2,345.67\"))  # False\n```"]