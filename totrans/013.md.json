["```py\nimport tensorflow as tf\n\n# Check if TPU is available\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    print(\"Running on TPU:\", tpu.master())\nexcept ValueError:\n    strategy = tf.distribute.OneDeviceStrategy(\"GPU\")\n    print(\"Running on GPU or CPU\")\n\n# Load and preprocess your dataset\n# Replace `your_dataset` with your own dataset loading and preprocessing code\n\n# Define the model architecture\n# Replace `your_model` with your own model architecture\n\n# Compile the model\n# Replace `your_loss`, `your_metrics`, and `your_optimizer` with appropriate values\nwith strategy.scope():\n    model = your_model\n    model.compile(loss=your_loss, metrics=your_metrics, optimizer=your_optimizer)\n\n# Define training parameters\n# Replace `your_epochs` and `your_batch_size` with appropriate values\nepochs = your_epochs\nbatch_size = your_batch_size\n\n# Train the model\n# Replace `your_training_data` with your own training data\nmodel.fit(your_training_data, epochs=epochs, batch_size=batch_size)\n\n# Evaluate the model\n# Replace `your_test_data` with your own test data\nloss, accuracy = model.evaluate(your_test_data)\nprint(\"Test loss:\", loss)\nprint(\"Test accuracy:\", accuracy)\n```"]