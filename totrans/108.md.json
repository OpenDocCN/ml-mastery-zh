["```py\nPython 3.7.4 (default, Aug 13 2019, 15:17:50)&nbsp;\n[Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n```", "```py\n2 + 3\n```", "```py\n5\n```", "```py\npython test_script.py\n```", "```py\nHello World!\n```", "```py\nimport sys\nimport numpy as np\nfrom tensorflow.keras.applications import vgg16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom tensorflow.keras.preprocessing import image\n\n# Load the VGG16 model pre-trained on the ImageNet dataset\nvgg16_model = vgg16.VGG16(weights='imagenet')\n\n# Read the command-line argument passed to the interpreter when invoking the script\nimage_path = sys.argv[1]\ntop_guesses = sys.argv[2]\n\n# Load the image, resized according to the model target size\nimg_resized = image.load_img(image_path, target_size=(224, 224))\n\n# Convert the image into an array\nimg = image.img_to_array(img_resized) \n\n# Add in a dimension\nimg = np.expand_dims(img, axis=0) \n\n# Scale the pixel intensity values\nimg = preprocess_input(img) \n\n# Generate a prediction for the test image\npred_vgg = vgg16_model.predict(img)\n\n# Decode and print the top 3 predictions\nprint('Prediction:', decode_predictions(pred_vgg, top=int(top_guesses)))\n```", "```py\npython pretrained_model.py dog.jpg 3\n```", "```py\nPrediction: [[('n02088364', 'beagle', 0.6751468), ('n02089867', 'Walker_hound', 0.1394801), ('n02089973', 'English_foxhound', 0.057901423)]]\n```", "```py\npython -O test_script.py\n```", "```py\npython -m pdb test_script.py\n```", "```py\n%run pretrained_model.py dog.jpg 3\n```", "```py\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications import vgg16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom tensorflow.keras.preprocessing import image\n\n# Load the VGG16 model pre-trained on the ImageNet dataset\nvgg16_model = vgg16.VGG16(weights='imagenet')\n\n# Read the arguments passed to the interpreter when invoking the script\nimage_path = sys.argv[1]\ntop_guesses = sys.argv[2]\n\n# Load the image, resized according to the model target size\nimg_resized = image.load_img(image_path, target_size=(224, 224))\n\n# Convert the image into an array\nimg = image.img_to_array(img_resized)\n\n# Display the image to check that it has been correctly resized\nplt.imshow(img.astype(np.uint8))\n\n# Add in a dimension\nimg = np.expand_dims(img, axis=0) \n\n# Scale the pixel intensity values\nimg = preprocess_input(img) \n\n# Generate a prediction for the test image\npred_vgg = vgg16_model.predict(img)\n\n# Decode and print the top 3 predictions\nprint('Prediction:', decode_predictions(pred_vgg, top=int(top_guesses)))\n```", "```py\n%run pretrained_model_image.py dog.jpg 3\n```", "```py\n# Load the VGG16 model pre-trained on the ImageNet dataset\nvgg16_model = vgg16.VGG16(weights='imagenet')\n\n# Load the image, resized according to the model target size\nimg_resized = image.load_img(image_path, target_size=(224, 224))\n\n# Convert the image into an array\nimg = image.img_to_array(img_resized) \n\n# Display the image to check that it has been correctly resized\nplt.imshow(img.astype(np.uint8))\n\n# Add in a dimension\nimg = np.expand_dims(img, axis=0) \n\n# Scale the pixel intensity values\nimg = preprocess_input(img) \n\n# Generate a prediction for the test image\npred_vgg = vgg16_model.predict(img)\n\n# Decode and print the top 3 predictions\nprint('Prediction:', decode_predictions(pred_vgg, top=top_guesses))\n```", "```py\n%run -i pretrained_model_inputs.py\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications import vgg16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom tensorflow.keras.preprocessing import image\n\n# Load the VGG16 model pre-trained on the ImageNet dataset\nvgg16_model = vgg16.VGG16(weights='imagenet')\n\n# Ask the user for manual inputs\nimage_path = input(\"Enter image path: \")\ntop_guesses = input(\"Enter number of top guesses: \")\n\n# Load the image, resized according to the model target size\nimg_resized = image.load_img(image_path, target_size=(224, 224))\n\n# Convert the image into an array\nimg = image.img_to_array(img_resized)\n\n# Add in a dimension\nimg = np.expand_dims(img, axis=0) \n\n# Scale the pixel intensity values\nimg = preprocess_input(img) \n\n# Generate a prediction for the test image\npred_vgg = vgg16_model.predict(img)\n\n# Decode and print the top 3 predictions\nprint('Prediction:', decode_predictions(pred_vgg, top=int(top_guesses)))\n```"]