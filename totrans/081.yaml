- en: Logging in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的日志记录
- en: 原文：[https://machinelearningmastery.com/logging-in-python/](https://machinelearningmastery.com/logging-in-python/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/logging-in-python/](https://machinelearningmastery.com/logging-in-python/)
- en: Logging is a way to store information about your script and track events that
    occur. When writing any complex script in Python, logging is essential for debugging
    software as you develop it. Without logging, finding the source of a problem in
    your code may be extremely time consuming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是一种存储有关脚本的信息并跟踪发生事件的方式。在编写任何复杂的Python脚本时，日志记录对于在开发过程中调试软件至关重要。没有日志记录，找到代码中的问题源可能会非常耗时。
- en: 'After completing this tutorial, you will know:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本教程后，你将知道：
- en: Why we would like to use the logging module
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们要使用日志记录模块
- en: How to use the logging module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用日志记录模块
- en: How to customize the logging mechanism
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何自定义日志记录机制
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**用我的新书启动你的项目** [《Python机器学习》](https://machinelearningmastery.com/python-for-machine-learning/)，包括*一步步的教程*和所有示例的*Python源代码*文件。'
- en: Let’s get started.![](../Images/2804cdbcac2294f5b99c95ee34942d0a.png)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！[](../Images/2804cdbcac2294f5b99c95ee34942d0a.png)
- en: Logging in Python
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的日志记录
- en: Photo by [ilaria88](https://www.pexels.com/photo/brown-firewood-122588/). Some
    rights reserved.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[ilaria88](https://www.pexels.com/photo/brown-firewood-122588/)提供。一些权利保留。
- en: '**Tutorial Overview**'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**教程概述**'
- en: 'This tutorial is divided into four parts; they are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为四个部分；它们是：
- en: The benefits of logging
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录的好处
- en: Basic logging
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本日志记录
- en: Advanced configuration to logging
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级日志记录配置
- en: An example of the use of logging
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个使用日志记录的示例
- en: '**Benefits of Logging**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**日志记录的好处**'
- en: 'You may ask: “Why not just use printing?”'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问：“为什么不直接使用打印？”
- en: When you run an algorithm and want to confirm it is doing what you expected,
    it is natural to add some `print()` statements at strategic locations to show
    the program’s state. Printing can help debug simpler scripts, but as your code
    gets more and more complex, printing lacks the flexibility and robustness that
    logging has.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行一个算法并想确认它是否按预期运行时，通常会在关键位置添加一些`print()`语句以显示程序的状态。打印可以帮助调试较简单的脚本，但随着代码变得越来越复杂，打印缺乏日志记录所具有的灵活性和鲁棒性。
- en: With logging, you can pinpoint where a logging call came from, differentiate
    severity between messages, and write information to a file, which printing cannot
    do. For example, we can turn on and off the message from a particular module of
    a larger program. We can also increase or decrease the verbosity of the logging
    messages without changing a lot of code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用日志记录，你可以精确地找出日志调用的来源，区分消息的严重级别，并将信息写入文件，这是打印无法做到的。例如，我们可以打开或关闭来自大型程序中特定模块的消息。我们还可以增加或减少日志消息的详细程度，而无需修改大量代码。
- en: '**Basic Logging**'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**基本日志记录**'
- en: Python has a built-in library, `logging,` for this purpose. It is simple to
    create a “logger” to log messages or information that you would like to see.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一个内置库`logging`，用于此目的。创建一个“记录器”以记录你希望看到的消息或信息非常简单。
- en: The logging system in Python operates under a hierarchical namespace and different
    levels of severity. The Python script can create a logger under a namespace, and
    every time a message is logged, the script must specify its severity. The logged
    message can go to different places depending on the handler we set up for the
    namespace. The most common handler is to simply print on the screen, like the
    ubiquitous `print()` function. When we start the program, we may register a new
    handler and set up the level of severity to which the handler will react.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的日志系统在一个层级命名空间和不同的严重级别下运行。Python脚本可以在命名空间下创建一个记录器，每次记录消息时，脚本必须指定其严重级别。记录的消息可以根据我们为命名空间设置的处理程序发送到不同的位置。最常见的处理程序是简单地在屏幕上打印，比如无处不在的`print()`函数。当我们启动程序时，可以注册一个新处理程序，并设置该处理程序将响应的严重级别。
- en: 'There are 5 different logging levels that indicate the severity of the logs,
    shown in increasing severity:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有5种不同的日志记录级别，表示日志的严重程度，按严重程度递增排列：
- en: DEBUG
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DEBUG
- en: INFO
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: INFO
- en: WARNING
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WARNING
- en: ERROR
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ERROR
- en: CRITICAL
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRITICAL
- en: 'A very simple example of logging is shown below, using the default logger or
    the root logger:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个非常简单的日志记录示例，使用默认记录器或根记录器：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These will emit log messages of different severity. While there are five lines
    of logging, you may see only three lines of output if you run this script, as
    follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将发出不同严重性的日志消息。虽然有五行日志记录，如果你运行这个脚本，你可能只会看到三行输出，如下所示：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is because the root logger, by default, only prints the log messages of
    a severity level of WARNING or above. However, using the root logger this way
    is not much different from using the print() function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为根日志记录器默认只打印警告级别或以上的日志消息。然而，以这种方式使用根日志记录器与使用print()函数没有太大区别。
- en: 'The settings for the root logger are not set in stone. We can configure the
    root logger to output to a particular file, change its default severity level,
    and format the output. Here’s an example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 根日志记录器的设置不是一成不变的。我们可以将根日志记录器配置为输出到特定的文件，更改其默认的严重性级别，并格式化输出。以下是一个示例：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running this script will produce no output to the screen but will have the
    following in the newly created file `file.log`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个脚本不会在屏幕上产生输出，但会在新创建的文件`file.log`中产生以下内容：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The call to `logging.basicConfig()` is to alter the root logger. In our example,
    we set the handler to output to a file instead of the screen, adjust the logging
    level such that all log messages of level DEBUG or above are handled, and also
    change the format of the log message output to include the time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对`logging.basicConfig()`的调用是为了更改根日志记录器。在我们的示例中，我们将处理程序设置为输出到文件而不是屏幕，调整日志级别，以便处理所有级别为DEBUG或以上的日志消息，并且还更改日志消息输出的格式以包含时间。
- en: Note that now all five messages were output, so the default level that the root
    logger logs is now “DEBUG.” The log record attributes (such as `%(asctime)s`)
    that can be used to format the output can be found [in the logging documentation](https://docs.python.org/3/library/logging.html#logrecord-attributes).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，现在所有五条消息都已输出，因此根日志记录器现在的默认级别为“DEBUG”。可以用来格式化输出的日志记录属性（例如`%(asctime)s`）可以在[日志记录文档](https://docs.python.org/3/library/logging.html#logrecord-attributes)中找到。
- en: 'Although there is a default logger, we usually want to make and use other loggers
    that can be configured separately. This is because we may want a different severity
    level or format for different loggers. A new logger can be created with:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有一个默认日志记录器，但我们通常希望创建和使用其他可以单独配置的日志记录器。这是因为我们可能希望不同的日志记录器有不同的严重性级别或格式。可以使用以下代码创建新的日志记录器：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Internally, the loggers are organized in a hierarchy. A logger created with:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 内部日志记录器是以层级方式组织的。使用以下代码创建的日志记录器：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: will be a child logger created under the logger with the name “`parent`,” which,
    in turn, is under the root logger. Using a dot in the string signifies that the
    child logger is a child of the parent logger. In the above case, a logger with
    the name “`parent.child`” is created as well as one with the name `"parent"` implicitly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将会是一个在名为“`parent`”的日志记录器下创建的子日志记录器，而“`parent`”又在根日志记录器下。字符串中的点表示子日志记录器是父日志记录器的子日志记录器。在上面的情况下，将创建一个名为“`parent.child`”的日志记录器，以及一个名为“parent”的日志记录器（隐式创建）。
- en: 'Upon creation, a child logger has all the properties of its parent logger until
    reconfigured. We can demonstrate this with the following example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建时，子日志记录器具有其父日志记录器的所有属性，直到重新配置。我们可以通过以下示例来演示这一点：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This code snippet will output only one line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码只会输出一行：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: which is created by the StreamHandler object with the customized format string.
    It happens only after we reconfigured the logger for `parent` because otherwise,
    the root logger’s configuration prevails, and no messages at level INFO will be
    printed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由StreamHandler对象创建的，具有自定义格式字符串。这仅在我们重新配置`parent`的日志记录器后发生，否则根日志记录器的配置会占主导地位，并且不会打印级别为INFO的消息。
- en: '**Advanced Configuration to Logging**'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**高级日志记录配置**'
- en: As we saw in the last example, we can configure the loggers we made.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一个示例中看到的，我们可以配置我们创建的日志记录器。
- en: Threshold of Level
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 级别阈值
- en: 'Like the basic configuration of the root logger, we can also configure the
    output destination, severity level, and formatting of a logger. The following
    is how we can set the **threshold** of the level of a logger to INFO:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与根日志记录器的基本配置一样，我们也可以配置日志记录器的输出目标、严重性级别和格式。以下是如何将日志记录器的**阈值**级别设置为INFO：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now commands with severity level INFO and higher will be logged by the parent_logger.
    But if this is all you did, you will not see anything from `parent_logger.info("messages")`
    because there are no **handlers** assigned for this logger. In fact, there are
    no handlers for root logger as well unless you set up one with `logging.basicConfig()`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，严重性级别为INFO及以上的命令将由parent_logger记录。但如果你仅做了这些，你将不会看到来自`parent_logger.info("messages")`的任何信息，因为没有为这个logger分配**处理器**。实际上，根logger也没有处理器，除非你通过`logging.basicConfig()`设置了一个。
- en: Log Handlers
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志处理器
- en: We can configure the output destination of our logger with handlers. Handlers
    are responsible for sending the log messages to the correct destination. There
    are several types of handlers; the most common ones are `StreamHandler` and `FileHandler`.
    With `StreamHandler`, the logger will output to the terminal, while with `FileHandler`,
    the logger will output to a particular file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过处理器配置logger的输出目的地。处理器负责将日志消息发送到正确的目的地。有几种类型的处理器；最常见的是`StreamHandler`和`FileHandler`。使用`StreamHandler`时，logger会输出到终端，而使用`FileHandler`时，logger会输出到特定的文件。
- en: 'Here’s an example of using `StreamHandler` to output logs to the terminal:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用`StreamHandler`将日志输出到终端的示例：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the code above, there are two handlers created: A `FileHandler` created
    by `logging.basicConfig()` for the root logger and a `StreamHandler` created for
    the `parent` logger.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，创建了两个处理器：一个由`logging.basicConfig()`为根logger创建的`FileHandler`，和一个为`parent`
    logger创建的`StreamHandler`。
- en: 'Note that even though there is a `StreamHandler` that sends the logs to the
    terminal, logs from the `parent` logger are still being sent to `file.log` since
    it is a child of the root logger, and the root logger’s handler is also active
    for the child’s log messages. We can see that the logs to the terminal include
    INFO level messages and above:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使存在一个将日志发送到终端的`StreamHandler`，来自`parent` logger的日志仍然被发送到`file.log`，因为它是根logger的子logger，根logger的处理器也对子logger的日志消息有效。我们可以看到，发送到终端的日志包括INFO级别及以上的消息：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'But the output to the terminal is not formatted, as we have not used a `Formatter`
    yet. The log to `file.log`, however, has a `Formatter` set up, and it will be
    like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是终端的输出没有格式化，因为我们还没有使用`Formatter`。然而，`file.log`的日志已经设置了`Formatter`，它将像下面这样：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Alternatively, we can use `FileHandler` in the above example of `parent_logger`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以在上述`parent_logger`的示例中使用`FileHandler`：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The example above demonstrated that you can also set the level of a handler.
    The level of `parent_fhandler` filters out logs that are not WARNING level or
    higher. However, if you set the handler’s level to DEBUG, that would be the same
    as not setting the level because DEBUG logs would already be filtered out by the
    logger’s level, which is INFO.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子演示了你还可以设置处理器的级别。`parent_fhandler`的级别会过滤掉非WARNING级别或更高级别的日志。然而，如果你将处理器的级别设置为DEBUG，那将等同于未设置级别，因为DEBUG日志会被logger的级别（即INFO）过滤掉。
- en: 'In this case, the output to `parent.log` is:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，输出到`parent.log`的是：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: while that of `file.log` is the same as before. In summary, when a log message
    is recorded by a logger,
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 而`file.log`的输出与之前相同。总之，当logger记录一个日志消息时，
- en: The logger’s level will determine if the message is severe enough to be handled.
    If the logger’s level is not set, the level of its parent (and ultimately the
    root logger) will be used for this consideration.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: logger的级别将决定消息是否足够严重以被处理。如果logger的级别未设置，则将使用其父级别（最终是根logger）进行考虑。
- en: If the log message will be handled, **all** handlers ever added along the logger
    hierarchy up to the root logger will receive a copy of the message. Each handler’s
    level will determine if this particular handler should honor this message.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果日志消息会被处理，**所有**在logger层次结构中添加过的处理器都会收到该消息的副本。每个处理器的级别将决定这个特定的处理器是否应该处理这个消息。
- en: '**Formatters**'
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**格式化器**'
- en: 'To configure the format of the logger, we use a `Formatter`. It allows us to
    set the format of the log, similarly to how we did so in the root logger’s `basicConfig()`.
    This is how we can add a formatter to our handler:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置logger的格式，我们使用`Formatter`。它允许我们设置日志的格式，类似于我们在根logger的`basicConfig()`中所做的。这是我们如何将formatter添加到处理器中的：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First, we create a formatter, then set our handler to use that formatter. If
    we wanted to, we could make several different loggers, handlers, and formatters
    so that we could mix and match based on our preferences.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个formatter，然后设置我们的处理器使用那个formatter。如果我们愿意，我们可以创建多个不同的loggers、handlers和formatters，以便根据我们的喜好进行组合。
- en: 'In this example, the `parent.log` will have:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`parent.log`将会有：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'and the `file.log` associated with the handler at root logger will have:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与根记录器相关联的`file.log`将会有：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Below is the visualization of the flow of loggers, handlers, and formatters
    from [the documentation of the logging module:](https://docs.python.org/3/howto/logging.html#logging-flow)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是[日志模块文档](https://docs.python.org/3/howto/logging.html#logging-flow)中日志记录器、处理程序和格式化程序的流程可视化：
- en: '![](../Images/c3bba5e9d7619938a0c95ee9eac93ea5.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3bba5e9d7619938a0c95ee9eac93ea5.png)'
- en: Flow chart of loggers and handlers in the logging module
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 日志模块中记录器和处理程序的流程图
- en: An Example of the Use of Logging
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用日志记录的示例
- en: 'Let’s consider the [Nadam algorithm](https://machinelearningmastery.com/gradient-descent-optimization-with-nadam-from-scratch/)
    as an example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以[Nadam算法](https://machinelearningmastery.com/gradient-descent-optimization-with-nadam-from-scratch/)为例：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The simplest use case is to use logging to replace the `print()` function.
    We can make the following change: First, create a logger with the name `nadam`
    before we run any code and assign a `StreamHandler`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的用例是使用日志记录替换`print()`函数。我们可以进行如下更改：首先，在运行任何代码之前创建一个名为`nadam`的记录器，并分配一个`StreamHandler`：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We must assign a handler because we never configured the root logger, and this
    would be the only handler ever created. Then, in the function `nadam()`, we re-create
    a logger `nadam,` but since it has already been set up, the level and handlers
    persisted. At the end of each outer for-loop in `nadam()`, we replaced the `print()`
    function with `logger.info()` so the message will be handled by the logging system:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须分配一个处理程序，因为我们从未配置根记录器，这将是唯一创建的处理程序。然后，在函数`nadam()`中，我们重新创建了一个记录器`nadam`，但由于它已经被设置过，级别和处理程序得以保留。在`nadam()`的每个外层for循环结束时，我们用`logger.info()`替换了`print()`函数，这样消息将由日志系统处理：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we are interested in the deeper mechanics of the Nadam algorithm, we may
    add more logs. The following is the complete code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对Nadam算法的更深层次机制感兴趣，我们可以添加更多日志。以下是完整的代码：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We prepared two level of loggers, `nadam` and `nadam.iter`, and set them in
    different levels. In the inner loop of `nadam()`, we use the child logger to print
    some internal variables. When you run this script, it will print the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备了两个级别的记录器，`nadam`和`nadam.iter`，并将它们设置在不同的级别。在`nadam()`的内层循环中，我们使用子记录器来打印一些内部变量。当你运行这个脚本时，它将打印如下内容：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Setting different loggers not only allows us to set a different level or handlers,
    but it also lets us differentiate where the log message comes from by looking
    at the logger’s name from the message printed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 设置不同的日志记录器不仅允许我们设置不同的级别或处理程序，还可以通过查看打印消息中的记录器名称来区分日志消息的来源。
- en: 'In fact, one handy trick is to create a logging decorator and apply the decorator
    to some functions. We can keep track of every time that function is called. For
    example, we created a decorator below and applied it to the functions `objective()`
    and `derivative()`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，一个方便的技巧是创建一个日志装饰器，并将其应用于一些函数。我们可以跟踪每次调用该函数的情况。例如，我们下面创建了一个装饰器，并将其应用于`objective()`和`derivative()`函数：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then we will see the following in the log:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将看到日志中出现如下内容：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: where we can see the parameters and return values of each call to those two
    functions in the message logged by the `nadam.function` logger.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志消息中，我们可以看到每次调用这两个函数的参数和返回值，这些信息由`nadam.function`记录器记录。
- en: Want to Get Started With Python for Machine Learning?
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想要开始使用Python进行机器学习吗？
- en: Take my free 7-day email crash course now (with sample code).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 立即参加我的免费7天电子邮件速成课程（附有示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注册并获得课程的免费PDF电子书版本。
- en: 'As we get more and more log messages, the terminal screen will become very
    busy. One way to make it easier to watch for issues is to highlight the logs in
    color with the `colorama` module. You need to have the module installed first:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 随着日志信息越来越多，终端屏幕将变得非常繁忙。为了更容易地监视问题，可以使用`colorama`模块来高亮显示日志。你需要首先安装这个模块：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here’s an example of how you can use the `colorama` module with the `logging`
    module to change your log colors and text brightness:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个如何使用`colorama`模块与`logging`模块结合，以改变日志颜色和文本亮度的示例：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: From the terminal, you would see the following:![](../Images/9f26ce61f0915bbf238b4282945e7703.png)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端中，你将看到如下内容：![](../Images/9f26ce61f0915bbf238b4282945e7703.png)
- en: where the `Fore`, `Back`, and `Style` from the `colorama` module control the
    foreground, background, and brightness style of the text printed. This is leveraging
    the ANSI escape characters and works only on ANSI-supported terminals. Hence this
    is not suitable for logging to a text file.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`colorama`模块中的`Fore`、`Back`和`Style`控制文本的前景、背景和亮度样式。这利用了 ANSI 转义字符，仅在支持 ANSI
    的终端上有效。因此，这不适用于日志记录到文本文件。
- en: 'In fact, we may derive the `Formatter` class with:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以通过以下方式派生`Formatter`类：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'and use this instead of `logging.Formatter`. The following is how we can further
    modify the Nadam example to add color:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用它来替代`logging.Formatter`。以下是我们如何进一步修改 Nadam 示例以添加颜色：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If we run it on a supporting terminal, we will see the following output:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在支持的终端上运行它，我们将看到以下输出：
- en: '![](../Images/71e97ab6847210d213d24abea52e7240.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71e97ab6847210d213d24abea52e7240.png)'
- en: Note that the colorful output can help us spot any abnormal behavior easier.
    Logging helps with debugging and also allows us to easily control how much detail
    we want to see by changing only a few lines of code.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，多彩的输出可以帮助我们更容易地发现任何异常行为。日志记录有助于调试，并且允许我们通过仅更改几行代码轻松控制我们想要查看的详细程度。
- en: Further Reading
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This section provides more resources on the topic if you are looking to go deeper.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了更多关于该主题的资源，如果你想深入了解。
- en: APIs
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API
- en: '[logging module](https://docs.python.org/3/library/logging.html) from Python
    standard library'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[日志模块](https://docs.python.org/3/library/logging.html)来自 Python 标准库'
- en: '[Colorama](https://github.com/tartley/colorama)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Colorama](https://github.com/tartley/colorama)'
- en: Articles
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文章
- en: '[Python logging HOWTO](http://,https://docs.python.org/3/howto/logging.html)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 日志记录 HOWTO](http://,https://docs.python.org/3/howto/logging.html)'
- en: '**Summary**'
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this tutorial, you learned how to implement logging techniques in your scripts.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你学习了如何在脚本中实现日志记录技术。
- en: 'Specifically, you learned:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，你学到了：
- en: Basic and advanced logging techniques
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本和高级日志记录技术
- en: How to apply logging to a script and the benefits of doing so
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将日志记录应用于脚本以及这样做的好处
