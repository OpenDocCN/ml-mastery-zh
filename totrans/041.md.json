["```py\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the dataset\nAmes = pd.read_csv('Ames.csv')\n\n# Simple querying: Select houses priced above $600,000\nhigh_value_houses = Ames.query('SalePrice > 600000')\nprint(high_value_houses)\n```", "```py\n            PID  GrLivArea  ...   Latitude  Longitude\n65    528164060       2470  ...  42.058475 -93.656810\n584   528150070       2364  ...  42.060462 -93.655516\n1007  528351010       4316  ...  42.051982 -93.657450\n1325  528320060       3627  ...  42.053228 -93.657649\n1639  528110020       2674  ...  42.063049 -93.655918\n\n[5 rows x 85 columns]\n```", "```py\n# Advanced querying: Select houses with more than 3 bedrooms and priced below $300,000\nspecific_houses = Ames.query('BedroomAbvGr > 3 & SalePrice < 300000')\nprint(specific_houses)\n```", "```py\n            PID  GrLivArea  ...   Latitude  Longitude\n5     908128060       1922  ...  42.018988 -93.671572\n23    902326030       2640  ...  42.029358 -93.612289\n33    903400180       1848  ...  42.029544 -93.627377\n38    527327050       2030  ...  42.054506 -93.631560\n40    528326110       2172  ...  42.055785 -93.651102\n...         ...        ...  ...        ...        ...\n2539  905101310       1768  ...  42.033393 -93.671295\n2557  905107250       1440  ...  42.031349 -93.673578\n2562  535101110       1584  ...  42.048256 -93.619860\n2575  905402060       1733  ...  42.027669 -93.666138\n2576  909275030       2002  ...        NaN        NaN\n\n[352 rows x 85 columns]\n```", "```py\n# Visualizing the advanced query results\nplt.figure(figsize=(10, 6))\nsns.scatterplot(x='GrLivArea', y='SalePrice', hue='BedroomAbvGr', data=specific_houses, palette='viridis')\nplt.title('Sales Price vs. Ground Living Area')\nplt.xlabel('Ground Living Area (sqft)')\nplt.ylabel('Sales Price ($)')\nplt.legend(title='Bedrooms Above Ground')\nplt.show()\n```", "```py\n# Advanced querying: Select houses with more than 3 bedrooms and priced below $300,000\nspecific_houses = Ames.query('BedroomAbvGr > 3 & SalePrice < 300000')\n\n# Group by neighborhood, then calculate the average and total sale price, and count the houses\ngrouped_data = specific_houses.groupby('Neighborhood').agg({\n    'SalePrice': ['mean', 'count']\n})\n\n# Renaming the columns for clarity\ngrouped_data.columns = ['Average Sales Price', 'House Count']\n\n# Round the average sale price to 2 decimal places\ngrouped_data['Averages Sales Price'] = grouped_data['Average Sales Price'].round(2)\n\nprint(grouped_data)\n```", "```py\n             Average Sales Price  House Count\nNeighborhood                                 \nBrDale                 113700.00            1\nBrkSide                154840.00           10\nClearCr                206756.31           13\nCollgCr                233504.17           12\nCrawfor                199946.68           19\nEdwards                142372.41           29\nGilbert                222554.74           19\nIDOTRR                 146953.85           13\nMeadowV                135966.67            3\nMitchel                152030.77           13\nNAmes                  158835.59           59\nNPkVill                143000.00            1\nNWAmes                 203846.28           39\nNoRidge                272222.22           18\nNridgHt                275000.00            3\nOldTown                142586.72           43\nSWISU                  147493.33           15\nSawyer                 148375.00           16\nSawyerW                217952.06           16\nSomerst                247333.33            3\nStoneBr                270000.00            1\nTimber                 247652.17            6\n```", "```py\n# Ensure 'Neighborhood' is a column (reset index if it was the index)\ngrouped_data_reset = grouped_data.reset_index().sort_values(by='Average Sales Price')\n\n# Set the aesthetic style of the plots\nsns.set_theme(style=\"whitegrid\")\n\n# Create the bar plot\nplt.figure(figsize=(12, 8))\nbarplot = sns.barplot(\n    x='Neighborhood',\n    y='Average Sales Price',\n    data=grouped_data_reset,\n    palette=\"coolwarm\",\n    hue='Neighborhood',\n    legend=False,\n    errorbar=None  # Removes the confidence interval bars\n)\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Annotate each bar with the house count, using enumerate to access the index for positioning\nfor index, value in enumerate(grouped_data_reset['Average Sales Price']):\n    house_count = grouped_data_reset.loc[index, 'House Count']\n    plt.text(index, value, f'{house_count}', ha='center', va='bottom')\n\nplt.title('Average Sales Price by Neighborhood', fontsize=18)\nplt.xlabel('Neighborhood')\nplt.ylabel('Average Sales Price ($)')\n\nplt.tight_layout()  # Adjust the layout\nplt.show()\n```", "```py\n# Assuming 'high_value_neighborhoods' is a list of neighborhoods with higher average sale prices\nhigh_value_neighborhoods = ['NridgHt', 'NoRidge', 'StoneBr']\n\n# Use df.loc[] to select houses based on your conditions and only in high-value neighborhoods\nhigh_value_houses_specific = Ames.loc[(Ames['BedroomAbvGr'] > 3) &\n                                      (Ames['SalePrice'] < 300000) &\n                                      (Ames['Neighborhood'].isin(high_value_neighborhoods)),\n                                      ['Neighborhood', 'SalePrice', 'GrLivArea']]\n\nprint(high_value_houses_specific.head())\n```", "```py\n    Neighborhood  SalePrice  GrLivArea\n40       NoRidge     291000       2172\n162      NoRidge     285000       2225\n460      NridgHt     250000       2088\n468      NoRidge     268000       2295\n490      NoRidge     260000       2417\n```", "```py\n# Filter for houses not in the 'high_value_neighborhoods', \n# with at least 3 bedrooms above grade, and priced below $300,000\nlow_value_spacious_houses = Ames.loc[(~Ames['Neighborhood'].isin(high_value_neighborhoods)) & \n                                     (Ames['BedroomAbvGr'] >= 3) & \n                                     (Ames['SalePrice'] < 300000)]\n\n# Sort these houses by 'SalePrice' to highlight the lower end explicitly\nlow_value_spacious_houses_sorted = low_value_spacious_houses.sort_values(by='SalePrice').reset_index(drop=True)\n\n# Using df.iloc to select and print the first 5 observations of such low-value houses\nlow_value_spacious_first_5 = low_value_spacious_houses_sorted.iloc[:5, :]\n\n# Print only relevant columns to match the earlier high-value example: 'Neighborhood', 'SalePrice', 'GrLivArea'\nprint(low_value_spacious_first_5[['Neighborhood', 'SalePrice', 'GrLivArea']])\n```", "```py\n  Neighborhood  SalePrice  GrLivArea\n0       IDOTRR      40000       1317\n1       IDOTRR      50000       1484\n2       IDOTRR      55000       1092\n3       Sawyer      62383        864\n4      Edwards      63000       1112\n```", "```py\n# Import an additional library\nimport numpy as np\n\n# Filter for houses priced below $300,000 and with at least 1 bedroom above grade\naffordable_houses = Ames.query('SalePrice < 300000 & BedroomAbvGr > 0')\n\n# Create a pivot table to analyze average sale price by neighborhood and number of bedrooms\npivot_table = affordable_houses.pivot_table(values='SalePrice',\n                                            index='Neighborhood',\n                                            columns='BedroomAbvGr',\n                                            aggfunc='mean').round(2)\n\n# Fill missing values with 0 for better readability and to indicate no data for that segment\npivot_table = pivot_table.fillna(0)\n\n# Adjust pandas display options to ensure all columns are shown\npd.set_option('display.max_columns', None)\n\nprint(pivot_table)\n```", "```py\nBedroomAbvGr          1          2          3          4          5          6\nNeighborhood                                                                  \nBlmngtn       178450.00  197931.19       0.00       0.00       0.00       0.00\nBlueste       192500.00  128557.14  151000.00       0.00       0.00       0.00\nBrDale             0.00   99700.00  111946.43  113700.00       0.00       0.00\nBrkSide        77583.33  108007.89  140058.67  148211.11  214500.00       0.00\nClearCr       212250.00  220237.50  190136.36  209883.20  196333.33       0.00\nCollgCr       154890.00  181650.00  196650.98  233504.17       0.00       0.00\nCrawfor       289000.00  166345.00  193433.75  198763.94  210000.00       0.00\nEdwards        59500.00  117286.27  134660.65  137332.00  191866.67  119900.00\nGilbert            0.00  172000.00  182178.30  223585.56  204000.00       0.00\nGreens        193531.25       0.00       0.00       0.00       0.00       0.00\nGrnHill            0.00  230000.00       0.00       0.00       0.00       0.00\nIDOTRR         67378.00   93503.57  111681.13  144081.82  162750.00       0.00\nLandmrk            0.00       0.00  137000.00       0.00       0.00       0.00\nMeadowV        82128.57  105500.00   94382.00  128250.00  151400.00       0.00\nMitchel       176750.00  150366.67  168759.09  149581.82  165500.00       0.00\nNAmes         139500.00  133098.93  146260.96  159065.22  180360.00  144062.50\nNPkVill            0.00  134555.00  146163.64  143000.00       0.00       0.00\nNWAmes             0.00  177765.00  183317.12  201165.00  253450.00       0.00\nNoRidge            0.00  262000.00  259436.67  272222.22       0.00       0.00\nNridgHt       211700.00  215458.55  264852.71  275000.00       0.00       0.00\nOldTown        83333.33  105564.32  136843.57  136350.91  167050.00   97500.00\nSWISU          60000.00  121044.44  132257.88  143444.44  158500.00  148633.33\nSawyer        185000.00  124694.23  138583.77  148884.62       0.00  146166.67\nSawyerW       216000.00  156147.41  185192.14  211315.00       0.00  237863.25\nSomerst       205216.67  191070.18  225570.39  247333.33       0.00       0.00\nStoneBr       223966.67  211468.75  233750.00  270000.00       0.00       0.00\nTimber             0.00  217263.64  200536.04  241202.60  279900.00       0.00\nVeenker       247566.67  245150.00  214090.91       0.00       0.00       0.00\n```", "```py\n# Import an additional library\nimport matplotlib.colors\n\n# Create a custom color map\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", [\"red\", \"yellow\", \"green\"])\n\n# Mask for \"zero\" values to be colored with a different shade\nmask = pivot_table == 0\n\n# Set the size of the plot\nplt.figure(figsize=(14, 10))\n\n# Create a heatmap with the mask\nsns.heatmap(pivot_table,\n            cmap=cmap,\n            annot=True,\n            fmt=\".0f\",\n            linewidths=.5,\n            mask=mask,\n            cbar_kws={'label': 'Average Sales Price ($)'})\n\n# Adding title and labels for clarity\nplt.title('Average Sales Price by Neighborhood and Number of Bedrooms', fontsize=16)\nplt.xlabel('Number of Bedrooms Above Grade', fontsize=12)\nplt.ylabel('Neighborhood', fontsize=12)\n\n# Display the heatmap\nplt.show()\n```"]