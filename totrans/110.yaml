- en: Functional Programming in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的函数式编程
- en: 原文：[https://machinelearningmastery.com/functional-programming-in-python/](https://machinelearningmastery.com/functional-programming-in-python/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/functional-programming-in-python/](https://machinelearningmastery.com/functional-programming-in-python/)
- en: Python is a fantastic programming language. It is likely to be your first choice
    for developing a machine learning or data science application. Python is interesting
    because it is a multi-paradigm programming language that can be used for both
    object-oriented and imperative programming. It has a simple syntax that is easy
    to read and comprehend.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一个出色的编程语言。它可能是你开发机器学习或数据科学应用程序的首选。Python有趣的地方在于，它是一种多范式编程语言，可以用于面向对象编程和命令式编程。它具有简单的语法，易于阅读和理解。
- en: In computer science and mathematics, the solution of many problems can be more
    easily and naturally expressed using the functional programming style. In this
    tutorial, we’ll discuss Python’s support for the functional programming paradigm
    and Python’s classes and modules that help you program in this style.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学和数学中，许多问题的解决方案可以通过函数式编程风格更容易和自然地表达。在本教程中，我们将讨论Python对函数式编程范式的支持以及帮助你以这种风格编程的Python类和模块。
- en: 'After completing this tutorial, you will know:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本教程后，你将了解：
- en: Basic idea of functional programming
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式编程的基本概念
- en: The `itertools` library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`itertools`库'
- en: The `functools` library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`functools`库'
- en: Map-reduce design pattern and its possible implementation in Python
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Map-reduce设计模式及其在Python中的可能实现
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过我的新书** [《Python与机器学习》](https://machinelearningmastery.com/python-for-machine-learning/)，**启动你的项目**，包括*逐步教程*和所有示例的*Python源代码*文件。'
- en: Let’s get started.[![](../Images/4e0953a4ac293d16bfdd79a9bb854405.png)](https://machinelearningmastery.com/wp-content/uploads/2021/12/abdullahShakoortree-gdd40e365b_1920.jpg)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。[![](../Images/4e0953a4ac293d16bfdd79a9bb854405.png)](https://machinelearningmastery.com/wp-content/uploads/2021/12/abdullahShakoortree-gdd40e365b_1920.jpg)
- en: Functional Programming In Python
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的函数式编程
- en: Photo by Abdullah_Shakoor, some rights reserved
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由Abdullah_Shakoor提供，部分版权保留
- en: Tutorial Overview
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程概述
- en: 'This tutorial is divided into five parts; they are:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为五个部分；它们是：
- en: The idea of functional programming
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数式编程的思想
- en: 'High order functions: Filter, map, and reduce'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高阶函数：过滤、映射和归约
- en: Itertools
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Itertools
- en: Functools
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Functools
- en: Map-reduce pattern
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Map-reduce模式
- en: The idea of functional programming
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数式编程的思想
- en: If you have programming experience, you likely learned imperative programming.
    It is built with statements and manipulating variables. Functional programming
    is a **declarative** paradigm. It is different from the imperative paradigm that
    programs are built in by applying and composing functions. The functions here
    are supposed to be closer to the definition of a mathematical function, in which
    there are **no side effects** or simply no access to external variables. When
    you call them with the same argument, they always give you the same result.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有编程经验，你很可能学习了命令式编程。它由语句和变量操作构成。函数式编程是一种**声明式**范式。它不同于命令式范式，程序通过应用和组合函数来构建。这里的函数应更接近数学函数的定义，其中**没有副作用**，即没有对外部变量的访问。当你用相同的参数调用它们时，它们总是给出相同的结果。
- en: The benefit of functional programming is to make your program less error-prone.
    Without the side effects, it is more predictable and easier to see the outcome.
    We also do not need to worry about one part of the program interfering with another
    part.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程的好处是使你的程序更少出错。没有副作用，它更可预测且更容易查看结果。我们也不需要担心程序的某个部分会干扰到另一个部分。
- en: 'Many libraries adopted a functional programming paradigm. For example, the
    following using pandas and pandas-datareader:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 许多库采用了函数式编程范式。例如，以下使用pandas和pandas-datareader：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This gives you the following output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你以下输出：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The pandas-datareader is a useful library that helps you download data from
    the Internet in real time. The above example is to download population data from
    the World Bank. The result is a pandas dataframe with countries and years as an
    index and a single column named “SP.POP.TOTL” for the population. Then we manipulate
    the dataframe step by step, and at the end, we find the average population of
    all countries across the years.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: pandas-datareader是一个有用的库，帮助您实时从互联网下载数据。上述示例是从世界银行下载人口数据。结果是一个带有国家和年份作为索引的pandas
    dataframe，并且一个名为“SP.POP.TOTL”的列表示人口数量。然后我们逐步操作数据帧，并最终找出所有国家在多年间的平均人口数量。
- en: 'We can write in this way because, in pandas, most functions on the dataframe
    are not changing the dataframe but producing a new dataframe to reflect the result
    of the function. We call this behavior **immutable** because the input dataframe
    never changed. The consequence is that we can chain up the functions to manipulate
    the dataframe step by step. If we have to break it using the style of imperative
    programming, the above program is the same as the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样写是因为，在pandas中，大多数对数据帧的函数不会改变数据帧本身，而是生成一个新的数据帧以反映函数的结果。我们称这种行为为**不可变**，因为输入数据帧从未改变。其结果是我们可以逐步链式调用函数来操作数据帧。如果我们必须使用命令式编程的风格来打破它，上面的程序等同于以下内容：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'High order functions: Filter, map, and reduce'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高阶函数：过滤（Filter）、映射（Map）和减少（Reduce）
- en: 'Python is not a strictly functional programming language. But it is trivial
    to write Python in a functional style. There are three basic functions on iterables
    that allow us to write a powerful program in a very trivial way: filter, map,
    and reduce.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Python不是严格的函数式编程语言。但以函数式风格编写Python非常简单。有三个基本的迭代函数允许我们以非常简单的方式编写一个功能强大的程序：filter、map和reduce。
- en: 'Filter is to select some of the elements in an iterable, such as a list. Map
    is to transform elements one by one. Finally, reducing is converting the entire
    iterable into a different form, such as the sum of all elements or concatenating
    substrings in a list into a longer string. To illustrate their use, let’s consider
    a simple task: Given a log file from the Apache web server, find the IP address
    that sent the most requests with error code 404\. If you have no idea what a log
    file from an Apache web server looks like, the following is an example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤（Filter）是从可迭代对象中选择一些元素，比如一个列表。映射（Map）是逐个转换元素。最后，减少（Reducing）是将整个可迭代对象转换为不同的形式，比如所有元素的总和或将列表中的子字符串连接成更长的字符串。为了说明它们的使用，让我们考虑一个简单的任务：给定来自Apache
    Web服务器的日志文件，找到发送了最多404错误请求的IP地址。如果你不知道Apache Web服务器的日志文件是什么样的，以下是一个例子：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The above is from a bigger file located [here](https://raw.githubusercontent.com/elastic/examples/master/Common%20Data%20Formats/apache_logs/apache_logs).
    These are a few lines from the log. Each line begins with the IP address of the
    client (i.e., the browser), and the code after “HTTP/1.1” is the response status
    code. Typically, it is 200 if the request is fulfilled. But if the browser requested
    something that does not exist on the server, the code would be 404\. To find the
    IP address that corresponds to the most 404 requests, we can simply scan the log
    file line by line, find those with 404, and count the IP addresses to identify
    the one with the most occurrences.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容来自一个更大的文件，位于[这里](https://raw.githubusercontent.com/elastic/examples/master/Common%20Data%20Formats/apache_logs/apache_logs)。这些是日志中的几行内容。每行以客户端（即浏览器）的IP地址开头，“HTTP/1.1”后面的代码是响应状态码。通常情况下，如果请求被满足，则状态码为200。但如果浏览器请求了服务器上不存在的内容，则代码将为404。要找到对应于最多404请求的IP地址，我们可以简单地逐行扫描日志文件，找到其中的404请求，计算IP地址以识别出现最多次数的那一个。
- en: 'In Python code, we can do the following. First, we see how we can read the
    log file and extract the IP address and status code from a line:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python代码中，我们可以这样做。首先，我们看看如何读取日志文件并从一行中提取IP地址和状态码：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'then we can use a couple map() and filter() and some other functions to find
    the IP address:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用一些map()和filter()以及其他一些函数来查找IP地址：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we did not use the reduce() function because we have some specialized
    reduce operations built in, such as `max()`. But indeed, we can make a simpler
    program with list comprehension notation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们没有使用reduce()函数，因为我们有一些专门的reduce操作内置，比如`max()`。但事实上，我们可以使用列表推导符号来编写一个更简单的程序：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'or even write it in a single statement (but less readable):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至可以将它写成一个单一语句（但可读性较差）：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Want to Get Started With Python for Machine Learning?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想要开始使用Python进行机器学习吗？
- en: Take my free 7-day email crash course now (with sample code).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就参加我的免费7天电子邮件速成课程（包含示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注册并免费获得课程的PDF电子书版本。
- en: Itertools in Python
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的迭代工具
- en: 'The above example on filter, map, and reduce illustrates the ubiquity of **iterables**
    in Python. This includes lists, tuples, dictionaries, sets, and even generators,
    all of which can be **iterated** using a for-loop. In Python, we have a module
    named `itertools` that brings in more functions to manipulate (but not mutate)
    iterables. From [Python’s official documentation](https://docs.python.org/3/library/itertools.html):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述关于过滤器、映射器和归约器的示例说明了**迭代对象**在Python中的普遍性。这包括列表、元组、字典、集合，甚至生成器，所有这些都可以使用for循环进行**迭代**。在Python中，我们有一个名为`itertools`的模块，它提供了更多的函数来操作（但不改变）迭代对象。来自[Python官方文档](https://docs.python.org/3/library/itertools.html)：
- en: The module standardizes a core set of fast, memory-efficient tools that are
    useful by themselves or in combination. Together, they form an “iterator algebra,”
    making it possible to construct specialized tools succinctly and efficiently in
    pure Python.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块标准化了一组核心的快速、内存高效的工具，这些工具本身或与其他工具结合使用都很有用。它们共同形成了一种“迭代器代数”，使得在纯Python中简洁高效地构造专用工具成为可能。
- en: 'We’ll discuss a few functions of `itertools` in this tutorial. When trying
    out the examples given below, be sure to import `itertools` and `operator` as:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本教程中讨论`itertools`的一些函数。在尝试下面给出的示例时，请确保导入`itertools`和`operator`，如：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Infinite Iterators
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无限迭代器
- en: Infinite iterators help you create sequences of infinite length as shown below.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 无限迭代器帮助你创建无限长度的序列，如下所示。
- en: '| Construct + Example | Output |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 构造 + 示例 | 输出 |'
- en: '| `count()`  [PRE9]  |  [PRE10]  |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `count()`  [PRE9]  |  [PRE10]  |'
- en: '| `cycle()`  [PRE11]  |  [PRE12]  |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `cycle()`  [PRE11]  |  [PRE12]  |'
- en: '| `repeat()`  [PRE13]  |  [PRE14]  |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `repeat()`  [PRE13]  |  [PRE14]  |'
- en: Combinatoric iterators
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组合迭代器
- en: You can create permutations, combinations, etc., with these iterators.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些迭代器创建排列、组合等。
- en: '| Construct + Example | Output |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 构造 + 示例 | 输出 |'
- en: '| `product()`  [PRE15]  |  [PRE16]  |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `product()`  [PRE15]  |  [PRE16]  |'
- en: '| `permutations()`  [PRE17]  |  [PRE18]  |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `permutations()`  [PRE17]  |  [PRE18]  |'
- en: '| `combinations()`  [PRE19]  |  [PRE20]  |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `combinations()`  [PRE19]  |  [PRE20]  |'
- en: '| `combinations_with_replacement()`  [PRE21]  |  [PRE22]  |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `combinations_with_replacement()`  [PRE21]  |  [PRE22]  |'
- en: More Useful Iterators
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多有用的迭代器
- en: There are other iterators that stop at the end of the shorter of the two lists
    passed as arguments.  Some of them are described below. This is not an exhaustive
    list, and you can [see the complete list here](https://docs.python.org/3/library/itertools.html#itertool-functions).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他迭代器会在传入的两个列表中较短的那个结束时停止。其中一些在下面有所描述。这不是一个详尽的列表，你可以在[这里查看完整列表](https://docs.python.org/3/library/itertools.html#itertool-functions)。
- en: Accumulate()
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 累积()
- en: Automatically creates an iterator that accumulates the result of a given operator
    or function and returns the result. You can choose an operator from Python’s `operator`
     library or write your own customized operator.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 自动创建一个迭代器，该迭代器累计给定操作符或函数的结果并返回结果。你可以从Python的`operator`库中选择一个操作符，或编写自定义操作符。
- en: '[PRE23]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Starmap()
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Starmap()
- en: Apply the same operator to pairs of items.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将相同的操作符应用于项对。
- en: '[PRE25]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: filterfalse()
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filterfalse()
- en: Filter out data based on a specific criterion.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据特定标准筛选数据。
- en: '[PRE27]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Functools in Python
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的Functools
- en: 'In most programming languages, passing functions as arguments or a function
    returning another function might be confusing or hard to work with. Python includes
    the `functools` library, making it easy to work with these functions. From Python’s
    official `functools` documentation:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数编程语言中，将函数作为参数传递或函数返回另一个函数可能会令人困惑或难以处理。Python包含了`functools`库，使得处理这些函数变得容易。来自Python官方`functools`文档：
- en: 'The `functools` module is for higher-order functions: functions that act on
    or return other functions. In general, any callable object can be treated as a
    function'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`functools`模块用于高阶函数：作用于或返回其他函数的函数。一般来说，任何可调用对象都可以被视为函数。'
- en: Here we explain a few nice features of this library. You can look at the [complete
    list of `functools` functions here](https://docs.python.org/3/library/functools.html).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们解释了这个库的一些有趣功能。你可以在[这里查看`functools`函数的完整列表](https://docs.python.org/3/library/functools.html)。
- en: Using `lru_cache`
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`lru_cache`
- en: In imperative programming languages, recursion is very expensive. Every time
    a function is invoked, it is evaluated, even if it is called with the same set
    of arguments. In Python, the `lru_cache` is a decorator that can be used to cache
    the results of function evaluations. When the function is invoked again with the
    same set of arguments, the stored result is used, avoiding the extra overhead
    related to recursion.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令式编程语言中，递归是非常昂贵的。每次调用函数时，它都会被评估，即使它被相同的参数集调用。在 Python 中，`lru_cache` 是一个装饰器，可以用来缓存函数评估的结果。当函数再次用相同的参数集调用时，会使用存储的结果，从而避免了与递归相关的额外开销。
- en: Let’s look at the following example. We have the same implementation of the
    computation of the nth Fibonacci number with and without `lru_cache`. We can see
    that `fib(30`) has 31 function evaluations, just as we expect because of `lru_cache`.
    The `fib()` function is invoked only for n=0,1,2…30, and the result is stored
    in memory and used later. This is significantly less than `fib_slow(30)`, with
    2692537 evaluations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看以下示例。我们有相同的计算第 n 个斐波那契数的实现，有和没有 `lru_cache`。我们可以看到 `fib(30)` 有 31 次函数评估，这正如我们预期的那样，因为
    `lru_cache`。`fib()` 函数仅对 n=0,1,2…30 被调用，并且结果存储在内存中，稍后使用。这明显少于 `fib_slow(30)`，它有
    2692537 次评估。
- en: '[PRE29]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: It is worth noting that the `lru_cache` decorator is particularly useful when
    you’re experimenting with machine learning problems in Jupyter notebooks. If you
    have a function that downloads data from the Internet, wrapping it with `lru_cache`
    can keep your download in memory and avoid downloading the same file again even
    if you invoked the download function multiple times.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`lru_cache` 装饰器在你在 Jupyter notebooks 中尝试机器学习问题时特别有用。如果你有一个从互联网上下载数据的函数，将其用
    `lru_cache` 装饰可以将下载的内容保存在内存中，并避免即使你多次调用下载函数也重复下载相同的文件。
- en: Using `reduce()`
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `reduce()`
- en: Reduce is similar to the `itertools.accumulate()`. It applies a function repeatedly
    to the elements of a list and returns the result. Here are a few examples with
    comments to explain the working of this functions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Reduce 类似于 `itertools.accumulate()`。它将一个函数重复应用于列表的元素，并返回结果。以下是一些带有注释的示例，以解释这些函数的工作原理。
- en: '[PRE31]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `reduce()` function can accept any “operators” and optionally an initial
    value. For example, the `collections.Counter` function in the previous example
    can be implemented as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduce()` 函数可以接受任何“操作符”，并可以选择性地指定初始值。例如，前面示例中的 `collections.Counter` 函数可以如下实现：'
- en: '[PRE33]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Using `partial()`
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `partial()`
- en: There are situations when you have a function that takes multiple arguments,
    and some of its arguments are repeated again and again. The function `partial()`
    returns a new version of the same function with a reduced number of arguments.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会有一个接受多个参数的函数，其中一些参数被反复使用。`partial()` 函数返回一个具有较少参数的新版本的相同函数。
- en: 'For example, if you have to compute the power of 2 repeatedly, you can create
    a new version of numpy’s `power()` function as shown below:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你需要重复计算 2 的幂，你可以创建一个新的 numpy 的 `power()` 函数，如下所示：
- en: '[PRE35]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Map-Reduce Pattern
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Map-Reduce 模式
- en: In a previous section, we mentioned the filter, map, and reduce functions as
    high order functions. Using a map-reduce design pattern is indeed a way to help
    us easily make a highly scalable program. The map-reduce pattern is an abstract
    representation of many types of computations that manipulate lists or collections
    of objects. The `map` stage takes the input collection and maps it to an intermediate
    representation. The `reduce` step takes this intermediate representation and computes
    a single output from it. This design pattern is very popular in functional programming
    languages. Python also provides constructs to implement this design pattern in
    an efficient manner.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们提到了 filter、map 和 reduce 函数作为高阶函数。使用 map-reduce 设计模式确实是帮助我们轻松创建高可扩展性程序的一种方法。map-reduce
    模式是对许多类型的计算的抽象表示，这些计算操作列表或对象集合。`map` 阶段将输入集合映射到一个中间表示。`reduce` 步骤从这个中间表示中计算出一个单一的输出。这个设计模式在函数式编程语言中非常流行。Python
    也提供了构造来高效地实现这一设计模式。
- en: Map-Reduce In Python
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Python 中的 Map-Reduce
- en: As an illustration of the map-reduce design pattern, let’s take a simple example.
    Suppose we want to count the numbers divisible by 3 in a list. We’ll use `lambda`
    to define an anonymous function and use it to `map()` all items of a list to 1
    or 0 depending upon whether they pass our divisibility test or not. The function
    `map()` takes as argument a function and an iterable. Next, we’ll use `reduce()`
    to accumulate the overall result.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 map-reduce 设计模式的一个例子，假设我们要统计列表中能被 3 整除的数字。我们将使用 `lambda` 定义一个匿名函数，并利用它来 `map()`
    列表中的所有项，判断它们是否通过我们的可整除性测试，然后将它们映射为 1 或 0。`map()` 函数接受一个函数和一个可迭代对象作为参数。接下来，我们将使用
    `reduce()` 来累积最终结果。
- en: '[PRE37]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: While being very simple, the previous example illustrates how easy it is to
    implement the `map-reduce` design pattern in Python. You can solve complex and
    lengthy problems using the surprisingly simple and easy constructs in Python.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管非常简单，但之前的示例说明了在 Python 中实现 `map-reduce` 设计模式是多么容易。您可以使用 Python 中出乎意料的简单易用的构造来解决复杂且漫长的问题。
- en: Further Reading
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This section provides more resources on the topic if you are looking to go deeper.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了更多关于该主题的资源，以便您深入了解。
- en: Books
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 书籍
- en: '[Think Python: How to Think Like a Computer Scientist](https://greenteapress.com/thinkpython/html/index.html)
    by Allen B. Downey'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《思考 Python：如何像计算机科学家一样思考》](https://greenteapress.com/thinkpython/html/index.html)
    由 Allen B. Downey 编写'
- en: '[Programming in Python 3: A Complete Introduction to the Python Language](https://www.amazon.com/Programming-Python-Complete-Introduction-Language-ebook-dp-B001OFK2DK/dp/B001OFK2DK/ref=mt_other?_encoding=UTF8&me=&qid=1638910263)
    by Mark Summerfield'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《Python 3 编程：Python 语言完全介绍》](https://www.amazon.com/Programming-Python-Complete-Introduction-Language-ebook-dp-B001OFK2DK/dp/B001OFK2DK/ref=mt_other?_encoding=UTF8&me=&qid=1638910263)
    由 Mark Summerfield 编写'
- en: '[Python Programming: An Introduction to Computer Science](https://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/1590282418/ref=sr_1_1?s=books&ie=UTF8&qid=1441293398&sr=1-1&keywords=Python+Zelle&pebp=1441293404611&perid=1B2BP6WM3RQHW4CY6990)
    by John Zelle'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《Python 编程：计算机科学导论》](https://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/1590282418/ref=sr_1_1?s=books&ie=UTF8&qid=1441293398&sr=1-1&keywords=Python+Zelle&pebp=1441293404611&perid=1B2BP6WM3RQHW4CY6990)
    由 John Zelle 编写'
- en: Python Official Documentation
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 官方文档
- en: '[Python documentation](https://docs.python.org/3/contents.html)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 文档](https://docs.python.org/3/contents.html)'
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this tutorial, you discovered features of Python that support functional
    programming.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您了解了支持函数式编程的 Python 特性。
- en: 'Specifically, you learned:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，您学到了：
- en: The iterables returning finite or infinite sequences in Python using `itertools`
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `itertools` 在 Python 中返回有限或无限序列的可迭代对象
- en: The higher-order functions supported by `functools`
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`functools` 支持的高阶函数'
- en: The map-reduce design pattern’s implementation in Python
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: map-reduce 设计模式在 Python 中的实现
- en: Do you have any questions about Python discussed in this post? Ask your questions
    in the comments below, and I will do my best to answer.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这篇文章中讨论的 Python，您有任何问题吗？请在下面的评论中提问，我会尽力回答。
