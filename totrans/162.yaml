- en: Using Dataset Classes in PyTorch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/using-dataset-classes-in-pytorch/](https://machinelearningmastery.com/using-dataset-classes-in-pytorch/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In machine learning and deep learning problems, a lot of effort goes into preparing
    the data. Data is usually messy and needs to be preprocessed before it can be
    used for training a model. If the data is not prepared correctly, the model won’t
    be able to generalize well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the common steps required for data preprocessing include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data normalization: This includes normalizing the data between a range of values
    in a dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data augmentation: This includes generating new samples from existing ones
    by adding noise or shifts in features to make them more diverse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data preparation is a crucial step in any machine learning pipeline. PyTorch
    brings along a lot of modules such as torchvision which provides datasets and
    dataset classes to make data preparation easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial we’ll demonstrate how to work with datasets and transforms
    in PyTorch so that you may create your own custom dataset classes and manipulate
    the datasets the way you want. In particular, you’ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a simple dataset class and apply transforms to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build callable transforms and apply them to the dataset object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to compose various transforms on a dataset object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that here you’ll play with simple datasets for general understanding of
    the concepts while in the next part of this tutorial you’ll get a chance to work
    with dataset objects for images.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kick-start your project** with my book [Deep Learning with PyTorch](https://machinelearningmastery.com/deep-learning-with-pytorch/).
    It provides **self-study tutorials** with **working code**.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.![](../Images/f1c2c2ed936adbba5fbf14c3624f34b9.png)
  prefs: []
  type: TYPE_NORMAL
- en: Using Dataset Classes in PyTorch
  prefs: []
  type: TYPE_NORMAL
- en: Picture by [NASA](https://unsplash.com/photos/1lfI7wkGWZ4). Some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This tutorial is in three parts; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Simple Dataset Class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Callable Transforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composing Multiple Transforms for Datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Simple Dataset Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we begin, we’ll have to import a few packages before creating the dataset
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll import the abstract class `Dataset` from `torch.utils.data`. Hence, we
    override the below methods in the dataset class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__len__` so that `len(dataset)` can tell us the size of the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__getitem__` to access the data samples in the dataset by supporting indexing
    operation. For example, `dataset[i]` can be used to retrieve i-th data sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Likewise, the `torch.manual_seed()` forces the random function to produce the
    same number every time it is recompiled.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s define the dataset class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the object constructor, we have created the values of features and targets,
    namely `x` and `y`, assigning their values to the tensors `self.x` and `self.y`.
    Each tensor carries 20 data samples while the attribute `data_length` stores the
    number of data samples. Let’s discuss about the transforms later in the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of the `SimpleDataset` object is like any Python iterable, such
    as a list or a tuple. Now, let’s create the `SimpleDataset` object and look at
    its total length and the value at index 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As our dataset is iterable, let’s print out the first four elements using a
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating Callable Transforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In several cases, you’ll need to create callable transforms in order to normalize
    or standardize the data. These transforms can then be applied to the tensors.
    Let’s create a callable transform and apply it to our “simple dataset” object
    we created earlier in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We have created a simple custom transform `MultDivide` that multiplies `x` with
    `2` and divides `y` by `3`. This is not for any practical use but to demonstrate
    how a callable class can work as a transform for our dataset class. Remember,
    we had declared a parameter `transform = None` in the `simple_dataset`. Now, we
    can replace that `None` with the custom transform object that we’ve just created.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s demonstrate how it’s done and call this transform object on our dataset
    to see how it transforms the first four elements of our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see the transform has been successfully applied to the first four
    elements of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Want to Get Started With Deep Learning with PyTorch?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take my free email crash course now (with sample code).
  prefs: []
  type: TYPE_NORMAL
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  prefs: []
  type: TYPE_NORMAL
- en: Composing Multiple Transforms for Datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We often would like to perform multiple transforms in series on a dataset. This
    can be done by importing `Compose` class from transforms module in torchvision.
    For instance, let’s say we build another transform `SubtractOne` and apply it
    to our dataset in addition to the `MultDivide` transform that we have created
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Once applied, the newly created transform will subtract 1 from each element
    of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As specified earlier, now we’ll combine both the transforms with `Compose` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that first `MultDivide` transform will be applied onto the dataset and
    then `SubtractOne` transform will be applied on the transformed elements of the
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll pass the `Compose` object (that holds the combination of both the transforms
    i.e. `MultDivide()` and `SubtractOne()`) to our `SimpleDataset` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that the combination of multiple transforms has been applied to the dataset,
    let’s print out the first four elements of our transformed dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting everything together, the complete code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this tutorial, you learned how to create custom datasets and transforms
    in PyTorch. Particularly, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a simple dataset class and apply transforms to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build callable transforms and apply them to the dataset object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to compose various transforms on a dataset object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
