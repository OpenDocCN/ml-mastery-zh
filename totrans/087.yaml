- en: Google Colab for Machine Learning Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/google-colab-for-machine-learning-projects/](https://machinelearningmastery.com/google-colab-for-machine-learning-projects/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Have you ever wanted an easy-to-configure interactive environment to run your
    machine learning code that came with access to GPUs for free? Google Colab is
    the answer you’ve been looking for. It is a convenient and easy-to-use way to
    run Jupyter notebooks on the cloud, and their free version comes with some limited
    access to GPUs as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re familiar with Jupyter notebooks, learning Colab will be a piece of
    cake, and we can even import Jupyter notebooks to be run on Google Colab. But,
    there are a lot of nifty things that Colab can do as well, which we’re going to
    explore in this article. Let’s dive right in!
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the tutorial, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Speed up training using Google Colab’s free tier with GPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google Colab’s extensions to save to Google Drive, present interactive
    display for pandas DataFrame, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save your model’s progress when training with Google Colab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!![](../Images/7fb262d5888a4236460d8e90fea26c52.png)
  prefs: []
  type: TYPE_NORMAL
- en: Google Colab for Machine Learning Projects
  prefs: []
  type: TYPE_NORMAL
- en: Photo by NASA and processing by [Thomas Thomopoulos](https://photojournal.jpl.nasa.gov/beta/catalog/PIA25015).
    Some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This tutorial is divided into five parts; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Google Colab?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Colab quick start guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring your Colab environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful Google Colab extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: Saving model progress on Google Drive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Is Google Colab?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the “[Welcome to Colab](https://colab.research.google.com/notebooks/intro.ipynb)”
    notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: Colab notebooks allow you to combine **executable code** and **rich text** in
    a single document, along with images, HTML, LaTeX and more. When you create your
    own Colab notebooks, they are stored in your Google Drive account. You can easily
    share your Colab notebooks with co-workers or friends, allowing them to comment
    on your notebooks or even edit them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We can use Google Colabs like Jupyter notebooks. They are really convenient
    because Google Colab hosts them, so we don’t use any of our own computer resources
    to run the notebook. We can also share these notebooks so other people can easily
    run our code, all with a standard environment since it’s not dependent on our
    own local machines. However, we might need to install some libraries in our environment
    during initialization.
  prefs: []
  type: TYPE_NORMAL
- en: Want to Get Started With Python for Machine Learning?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take my free 7-day email crash course now (with sample code).
  prefs: []
  type: TYPE_NORMAL
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  prefs: []
  type: TYPE_NORMAL
- en: Google Colab Quick Start Guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create your Google Colab file and get started with Google Colab, you can
    go to [Google Drive](https://drive.google.com/) and create a Google Drive account
    if you do not have one. Now, click on the “New” button at the top left corner
    of your Google Drive page, then click on More ▷ Google Colaboratory.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dfaf75b1df615fd45b626c9b021da7a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a New Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then enter the page for your new Google Colab file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/90de6b47369c01ca117ebce2c7b1b111.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/Colab-Empty.png)'
  prefs: []
  type: TYPE_NORMAL
- en: New Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: From here, you can share your Google Colab file with others using the Share
    button on the top right-hand corner or start coding!
  prefs: []
  type: TYPE_NORMAL
- en: 'The hotkeys on Colab and that on Jupyter notebooks are similar. These are some
    of the useful ones:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run cell: Ctrl + Enter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run cell and add new cell below: Alt + Enter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run cell and goto cell below: Shift + Enter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Indent line by two spaces: Ctrl + ]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unindent line by two spaces: Ctrl + ['
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But there’s also one extra that’s pretty useful that lets you only run a particular
    selected part of the code in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run selected part of a cell: Ctrl + Shift + Enter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just like the Jupyter notebook, you can also write text with Markdown cells.
    But Colab has an additional feature that automatically generates a table of contents
    based on your markdown content, and you can also hide parts of the code based
    on their headings in the markdown cells.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/6450168d285836ec11b1723ec41d8326.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/Colab-Headings-1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Google Colab with Markdown and Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run Jupyter on your own computer, you have no choice but to use the
    CPU from your computer. But in Colab, you can change the **runtime** to include
    GPUs and TPUs in addition to CPUs because it is executed on Google’s cloud. You
    can switch to a different runtime by going to Runtime ▷ Change runtime type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/6401db985125f36823fdd08cdaccec1e.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/Colab-Runtime-Menu.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Runtime Type for Google Colab
  prefs: []
  type: TYPE_NORMAL
- en: You can then select from the different hardware accelerators to equip your environment
    with.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/9d4d90bf4af30b645501c140279a3b9f.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/Colab-Runtime-Settings.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding GPU/TPU to Google Colab Notebook Environment
  prefs: []
  type: TYPE_NORMAL
- en: Unlike your own computer, Google Colab does not provide you with a terminal
    to enter commands to manage your Python environment. To install Python libraries
    and other programs, we can use the `!` character to run shell commands just like
    in Jupyter notebooks, e.g. `!pip install numpy` (but as we’ll see later on, Colab
    already comes pre-installed with a lot of the libraries we’ll need, such as NumPy)
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to set up our Colab environment and start running some
    code, let’s do some exploration of the environment!
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Your Colab Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we can run some shell commands with `!` using the `wget` command, it is
    probably the easiest way to get some data. For example, running this will bring
    you a CSV file to the Colab environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To explore the current working directory of your Colab file on the virtual
    machine, click on the File icon on the left-hand side of the screen. By default,
    Colab provides you with a directory named `sample_data` with a few files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/78a9335356f366d1327d8e05af346c40.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/Colab-Default-Files-Tab-1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Files Tab of Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the current working directory for our Colab notebook. You can read
    one of these files in Python by using a code like this on the notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Later we’ll see how to use Colab extensions to mount our Google Drive to this
    directory in order to store and access files on our Google Drive account.
  prefs: []
  type: TYPE_NORMAL
- en: 'By running shell commands using `!`, we can also look at the hardware configuration
    of our Colab environment. To take a look at the CPU, we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the output for my environment as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also check if we have a GPU attached to the runtime by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the output if you’ve got one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These are just some examples of the shell commands that we can use to explore
    the Colab environment. There are also many others, such as `!pip list` to look
    at the libraries that the Colab environment has access to, the standard `!ls`
    to explore the files in the working directory, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Useful Colab Extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Colab also comes with a lot of really useful extensions. One such extension
    allows us to mount our Google Drive to our working directory. We can do this using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then, Colab will request permission to access your Google Drive files, which
    you can do after selecting which Google account you want to give it access to.
    After giving it the required permissions, we can see our Google Drive mounted
    in the Files tab on the left-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/69d83c31b4918b5d533eb1affc855dab.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/Colab-Mounted-GDrive-1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Google Drive Mounted onto Current Working Directory of Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, to write a file to our Google Drive, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This code snippet writes `Hello World!` to a `test.txt` file in the top level
    of your Google Drive. Similarly, we can read from a file in our Google Drive as
    well by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It is based on our earlier example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, Google Colab comes with some extensions to create a better experience
    using a notebook. If we use pandas DataFrame a lot, there is an extension to display
    interactive tables. To use this, we can use magic functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This enables the interactive display for DataFrames, then when we run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will show you the DataFrame as an interactive table, where we can filter
    based on columns, see the different rows in the table, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/349f009b2d11e84b1db5e10c15abba81.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/Colab-Interactive-DataFrame-1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Interactive Interface for pandas DataFrame in Google Colab
  prefs: []
  type: TYPE_NORMAL
- en: 'To disable this feature later on, we can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When we display the same DataFrame `X` again, we get the standard Pandas DataFrame
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/1f942cc0d27ea341c7af13d958daa269.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/Colab-Normal-DataFrame.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Standard Interface for pandas DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Saving Model Progress on Google Drive'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Colab is probably the easiest way to give us powerful GPU resources for
    your machine learning project. But in the free version of Colab, Google limits
    the time we can use our Colab notebook in each session. Our kernel may terminate
    for no reason. We can restart our notebook and continue our work, but we may lose
    everything in the memory. This is a problem if we need to train our model for
    a long time. Our Colab instance may terminate before the training is completed.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Google Colab extension to mount our Google Drive and Keras ModelCheckpoint
    callback, we can save our model progress on Google Drive. This is particularly
    useful to work around Colab timeouts. It is more lenient for paid Pro and Pro+
    users, but there is always a chance that our model training terminates midway
    at random times. It is valuable if we don’t want to lose our partially trained
    model.
  prefs: []
  type: TYPE_NORMAL
- en: For this demonstration, we’ll use the LeNet-5 model on the MNIST dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, to save model progress during training on Google Drive, first, we need
    to mount our Google Drive onto our Colab environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Afterward, we declare the Callback to save our checkpoint model to Google Drive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we begin training on the MNIST dataset with the checkpoint callbacks
    to ensure we can resume at the last epoch should our Colab session time out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This trains our model and gives the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: And from the output, we can see that the checkpoints have been saved. Looking
    at my Google Drive folder, we can also see the checkpoints stored there.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/5e1e847b7b4e46bf32307855c355fc5e.png)](https://machinelearningmastery.com/wp-content/uploads/2022/04/GDrive-Checkpoints.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Checkpoints Stored in Google Drive
  prefs: []
  type: TYPE_NORMAL
- en: Colab instance is on Google’s cloud environment. The machine it is running has
    some storage, so we can install a package or download some files into it. However,
    we should not save our checkpoint there because we have no guarantee we will get
    it back after our session is terminated. Therefore, in the above, we mount our
    Google Drive into the instance and save the checkpoint in our Google Drive. This
    is how we can be assured the checkpoint files are accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we attach the full code for the model training and saving to Google Drive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If model training stops midway, we can continue by just recompiling the model
    and loading the weights, and then we can continue our training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section provides more resources on the topic if you are looking to go deeper.
  prefs: []
  type: TYPE_NORMAL
- en: Articles
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '“Welcome to Colab” Notebook: [https://colab.research.google.com/](https://colab.research.google.com/?utm_source=scs-index)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jupyter Notebook Documentation: [https://docs.jupyter.org/en/latest/](https://docs.jupyter.org/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, you have learned what Google Colab is, how to leverage Google
    Colab to get free access to GPUs using its free tier, how to use Google Colab
    with your Google Drive account, and how to save models to store model progress
    during training on Google Drive in a Google Colab notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Google Colab, and how to start using it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to explore your Google Colab notebook’s environment using bash commands
    with `!`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful extensions that come with Google Colab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving model progress during training to Google Drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
