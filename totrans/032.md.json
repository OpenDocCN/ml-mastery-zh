["```py\npip install langchain langchain_core langchain_community langchain_openai python-dotenv\n```", "```py\nOPENAI_API_KEY = sk-XXXXXXXXXX\n```", "```py\nfrom typing import List\nfrom dotenv import load_dotenv\nfrom langchain.output_parsers import PydanticOutputParser\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_core.pydantic_v1 import BaseModel, Field, validator\nfrom langchain_openai import ChatOpenAI\n\nload_dotenv()\n\nclass MovieReview(BaseModel):\n    title: str = Field(description=\"The movie title\")\n    year: int = Field(description=\"The year of the movie was released\")\n    genre: List[str] = Field(description=\"The main genres of the movie\")\n    rating: float = Field(description=\"Rating out of 10\")\n    summary: str = Field(description=\"Brief summary of the movie plot\")\n    review: str = Field(description=\"Critical review of the movie\")\n\n    @validator(\"year\")\n    def valid_year(cls, val):\n        if val  2025:\n            raise ValueError(\"Must a valid movie year\")\n        return val\n\n    @validator(\"rating\")\n    def valid_rating(cls, val):\n        if val  10:\n            raise ValueError(\"Rating must be between 0 and 10\")\n        return val\n\nparser = PydanticOutputParser(pydantic_object=MovieReview)\n\nprompt = PromptTemplate(\n    template=\"Generate a movie review for the following movie:\\n{movie_title}\\n\\n{format_instructions}\",\n    input_variables=[\"movie_title\"],\n    partial_variables={\"format_instructions\": parser.get_format_instructions()}\n)\n\nmodel = ChatOpenAI(temperature=0)\n\nchain = prompt | model | parser\n\nmovie_title = \"The Matrix\"\nreview = chain.invoke({\"movie_title\": movie_title})\nprint(review)\n```", "```py\ntitle='The Matrix' year=1999 genre=['Action', 'Sci-Fi'] rating=9.0 summary='A computer hacker learns about the true nature of reality and his role in the war against its controllers.' review=\"The Matrix is a groundbreaking film that revolutionized the action genre with its innovative special effects and thought-provoking storyline. Keanu Reeves delivers a memorable performance as Neo, the chosen one who must navigate the simulated reality of the Matrix to save humanity. The film's blend of martial arts, philosophy, and dystopian themes make it a must-watch for any movie enthusiast.\"\n```", "```py\nfrom dotenv import load_dotenv\nfrom langchain.output_parsers import CommaSeparatedListOutputParser\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_openai import ChatOpenAI\n\nload_dotenv()\n\noutput_parser = CommaSeparatedListOutputParser()\n\nformat_instructions = output_parser.get_format_instructions()\nprompt = PromptTemplate(\n    template=\"List six {subject}.\\n{format_instructions}\",\n    input_variables=[\"subject\"],\n    partial_variables={\"format_instructions\": format_instructions},\n)\n\nmodel = ChatOpenAI(temperature=0)\n\nchain = prompt | model | output_parser\n\nprint(chain.invoke({\"subject\": \"Programming Language\"}))\n```", "```py\n['Java', 'Python', 'C++', 'JavaScript', 'Ruby', 'Swift']\n```", "```py\nfrom dotenv import load_dotenv\nfrom langchain.output_parsers import DatetimeOutputParser\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_openai import ChatOpenAI\n\nload_dotenv()\n\noutput_parser = DatetimeOutputParser()\n\nformat_instructions = output_parser.get_format_instructions()\nprompt = PromptTemplate(\n    template=\"\"\"Answer the users question:\n\n    {question}\n\n    {format_instructions}\"\"\",\n    input_variables=[\"question\"],\n    partial_variables={\"format_instructions\": format_instructions},\n)\n\nmodel = ChatOpenAI(temperature=0)\n\nchain = prompt | model | output_parser\n\nprint(chain.invoke({\"question\": \"When is the Python Programming Language invented?\"}))\n```", "```py\n1991-02-20 00:00:00\n```"]