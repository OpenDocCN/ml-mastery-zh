- en: Some Language Features in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的一些语言特性
- en: 原文：[https://machinelearningmastery.com/some-language-features-in-python/](https://machinelearningmastery.com/some-language-features-in-python/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/some-language-features-in-python/](https://machinelearningmastery.com/some-language-features-in-python/)
- en: The Python language syntax is quite powerful and expressive. Hence it is concise
    to express an algorithm in Python. Maybe this is the reason why it is popular
    in machine learning, as we need to experiment a lot in developing a machine learning
    model.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python语言的语法非常强大且富有表现力。因此，用Python表达一个算法简洁明了。也许这就是它在机器学习中受欢迎的原因，因为在开发机器学习模型时，我们需要进行大量实验。
- en: If you’re new to Python but with experience in another programming language,
    you will sometimes find Python syntax understandable but weird. If you are used
    to writing in C++ or Java and then transitioning to Python, likely your program
    is not **Pythonic**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Python不熟悉但有其他编程语言的经验，你会发现Python的语法有时容易理解但又奇怪。如果你习惯于用C++或Java编写代码，然后转到Python，可能你的程序就不是**Pythonic**的。
- en: In this tutorial, we will cover several common language features in Python that
    distinguishes itself from other programming languages.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将涵盖Python中的几种常见语言特性，这些特性使其与其他编程语言有所区别。
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**用我的新书[Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/)启动你的项目**，包括*逐步教程*和所有示例的*Python源代码*文件。'
- en: Let’s get started.![](../Images/2d608b7ddfff69813b497b423179c919.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。![](../Images/2d608b7ddfff69813b497b423179c919.png)
- en: Some Language Features in Python
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的一些语言特性
- en: Photo by [David Clode](https://unsplash.com/photos/QZePScKPb2Q), some rights
    reserved.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[David Clode](https://unsplash.com/photos/QZePScKPb2Q)提供，部分权利保留。
- en: Tutorial Overview
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程概述
- en: 'This tutorial is divided into two parts; they are:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为两部分；它们是：
- en: Operators
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作符
- en: Built-in data structures
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内置数据结构
- en: Special variables
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特殊变量
- en: Built-in functions
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内置函数
- en: Operators
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作符
- en: 'Most of the operators used in Python are the same as the other languages. The
    precedence table is as follows, adopted from Chapter 6 of Python Language Reference
    ([https://docs.python.org/3/reference/expressions.html](https://docs.python.org/3/reference/expressions.html)):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python中使用的大多数操作符与其他语言相同。优先级表如下，采用自Python语言参考第6章（[https://docs.python.org/3/reference/expressions.html](https://docs.python.org/3/reference/expressions.html)）：
- en: '| Operator | Description |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| Operator | 描述 |'
- en: '| (expressions…), [expressions…], {key: value…}, {expressions…} | Binding or
    parenthesized expression, list display, dictionary display, set display |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| (expressions…), [expressions…], {key: value…}, {expressions…} | 绑定或括号表达式、列表显示、字典显示、集合显示
    |'
- en: '| x[index], x[index:index], x(arguments…), x.attribute | Subscription, slicing,
    call, attribute reference |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| x[index], x[index:index], x(arguments…), x.attribute | 订阅、切片、调用、属性引用 |'
- en: '| await x | Await expression |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| await x | 等待表达式 |'
- en: '| ** | Exponentiation |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| ** | 幂运算 |'
- en: '| +x, -x, ~x | Positive, negative, bitwise NOT |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| +x, -x, ~x | 正数、负数、按位非 |'
- en: '| *, @, /, //, % | Multiplication, matrix multiplication, division, floor division,
    remainder |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| *, @, /, //, % | 乘法、矩阵乘法、除法、地板除法、余数 |'
- en: '| +, – | Addition and subtraction |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| +, – | 加法和减法 |'
- en: '| <<, >> | Shifts |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| <<, >> | 位移 |'
- en: '| & | Bitwise AND |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| & | 按位与 |'
- en: '| ^ | Bitwise XOR |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| ^ | 按位异或 |'
- en: '| &#124; | Bitwise OR |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| &#124; | 按位或 |'
- en: '| in, not in, is, is not, <, <=, >, >=, !=, == | Comparisons, including membership
    tests and identity tests |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| in, not in, is, is not, <, <=, >, >=, !=, == | 比较，包括成员测试和身份测试 |'
- en: '| not x | Boolean NOT |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| not x | 布尔非 |'
- en: '| and | Boolean AND |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| and | 布尔与 |'
- en: '| or | Boolean OR |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| or | 布尔或 |'
- en: '| if – else | Conditional expression |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| if – else | 条件表达式 |'
- en: '| lambda | Lambda expression |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| lambda | Lambda表达式 |'
- en: '| := | Assignment expression |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| := | 赋值表达式 |'
- en: 'Some key differences to other languages:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他语言的一些关键区别：
- en: Boolean operators are spelled out, while bitwise operators are characters `&`,
    `^` and `|`
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔运算符是完整拼写的，而位运算符是字符`&`、`^`和`|`
- en: exponentiation uses `2**3`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幂运算使用`2**3`
- en: integer division uses `//`, and division `/` always gives you floating point
    values
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数除法使用`//`，而除法`/`总是返回浮点值
- en: 'ternary operator: If you are familiar with the expression `(x)?a:b` in C, we
    write it as `a if x else b` in Python'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三元运算符：如果你熟悉C语言中的表达式`(x)?a:b`，我们在Python中写作`a if x else b`
- en: comparing if two things are equal can ether use `==` or `is`. The `==` operator
    is the same as other languages for equality, but `is` is stricter, reserved for
    whether the two variable points to the same object
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较两个东西是否相等可以使用 `==` 或 `is`。`==` 运算符对于相等性与其他语言相同，但 `is` 更严格，保留用于检查两个变量是否指向同一个对象。
- en: 'In Python, we allow concatenation in comparison operators. For example, to
    test if a value is between -1 and +1, we can do:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们允许在比较操作符中进行连接。例如，要测试一个值是否在 -1 到 +1 之间，我们可以这样做：
- en: Python
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Python
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'but we can also do:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也可以这样做：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Built-in Data Structures
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置数据结构
- en: As in many other languages, we have integer and floating point data types in
    Python. But there are also complex numbers (e.g., `3+1j`), Boolean as constants
    (`True` and `False`), strings, as well as a dummy type `None`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 和许多其他语言一样，Python 中有整数和浮点数数据类型。但也有复数（例如 `3+1j`），布尔常量（`True` 和 `False`），字符串，以及一个虚拟类型
    `None`。
- en: 'But the power of Python as a language lies in the fact that there are container
    types built-in: Python arrays are called “list,” and it will expand automatically.
    Associative arrays (or hash tables) are called “dict.” We also have “tuple” as
    a read-only list and “set” as a container for unique items. In C++, for example,
    you will need STL to give you these features.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Python 作为一种语言的强大之处在于它内置了容器类型：Python 数组称为“列表”，它会自动扩展。关联数组（或哈希表）称为“字典”。我们还有“元组”作为只读列表和“集合”作为存储唯一项的容器。例如，在
    C++ 中，您需要 STL 来提供这些功能。
- en: 'The “dict” data structure is probably the most powerful one in Python and gives
    us some convenience in writing code. For example, in the problem of image classification
    between dogs and cats, our machine learning model may give you only a value of
    0 or 1, and if you want to print the name, we can do:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '"dict" 数据结构可能是 Python 中最强大的一个，让我们在编写代码时更加方便。例如，在狗和猫的图像分类问题中，我们的机器学习模型可能只会给出
    0 或 1 的值，如果想要打印名称，我们可以这样做：'
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this case, we make use of the dict `value_to_name` as a lookup table. Similarly,
    we can also make use of the dict to build a counter:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用字典 `value_to_name` 作为查找表。类似地，我们还可以利用字典来构建计数器：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will build a dict called `counter` that maps each character to the number
    of occurrences in the sentence.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建一个名为 `counter` 的字典，将每个字符映射到句子中出现的次数。
- en: 'Python list also comes with powerful syntax. Unlike some other languages, we
    can put anything into a list:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Python 列表还具有强大的语法。与某些其他语言不同，我们可以将任何东西放入列表中：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: and we can use `+` to concatenate lists. In the above, we use `+=` to extend
    the list `A`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `+` 连接列表。在上例中，我们使用 `+=` 来扩展列表 `A`。
- en: 'Python list has slicing syntax. For example, in the above `A`, we can make
    `A[1:3]` to mean elements 1 and 2, i.e., `[2, "fizz"]` and `A[1:1]` is an empty
    list. Indeed we can assign something to a slice to insert or remove some elements.
    For example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Python 列表具有切片语法。例如，在上述 `A` 中，我们可以使用 `A[1:3]` 表示第 1 和第 2 个元素，即 `[2, "fizz"]`，而
    `A[1:1]` 则是一个空列表。事实上，我们可以将某些内容分配给一个切片，以插入或删除一些元素。例如：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: and then,
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Tuple has a similar syntax as list, except it is defined using parenthesis:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 元组与列表具有类似的语法，只是使用圆括号来定义：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Tuple is immutable. It means you cannot modify it once it is defined. In Python,
    if you put several things together with commas to separate each other, it is assumed
    to be a tuple. The significance of this is that we can swap two variables in a
    very clean syntax:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是不可变的。这意味着一旦定义，就无法修改它。在 Python 中，如果用逗号分隔几个东西放在一起，它被认为是一个元组。这样做的意义在于，我们可以以非常清晰的语法交换两个变量：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, as you have seen in the examples above, Python strings support substitution
    on the fly. With the similar template syntax as `printf()` function in C, we can
    use `%s` to substitute a string or `%d` to substitute an integer. We can also
    use `%.3f` to substitute a floating point number with 3 decimal places. Below
    is an example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如您在上面的示例中看到的那样，Python 字符串支持即时替换。与 C 中的 `printf()` 函数类似的模板语法，我们可以使用 `%s`
    替换字符串或 `%d` 替换整数。我们还可以使用 `%.3f` 替换带有三位小数的浮点数。以下是一个示例：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: But this is just one of the many ways to do it. The above can also be achieved
    using the f-string and format() method.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是其中的一种方法。上述内容也可以通过 f-string 和 format() 方法来实现。
- en: Special variables
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊变量
- en: Python has several “special variables” predefined. `__name__` tells the current
    namespace, and `__file__` tells the filename of the script. More will be found
    inside objects, but almost all of them are generally not supposed to be directly
    used. As a convention (i.e., just a habit as no one is stopping you from doing
    it), we name internal variables with an underscore or double underscore as a prefix
    (by the way, double underscores are pronounced as “dunder” by some people). If
    you’re from C++ or Java, these are equivalent to the private members of a class,
    although they are not technically private.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有几个“特殊变量”预定义。`__name__` 告诉当前命名空间，而 `__file__` 告诉脚本的文件名。更多的特殊变量存在于对象内部，但几乎所有的通常不应该被直接使用。作为一种惯例（即，仅仅是一种习惯，没有人阻止你这样做），我们以单下划线或双下划线作为前缀来命名内部变量（顺便提一下，双下划线有些人称之为“dunder”）。如果你来自
    C++ 或 Java，这些相当于类的私有成员，尽管它们在技术上并不是私有的。
- en: 'One notable “special” variable that you may often see in Python code is `_`,
    just an underscore character. It is by convention to mean a variable that we do
    not care about. Why do you need a variable if you don’t care? That’s because sometimes
    you hold a return value from a function. For example, in pandas, we can scan each
    row of a dataframe:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个值得注意的“特殊”变量是 `_`，仅一个下划线字符。按照惯例，它表示我们不关心的变量。为什么需要一个不关心的变量？因为有时你会保存一个函数的返回值。例如，在
    pandas 中，我们可以扫描数据框的每一行：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the above, we can see that the dataframe has three columns, “x,” “y,” and
    “z,” and the rows are indexed by 0 to 3\. If we call `A.iterrows()`, it will give
    us the index and the row one by one, but we don’t care about the index. We can
    just create a new variable to hold it but not use it. To clarify that we are not
    going to use it, we use `_` as the variable to hold the index while the row is
    stored into variable `row`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述内容中，我们可以看到数据框有三列，“x”、“y”和“z”，行由 0 到 3 进行索引。如果我们调用 `A.iterrows()`，它会逐行返回索引和行，但我们不关心索引。我们可以创建一个新变量来保存它但不使用它。为了明确我们不会使用它，我们使用
    `_` 作为保存索引的变量，而行则存储到变量 `row` 中。
- en: Want to Get Started With Python for Machine Learning?
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想要开始学习用于机器学习的 Python 吗？
- en: Take my free 7-day email crash course now (with sample code).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就领取我的免费 7 天电子邮件速成课程（附示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注册，还可以获得课程的免费 PDF 电子书版本。
- en: Built-in functions
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置函数
- en: 'In Python, a small number of functions are defined as built-in while other
    functionalities are delivered in other packages. The list of all built-in functions
    are available in the Python Standard Library documentation ([https://docs.python.org/3/library/functions.html](https://docs.python.org/3/library/functions.html)).
    Below are those defined in Python 3.10:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，一些函数被定义为内置函数，而其他功能则通过其他包提供。所有内置函数的列表可以在 Python 标准库文档中找到（[https://docs.python.org/3/library/functions.html](https://docs.python.org/3/library/functions.html)）。以下是
    Python 3.10 中定义的函数：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Not all are used every day, but some are particularly notable:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的函数每天都会用到，但有些特别值得注意：
- en: '`zip()` allows you to combine multiple lists together. For example,'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`zip()` 允许你将多个列表组合在一起。例如，'
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And it is handy if you want to “pivot” a list of list, e.g.,
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想“旋转”一个列表的列表，这很方便，例如，
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`enumerate()` is handy to let you number a list of items, for example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`enumerate()` 非常方便，可以让你对列表项进行编号，例如：'
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is equivalent to the following if you do not use `enumerate`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不使用 `enumerate`，这等同于以下操作：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Compared to other languages, the for loop in Python is to iterate over a predefined
    range rather than computing the values in each iteration. In other words, there
    is no direct equivalence to the following C for loop:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他语言相比，Python 中的 for 循环是迭代一个预定义的范围，而不是在每次迭代中计算值。换句话说，它没有直接等同于以下的 C for 循环：
- en: C
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: C
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'and in Python, we have to use `range()` to do the same:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们必须使用 `range()` 来完成相同的操作：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In a similar sense, there are some functions that manipulate a list (or list-like
    data structures, which Python calls the “iterables”):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，有一些函数用于操作列表（或类似列表的数据结构，Python 称之为“可迭代对象”）：
- en: '`max(a)`: To find the maximum value in list `a`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max(a)`：查找列表 `a` 中的最大值'
- en: '`min(a)`: To find the minimum value in list `a`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min(a)`：查找列表 `a` 中的最小值'
- en: '`sum(a)`: To find the sum of values in list `a`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sum(a)`：查找列表 `a` 中值的总和'
- en: '`reverse(a)`: To iterate from list `a` from back'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reverse(a)`：从列表 `a` 的末尾开始迭代'
- en: '`sorted(a)`: To return a copy of list `a` with elements in sorted order'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sorted(a)`：返回一个按排序顺序排列的列表 `a` 的副本'
- en: We will cover more on these in the next post.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一篇文章中进一步讨论这些内容。
- en: Further reading
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The above only highlighted some key features in Python. Surely there is no
    more authoritative documentation than the official documentation from Python.org;
    all beginners should start with the Python tutorial and check the Language Reference
    for syntax details and the Standard Library for additional libraries that come
    with the Python installation:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容仅突出了 Python 中的一些关键特性。毫无疑问，没有比 Python.org 的官方文档更权威的资料了；所有初学者都应从 Python 教程开始，并查看语言参考以获取语法细节，标准库则提供了
    Python 安装附带的额外库：
- en: The Python Tutorial – [https://docs.python.org/3/tutorial/index.html](https://docs.python.org/3/tutorial/index.html)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 教程 – [https://docs.python.org/3/tutorial/index.html](https://docs.python.org/3/tutorial/index.html)
- en: The Python Language Reference – [https://docs.python.org/3/reference/index.html](https://docs.python.org/3/reference/index.html)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 语言参考 – [https://docs.python.org/3/reference/index.html](https://docs.python.org/3/reference/index.html)
- en: The Python Standard Library – [https://docs.python.org/3/library/index.html](https://docs.python.org/3/library/index.html)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 标准库 – [https://docs.python.org/3/library/index.html](https://docs.python.org/3/library/index.html)
- en: For books, *Learning Python* from Lutz is an old but good primer. After that,
    *Fluent Python* can help you better understand the internal structure of the language.
    However, if you want something quick, Al Sweigart’s book can help you quickly
    pick up the language with examples. Once you get familiar with Python, you may
    want to learn some quick tips for a particular task from the *Python Cookbook*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于书籍，Lutz 的 *Learning Python* 是一个老而好的入门书籍。之后，*流畅的 Python* 可以帮助您更好地理解语言的内部结构。然而，如果您想快速入门，Al
    Sweigart 的书籍可以通过示例帮助您快速掌握语言。一旦熟悉 Python，您可能希望从 *Python Cookbook* 中获取某个特定任务的快速技巧。
- en: '*Learning Python*, 5th Edition by Mark Lutz, O’Reilly, 2013, [https://www.amazon.com/dp/1449355730/](https://www.amazon.com/dp/1449355730/)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python 学习手册* 第五版 作者 Mark Lutz, O’Reilly, 2013, [https://www.amazon.com/dp/1449355730/](https://www.amazon.com/dp/1449355730/)'
- en: '*Fluent Python* by Luciano Ramalho, O’Reilly, 2015, [https://www.amazon.com/dp/1491946008/](https://www.amazon.com/dp/1491946008/)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*流畅的 Python* 作者 Luciano Ramalho, O’Reilly, 2015, [https://www.amazon.com/dp/1491946008/](https://www.amazon.com/dp/1491946008/)'
- en: '*Automate the Boring Stuff with Python*, 2nd Edition by Al Sweigart, No Starch
    Press, 2019, [https://www.amazon.com/dp/1593279922/](https://www.amazon.com/dp/1593279922/)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用 Python 自动化繁琐的工作* 第二版 作者 Al Sweigart, No Starch Press, 2019, [https://www.amazon.com/dp/1593279922/](https://www.amazon.com/dp/1593279922/)'
- en: '*Python Cookbook*, 3rd Edition by David Beazley and Brian K. Jones, O’Reilly,
    2013, [https://www.amazon.com/dp/1449340377/](https://www.amazon.com/dp/1449340377/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python Cookbook* 第三版 作者 David Beazley 和 Brian K. Jones, O’Reilly, 2013, [https://www.amazon.com/dp/1449340377/](https://www.amazon.com/dp/1449340377/)'
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this tutorial, you discovered some distinctive features of Python. Specifically,
    you learned:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您发现了 Python 的一些独特特性。具体来说，您学到了：
- en: The operators provided by Python
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 提供的运算符
- en: Some use of the built-in data structure
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些内置数据结构的使用
- en: Some frequently used built-in functions and why they are useful
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些经常使用的内置函数及其实用性
