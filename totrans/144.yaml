- en: Manipulating Tensors in PyTorch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/manipulating-tensors-in-pytorch/](https://machinelearningmastery.com/manipulating-tensors-in-pytorch/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PyTorch is a deep-learning library. Just like some other deep learning libraries,
    it applies operations on numerical arrays called **tensors**. In the simplest
    terms, tensors are just multidimensional arrays. When we deal with the tensors,
    some operations are used very often. In PyTorch, there are some functions defined
    specifically for dealing with tensors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following, we will give a brief overview of what PyTorch provides on
    tensors and how we can use them. After finishing this tutorial, you will know:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create and operate on PyTorch tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyTorch’s tensor syntax is similar to NumPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The common functions you can use from PyTorch to manipulate a tensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kick-start your project** with my book [Deep Learning with PyTorch](https://machinelearningmastery.com/deep-learning-with-pytorch/).
    It provides **self-study tutorials** with **working code**.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.![](../Images/468f6fbc5538c89afe0de5bd41bcfef4.png)
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating tensors in PyTorch. Photo by [Big Dodzy](https://unsplash.com/photos/n4BW2LPf7t8).
    Some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This tutorial is in four parts; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking a Tensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating Tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tensor Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Tensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re familiar with NumPy, you should recall that there are multiple ways
    of creating an array. The same is true in PyTorch for creating tensors. The simplest
    way to create a specific constant matrix like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: $$
  prefs: []
  type: TYPE_NORMAL
- en: \begin{bmatrix}
  prefs: []
  type: TYPE_NORMAL
- en: 1 & 2 & 3 \\
  prefs: []
  type: TYPE_NORMAL
- en: 4 & 5 & 6
  prefs: []
  type: TYPE_NORMAL
- en: \end{bmatrix}
  prefs: []
  type: TYPE_NORMAL
- en: $$
  prefs: []
  type: TYPE_NORMAL
- en: 'is by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `dtype` argument specifies the data type of the values in the tensor. It
    is optional. You can also provide the values from a NumPy array and convert it
    to a PyTorch tensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, you would create a tensor for some specific purpose. For example,
    if you want to have ten values evenly distributed between -1 and 1, you can use
    the `linspace()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you want to have a tensor of random values (which is very useful
    in testing your functions), you can make one like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This resulting tensor is of dimension $3\times 4$, and each value is uniformly
    distributed between 0 and 1\. If you want to have the values normally distributed,
    just change the function to `randn()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to have the random values be an integer, e.g., between 3 to 10,
    you can use the `randint()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The values are in the range $3 \le x < 10$. By default, the lower bound is
    zero, so if you want the values to be $0 \le x < 10$, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The other commonly used tensors are the zero tensor and tensors with all values
    the same. To create a zero tensor (e.g., of dimension $2\times 3\times 4$), you
    can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And to create a tensor of all values are 5, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'But if you want all values to be one, there is a simpler function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if you want an identity matrix, you can get it with `diag()` or `eye()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Want to Get Started With Deep Learning with PyTorch?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take my free email crash course now (with sample code).
  prefs: []
  type: TYPE_NORMAL
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  prefs: []
  type: TYPE_NORMAL
- en: Checking a Tensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have a tensor and you want to know more about it, you can simply print
    it to the screen using `print()`. But if the tensor is too big, it is easier to
    show its dimension by checking its shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The shape of a tensor can be accessed using the `shape` property or the `size()`
    function. If you want to see how many dimensions you have (i.e., $2\times 3\times
    4$ is 3 and $3\times 4$ is 2), you can read the `ndim` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you “3”. If you use `len()` to check a tensor, it will only
    give you the size of the first dimension, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Another property that you want to learn about a tensor is its data type. Usually,
    you use floating points in deep learning, but sometimes, the tensors should be
    in integers (e.g., in an image as pixel values). To check the data type, you can
    read the `dtype` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to change the data type, you can recreate the tensor with a new
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The above prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Manipulating Tensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One common operation on tensors in deep learning is to change the tensor shape.
    For example, you may want to convert a 2D tensor into 1D or add a dummy dimension
    to a tensor. You may also want to extract a sub-tensor from a larger tensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can create a tensor like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'It allows you to take a slice using the same syntax as in NumPy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if you use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'It will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You can also make use of the same slicing syntax to **add** a new dimension.
    For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you use `None` to insert a new dimension at a specific place. This is
    useful if, for example, you need to convert an image into a batch of only one
    image. If you’re familiar with NumPy, you may recall there is a function `expand_dims()`
    for this purpose, but PyTorch doesn’t provide it. A similar function is `unsqueeze()`,
    which is demonstrated below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'One powerful nature of NumPy slicing syntax is Boolean indexing. This is also
    supported with PyTorch tensors. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You may see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The above selects the columns where all elements are greater than -1\. You
    can also manipulate the tensor by selecting specific columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To convert a 2D tensor into 1D, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also use the  `reshape()` function to achieve the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should be the same as that of `ravel()`. But usually, the `reshape()`
    function is for more complicated target shapes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'One common case of reshaping tensors is to do matrix transpose. For a 2D matrix,
    it is easily done in the same way as NumPy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'which prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'But the `transpose()` function in PyTorch requires you to specify which axes
    to swap explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This result is same as above. If you have multiple tensors, you can combine
    them by stacking them (`vstack()` for vertically and `hstack()` for horizontally).
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This may print:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The concatenate function is similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the same tensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The reverse is to split, e.g.,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: It prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This function tells how many tensors to split into, rather than what size each
    tensor is. The latter is indeed more useful in deep learning (e.g., to split a
    tensor of a large dataset into many tensors of small batches). The equivalent
    function would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This should give you the same result as before. So `split(c, 3, dim=0)` means
    to split on dimension 0 such that each resulting tensor will be of size 3.
  prefs: []
  type: TYPE_NORMAL
- en: Tensor Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PyTorch tensors can be treated as arrays. So you can often use it in a similar
    way as NumPy arrays. For example, you have the functions of common mathematical
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if a function is undefined (e.g., square root of negative numbers),
    `nan` will be the result, but no exception will be raised. In PyTorch, you have
    a function to check if the values of a tensor are `nan`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Indeed, besides these defined functions, the Python operators can be applied
    to the tensors too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'You get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'But among the operators, matrix multiplications are very important in deep
    learning. You can do this with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'These two are the same. Indeed, the `@` operator from Python can also be used
    for vector dot-product, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'If you treat the values in a tensor as samples, you may also want to find some
    statistics about it. Some are provided in PyTorch too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'It prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'But for linear algebra functions, you should find it in PyTorch’s linalg submodule.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'And specifically for convolution neural networks, padding a tensor is done
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'This prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This example of the `pad()` function is to create (1,1) padding on dimension
    0 and (0,2) on dimension 1\. In other words, for each dimension 0 (rows), we add
    one dummy value (0) at the beginning and the end. For each dimension 1 (columns),
    we add zero dummy values at the beginning but two dummy values at the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, since PyTorch tensors can be considered arrays, you can use them directly
    with other tools such as matplotlib. Below is an example of plotting a surface
    using PyTorch tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The mesh grid produced the `xx` tensor as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: And the plot created is:![](../Images/1598946c006f3d6132863705446d5e93.png)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this tutorial, you discovered how to manipulate PyTorch tensors. Specifically,
    you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a tensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create various kinds of tensors in PyTorch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to reshape, slice, and manipulate tensors in PyTorch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The common functions that can be applied to PyTorch tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
