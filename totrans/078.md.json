["```py\nx = [1, 2, 3]\nx.append(\"that's all\")\n```", "```py\nprint(x[0])\n```", "```py\nprint(x[-1])\n```", "```py\nprint(x[-2:])\n```", "```py` ```", "```py    ### Your Task    In the above example of getting odd numbers from a list of 1 to 10, you can make a step size of `-2` to ask the list go backward. How can you use the slicing syntax to print `[9,7,5,3,1]`? How about `[7,5,3]`?    Post your answer in the comments below. I would love to see what you come up with.    In the next lesson, you will discover the Python dictionary.    ## Lesson 02: Dictionaries    In this lesson, you will learn Python’s way of storing a mapping.    Similar to Perl, an associative array is also a native data structure in Python. It is called a dictionary or dict. Python uses square brackets `[]` for list and uses curly brackets `{}` for dict. A Python dict is for key-value mapping, but the key must be **hashable**, such as a number or a string. Hence we can do the following:   ```", "```py    Adding a key-value mapping to a dict is similar to indexing a list:   ```", "```py    We can check if a key is in a dict using the \\codetext{in} operator, for example:   ```", "```py    But in Python dict, we can use the \\codetext{get()} function to give us a default value if the key is not found:   ```", "```py    But indeed, you are not required to provide a default to \\codetext{get()}. If you omitted it, it will return \\codetext{None}. For example:   ```", "```py    It will produce   ```", "```py    Since the Python dict is a key-value mapping, we can extract only the keys or only the values, using:   ```", "```py    We used `list()` to convert the keys or values to a list for better printing. % The other way to manipulate a list is with the `items()` function. Its result would be key-value pairs:   ```", "```py    This prints:   ```", "```py    Since they are pairs in a list, we can use list manipulation syntax to combine items from two dicts and produce a combined dict. The following is an example:   ```", "```py    This will print:   ```", "```py    ### Your Task    Depending on your version of Python, the last example above can have a simplified syntax:   ```", "```py    Check in your installation if you can reproduce the same result as the last example.    In the next lesson, you will discover the tuple as a read-only list.    ## Lesson 03: Tuples    In this lesson, you will learn the tuple as a read-only data structure.    Python has a list that behaves like an array of mixed data. A Python tuple is very much like a list, but it cannot be modified after it is created. It is **immutable**. Creating a tuple is just like creating a list, except using parentheses, `()`:   ```", "```py    You can refer to the first element as `x[0]` just like the case of a list. But you cannot assign a new value to `x[0]` because a tuple is immutable. If you try to do it, Python will throw a TypeError with the reason that the tuple does not support the item assignment.    A tuple is handy to represent multiple return values of a function. For example, the following function produces a value’s multiple powers as a tuple:   ```", "```py    This will print:   ```", "```py    which is a tuple. But we usually use the unpacking syntax:   ```", "```py    In fact, this is a powerful syntax in Python in which we can assign multiple variables in one line. For example,   ```", "```py    This will assign variable `count` to integer `0` and variable `elements` to an empty list. Because of the unpacking syntax, this is the **Pythonic** way of swapping the value of two variables:   ```", "```py    ### Your Task    Consider a list of tuples:   ```", "```py    You can sort this list using `sorted(x)`. What is the result? From the result of comparing tuples, how does Python understand which tuple is less than or greater than another? Which is greater, the tuple `(\"alpha\", 0.5)` or the tuple `(\"alpha\", 0.5, 1)`?    Post your answer in the comments below. I would love to see what you come up with.    In the next lesson, you will learn about Python strings.    ## Lesson 04: Strings    In this lesson, you will learn about creating and using strings in Python.    A string is the basic way of storing text in Python. All Python strings are unicode strings, meaning you can put unicode into it. For example:   ```", "```py    The smiley is a unicode character of code point 0x1F600\\. Python string comes with a lot of functions. For example, we can check if a string begins or ends with a substring using:   ```", "```py    Then to check whether a string contains a substring, use the “`in`” operator:   ```", "```py    There is a lot more. Such as `split()` to split a string, or `upper()` to convert the entire string into uppercase.    One special property of Python strings is the **implicit concatenation**. All of the following produce the string `\"hello world\"`:   ```", "```py    The rule is, Python will normally use `\\` as a line continuation. But if Python sees two strings placed together without anything separating them, the strings will be concatenated. Hence the first example above is to concatenate `\"hel\"` with `\"lo world\"`. Likewise, the last example concatenated two strings because they are placed inside parentheses.    A Python string can also be created using a template. It is often seen in `print()` functions. For example, below all produce `\"hello world\"` for variable `y`:   ```", "```py    ### Your Task    Try to run this code:   ```", "```py    This is to fill a template using a dictionary. The first uses the `%`-syntax while the second uses format syntax. Can you modify the code above to print only 2 decimal places? Hints: Check out [https://docs.python.org/3/library/string.html](https://docs.python.org/3/library/string.html)!    Post your answer in the comments below. I would love to see what you come up with.    In the next lesson, you will discover list comprehension syntax in Python.    ## Lesson 05: List Comprehension    In this lesson, you will see how list comprehension syntax can build a list on the fly.    The famous fizz-buzz problem prints 1 to 100 with all 3-multiples replaced with “fizz,” all 5-multiples replaced with “buzz,” and if a number is both a multiple of 3 and 5, print “fizzbuzz.” You can make a `for` loop and some `if` statements to do this. But we can also do it in one line:   ```", "```py    We set up the list `numbers` using list comprehension syntax. The syntax looks like a list but with a `for` inside. Before the keyword `for`, we define how each element in the list will be created.    List comprehension can be more complicated. For example, this is how to produce all multiples of 3 from 1 to 100:   ```", "```py    And this is how we can print a $10\\times 10$ multiplication table:   ```", "```py    And this is how we can combine strings:   ```", "```py    This prints:   ```", "```py    ### Your Task    Python also has a dictionary comprehension. The syntax is:   ```", "```py    Now try to create a dictionary `mapping` using dictionary comprehension that maps a string `x` to its length `len(x)` for these strings:   ```", "```py    Post your answer in the comments below. I would love to see what you come up with.    In the next lesson, you will discover two very useful Python functions: `enumerate()` and `zip()`.    ## Lesson 06: Enumerate and Zip    In this lesson, you will learn an the `enumerate()` function and `zip()` function.    Very often, you will see you’re writing a for-loop like this:   ```", "```py    But here we need the loop variable `n` just to use as an index to access the list `x`. In this case, we can ask Python to index the list while doing the loop, using `enumerate()`:   ```", "```py    The result of `enumerate()` produces a tuple of the counter (default starts with zero) and the element of the list. We use the unpacking syntax to set it to two variables.    If we use the for-loop like this:   ```", "```py    Python has a function `zip()` to help:   ```", "```py    The `zip()` function is like a zipper, taking one element from each input list and putting them side by side. You may provide more than two lists to `zip()`. It will produce all matching items (i.e., stop whenever it hits the end of the shortest input list).    ### Your task    Very common in Python programs, we may do this:   ```", "```py    Then, we can get the list of 1 to 10, the square of them, and the cube of them using `zip()` (note the `*` before `results` in the argument):   ```", "```py    Try this out. Can you recombine `numbers`, `squares`, and `cubes` back to `results`? Hints: Just use `zip()`.    In the next lesson, you will discover three more Python functions: `map()`, `filter()`, and `reduce()`.    ## Lesson 07: Map, Filter, and Reduce    In this lesson, you will learn the Python functions `map()`, `filter()`, and `reduce()`.    The name of these three functions came from the functional programming paradigm. In simple terms, `map()` is to transform elements of a list using some function, and `filter()` is to short list the elements based on certain criteria. If you learned list comprehension, they are just another method of list comprehension.    Let’s consider an example we saw previously:   ```", "```py    Here we have a function defined, and `map()` uses the function as the first argument and a list as the second argument. It will take each element from a list and transform it using the provided function.    Using `filter()` is likewise:   ```", "```py    If that’s appropriate, you can pass the return value from `map()` to `filter()` or vice versa.    You may consider `map()` and `filter()` as another way to write list comprehension (sometimes easier to read as the logic is modularized). The `reduce()` function is not replaceable by list comprehension. It scans the elements from a list and combines them using a function.    While Python has a `max()` function built-in, we can use `reduce()` for the same purpose. Note that `reduce()` is a function from the module `functools`:   ```", "```py    By default, `reduce()` will give the first two elements to the provided function, then the result will be passed to the function again with the third element, and so on until the input list is exhausted. But there is another way to invoke `reduce()`:   ```", "```py    This result is the same, but the first call to the function uses the default value (`-float(\"inf\")` in this case, which is negative infinity) and the first element of the list. Then uses the result and the second element from the list, and so on. Providing a default value is appropriate in some cases, such as the exercise below.    ### Your Task    Let’s consider a way to convert a bitmap to an integer. If a list `[6,2,0,3]` is provided, we should consider the list as which bit to assert, and the result should be in binary, 1001101, or in decimal, 77\\. In this case, bit 0 is defined to be the least significant bit or the right most bit.    We can use reduce to do this and print 77:   ```", "```py    What should be the `???` above? Why?    Post your answer in the comments below. I would love to see what you come up with.    This was the final lesson.    ## The End! (*Look How Far You Have Come*)    You made it. Well done!    Take a moment and look back at how far you have come.    You discovered:    *   Python list and the slicing syntax *   Python dictionary, how to use it, and how to combine two dictionaries *   Tuples, the unpacking syntax, and how to use it to swap variables *   Strings, including many ways to create a new string from a template *   List comprehension *   The use of functions `enumerate()` and `zip()` *   How to use `map()`, `filter()`, and `reduce()`    ## Summary    **How did you do with the mini-course?** Did you enjoy this crash course?    **Do you have any questions? Were there any sticking points?** Let me know. Leave a comment below. ```"]