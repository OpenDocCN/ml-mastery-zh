["```py\nimport torch\nimport numpy as np \nimport pandas as pd\n```", "```py\nint_to_tensor = torch.tensor([10, 11, 12, 13])\nprint(\"Tensor object type after conversion: \", int_to_tensor.dtype)\nprint(\"Tensor object type after conversion: \", int_to_tensor.type())\n```", "```py\nTensor object type after conversion:  torch.int64\nTensor object type after conversion:  torch.LongTensor\n```", "```py\nfloat_to_tensor = torch.tensor([10.0, 11.0, 12.0, 13.0])\nprint(\"Tensor object type after conversion: \", float_to_tensor.dtype)\nprint(\"Tensor object type after conversion: \", float_to_tensor.type())\n```", "```py\nTensor object type after conversion:  torch.float32\nTensor object type after conversion:  torch.FloatTensor\n```", "```py\nint_list_to_float_tensor = torch.FloatTensor([10, 11, 12, 13])\nint_list_to_float_tensor.type()\nprint(\"Tensor  type after conversion: \", int_list_to_float_tensor.type())\n```", "```py\nTensor  type after conversion:  torch.FloatTensor\n```", "```py\nprint(\"Size of the int_list_to_float_tensor: \", int_list_to_float_tensor.size())\nprint(\"Dimensions of the int_list_to_float_tensor: \",int_list_to_float_tensor.ndimension())\n```", "```py\nSize of the int_list_to_float_tensor:  torch.Size([4])\nDimensions of the int_list_to_float_tensor:  1\n```", "```py\nreshaped_tensor = int_list_to_float_tensor.view(4, 1)\nprint(\"Original Size of the tensor: \", reshaped_tensor)\nprint(\"New size of the tensor: \", reshaped_tensor)\n```", "```py\nOriginal Size of the tensor:  tensor([[10.],\n        [11.],\n        [12.],\n        [13.]])\nNew size of the tensor:  tensor([[10.],\n        [11.],\n        [12.],\n        [13.]])\n```", "```py\nnumpy_arr = np.array([10.0, 11.0, 12.0, 13.0])\nfrom_numpy_to_tensor = torch.from_numpy(numpy_arr)\n\nprint(\"dtype of the tensor: \", from_numpy_to_tensor.dtype)\nprint(\"type of the tensor: \", from_numpy_to_tensor.type())\n```", "```py\ndtype of the tensor:  torch.float64\ntype of the tensor:  torch.DoubleTensor\n```", "```py\ntensor_to_numpy = from_numpy_to_tensor.numpy()\nprint(\"back to numpy from tensor: \", tensor_to_numpy)\nprint(\"dtype of converted numpy array: \", tensor_to_numpy.dtype)\n```", "```py\nback to numpy from tensor:  [10\\. 11\\. 12\\. 13.]\ndtype of converted numpy array:  float64\n```", "```py\npandas_series=pd.Series([1, 0.2, 3, 13.1])\nstore_with_numpy=torch.from_numpy(pandas_series.values)\nprint(\"Stored tensor in numpy array: \", store_with_numpy)\nprint(\"dtype of stored tensor: \", store_with_numpy.dtype)\nprint(\"type of stored tensor: \", store_with_numpy.type())\n```", "```py\nStored tensor in numpy array:  tensor([ 1.0000,  0.2000,  3.0000, 13.1000], dtype=torch.float64)\ndtype of stored tensor:  torch.float64\ntype of stored tensor:  torch.DoubleTensor\n```", "```py\nnew_tensor=torch.tensor([10, 11, 12, 13]) \nprint(\"the second item is\",new_tensor[1].item())\ntensor_to_list=new_tensor.tolist()\nprint('tensor:', new_tensor,\"\\nlist:\",tensor_to_list)\n```", "```py\nthe second item is 11\ntensor: tensor([10, 11, 12, 13])\nlist: [10, 11, 12, 13]\n```", "```py\ntensor_index = torch.tensor([0, 1, 2, 3])\nprint(\"Check value at index 0:\",tensor_index[0])\nprint(\"Check value at index 3:\",tensor_index[3])\n```", "```py\nCheck value at index 0: tensor(0)\nCheck value at index 3: tensor(3)\n```", "```py\nexample_tensor = torch.tensor([50, 11, 22, 33, 44])\nsclicing_tensor = example_tensor[1:4]\nprint(\"example tensor : \", example_tensor)\nprint(\"subset of example tensor:\", sclicing_tensor)\n```", "```py\nexample tensor :  tensor([50, 11, 22, 33, 44])\nsubset of example tensor: tensor([11, 22, 33])\n```", "```py\nprint(\"value at index 3 of example tensor:\", example_tensor[3])\nexample_tensor[3] = 0\nprint(\"new tensor:\", example_tensor)\n```", "```py\nvalue at index 3 of example tensor: tensor(0)\nnew tensor: tensor([50, 11, 22,  0, 44])\n```", "```py\nsample_tensor = torch.tensor([5, 4, 3, 2, 1])\nmin_value = sample_tensor.min()\nmax_value = sample_tensor.max()\nprint(\"check minimum value in the tensor: \", min_value)\nprint(\"check maximum value in the tensor: \", max_value)\n```", "```py\ncheck minimum value in the tensor:  tensor(1)\ncheck maximum value in the tensor:  tensor(5)\n```", "```py\nmean_std_tensor = torch.tensor([-1.0, 2.0, 1, -2])\nMean = mean_std_tensor.mean()\nprint(\"mean of mean_std_tensor: \", Mean)\nstd_dev = mean_std_tensor.std()\nprint(\"standard deviation of mean_std_tensor: \", std_dev)\n```", "```py\nmean of mean_std_tensor:  tensor(0.)\nstandard deviation of mean_std_tensor:  tensor(1.8257)\n```", "```py\na = torch.tensor([1, 1])\nb = torch.tensor([2, 2])\n\nadd = a + b\nmultiply = a * b\n\nprint(\"addition of two tensors: \", add)\nprint(\"multiplication of two tensors: \", multiply)\n```", "```py\naddition of two tensors:  tensor([3, 3])\nmultiplication of two tensors:  tensor([2, 2])\n```", "```py\nimport torch\nimport numpy as np\nimport pandas as pd\n\nint_to_tensor = torch.tensor([10, 11, 12, 13])\nprint(\"Tensor object type after conversion: \", int_to_tensor.dtype)\nprint(\"Tensor object type after conversion: \", int_to_tensor.type())\n\nfloat_to_tensor = torch.tensor([10.0, 11.0, 12.0, 13.0])\nprint(\"Tensor object type after conversion: \", float_to_tensor.dtype)\nprint(\"Tensor object type after conversion: \", float_to_tensor.type())\n\nint_list_to_float_tensor = torch.FloatTensor([10, 11, 12, 13])\nint_list_to_float_tensor.type()\nprint(\"Tensor  type after conversion: \", int_list_to_float_tensor.type())\n\nprint(\"Size of the int_list_to_float_tensor: \", int_list_to_float_tensor.size())\nprint(\"Dimensions of the int_list_to_float_tensor: \",int_list_to_float_tensor.ndimension())\n\nreshaped_tensor = int_list_to_float_tensor.view(4, 1)\nprint(\"Original Size of the tensor: \", reshaped_tensor)\nprint(\"New size of the tensor: \", reshaped_tensor)\n\nnumpy_arr = np.array([10.0, 11.0, 12.0, 13.0])\nfrom_numpy_to_tensor = torch.from_numpy(numpy_arr)\nprint(\"dtype of the tensor: \", from_numpy_to_tensor.dtype)\nprint(\"type of the tensor: \", from_numpy_to_tensor.type())\n\ntensor_to_numpy = from_numpy_to_tensor.numpy()\nprint(\"back to numpy from tensor: \", tensor_to_numpy)\nprint(\"dtype of converted numpy array: \", tensor_to_numpy.dtype)\n\npandas_series=pd.Series([1, 0.2, 3, 13.1])\nstore_with_numpy=torch.from_numpy(pandas_series.values)\nprint(\"Stored tensor in numpy array: \", store_with_numpy)\nprint(\"dtype of stored tensor: \", store_with_numpy.dtype)\nprint(\"type of stored tensor: \", store_with_numpy.type())\n\nnew_tensor=torch.tensor([10, 11, 12, 13]) \nprint(\"the second item is\",new_tensor[1].item())\ntensor_to_list=new_tensor.tolist()\nprint('tensor:', new_tensor,\"\\nlist:\",tensor_to_list)\n\ntensor_index = torch.tensor([0, 1, 2, 3])\nprint(\"Check value at index 0:\",tensor_index[0])\nprint(\"Check value at index 3:\",tensor_index[3])\n\nexample_tensor = torch.tensor([50, 11, 22, 33, 44])\nsclicing_tensor = example_tensor[1:4]\nprint(\"example tensor : \", example_tensor)\nprint(\"subset of example tensor:\", sclicing_tensor)\n\nprint(\"value at index 3 of example tensor:\", example_tensor[3])\nexample_tensor[3] = 0\nprint(\"new tensor:\", example_tensor)\n\nsample_tensor = torch.tensor([5, 4, 3, 2, 1])\nmin_value = sample_tensor.min()\nmax_value = sample_tensor.max()\nprint(\"check minimum value in the tensor: \", min_value)\nprint(\"check maximum value in the tensor: \", max_value)\n\nmean_std_tensor = torch.tensor([-1.0, 2.0, 1, -2])\nMean = mean_std_tensor.mean()\nprint(\"mean of mean_std_tensor: \", Mean)\nstd_dev = mean_std_tensor.std()\nprint(\"standard deviation of mean_std_tensor: \", std_dev)\n\na = torch.tensor([1, 1])\nb = torch.tensor([2, 2])\nadd = a + b\nmultiply = a * b\nprint(\"addition of two tensors: \", add)\nprint(\"multiplication of two tensors: \", multiply)\n```"]