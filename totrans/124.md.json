["```py\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision\n\ntransform = torchvision.transforms.Compose([torchvision.transforms.ToTensor()])\n\ntrainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\ntestset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n\nbatch_size = 32\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True)\ntestloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True)\n\nclass CIFAR10Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 32, kernel_size=(3,3), stride=1, padding=1)\n        self.act1 = nn.ReLU()\n        self.drop1 = nn.Dropout(0.3)\n\n        self.conv2 = nn.Conv2d(32, 32, kernel_size=(3,3), stride=1, padding=1)\n        self.act2 = nn.ReLU()\n        self.pool2 = nn.MaxPool2d(kernel_size=(2, 2))\n\n        self.flat = nn.Flatten()\n\n        self.fc3 = nn.Linear(8192, 512)\n        self.act3 = nn.ReLU()\n        self.drop3 = nn.Dropout(0.5)\n\n        self.fc4 = nn.Linear(512, 10)\n\n    def forward(self, x):\n        # input 3x32x32, output 32x32x32\n        x = self.act1(self.conv1(x))\n        x = self.drop1(x)\n        # input 32x32x32, output 32x32x32\n        x = self.act2(self.conv2(x))\n        # input 32x32x32, output 32x16x16\n        x = self.pool2(x)\n        # input 32x16x16, output 8192\n        x = self.flat(x)\n        # input 8192, output 512\n        x = self.act3(self.fc3(x))\n        x = self.drop3(x)\n        # input 512, output 10\n        x = self.fc4(x)\n        return x\n\nmodel = CIFAR10Model()\nloss_fn = nn.CrossEntropyLoss()\noptimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)\n\nn_epochs = 20\nfor epoch in range(n_epochs):\n    for inputs, labels in trainloader:\n        # forward, backward, and then weight update\n        y_pred = model(inputs)\n        loss = loss_fn(y_pred, labels)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n    acc = 0\n    count = 0\n    for inputs, labels in testloader:\n        y_pred = model(inputs)\n        acc += (torch.argmax(y_pred, 1) == labels).float().sum()\n        count += len(labels)\n    acc /= count\n    print(\"Epoch %d: model accuracy %.2f%%\" % (epoch, acc*100))\n\ntorch.save(model.state_dict(), \"cifar10model.pth\")\n```", "```py\n...\ntransform = torchvision.transforms.Compose([torchvision.transforms.ToTensor()])\n\ntrainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\ntestset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n```", "```py\n...\nacc += (torch.argmax(y_pred, 1) == labels).float().sum()\n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.imshow(trainset.data[7])\nplt.show()\n```", "```py\nX = torch.tensor([trainset.data[7]], dtype=torch.float32).permute(0,3,1,2)\nmodel.eval()\nwith torch.no_grad():\n    feature_maps = model.conv1(X)\n```", "```py\nfig, ax = plt.subplots(4, 8, sharex=True, sharey=True, figsize=(16,8))\nfor i in range(0, 32):\n    row, col = i//8, i%8\n    ax[row][col].imshow(feature_maps[0][i])\nplt.show()\n```", "```py\nX = torch.tensor([trainset.data[7]], dtype=torch.float32).permute(0,3,1,2)\n\nmodel.eval()\nwith torch.no_grad():\n    feature_maps = model.act1(model.conv1(X))\n    feature_maps = model.drop1(feature_maps)\n    feature_maps = model.conv2(feature_maps)\n\nfig, ax = plt.subplots(4, 8, sharex=True, sharey=True, figsize=(16,8))\nfor i in range(0, 32):\n    row, col = i//8, i%8\n    ax[row][col].imshow(feature_maps[0][i])\nplt.show()\n```", "```py\nimport torch\nimport torch.nn as nn\nimport torchvision\nimport matplotlib.pyplot as plt\n\ntrainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True)\n\nclass CIFAR10Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 32, kernel_size=(3,3), stride=1, padding=1)\n        self.act1 = nn.ReLU()\n        self.drop1 = nn.Dropout(0.3)\n\n        self.conv2 = nn.Conv2d(32, 32, kernel_size=(3,3), stride=1, padding=1)\n        self.act2 = nn.ReLU()\n        self.pool2 = nn.MaxPool2d(kernel_size=(2, 2))\n\n        self.flat = nn.Flatten()\n\n        self.fc3 = nn.Linear(8192, 512)\n        self.act3 = nn.ReLU()\n        self.drop3 = nn.Dropout(0.5)\n\n        self.fc4 = nn.Linear(512, 10)\n\n    def forward(self, x):\n        # input 3x32x32, output 32x32x32\n        x = self.act1(self.conv1(x))\n        x = self.drop1(x)\n        # input 32x32x32, output 32x32x32\n        x = self.act2(self.conv2(x))\n        # input 32x32x32, output 32x16x16\n        x = self.pool2(x)\n        # input 32x16x16, output 8192\n        x = self.flat(x)\n        # input 8192, output 512\n        x = self.act3(self.fc3(x))\n        x = self.drop3(x)\n        # input 512, output 10\n        x = self.fc4(x)\n        return x\n\nmodel = CIFAR10Model()\nmodel.load_state_dict(torch.load(\"cifar10model.pth\"))\n\nplt.imshow(trainset.data[7])\nplt.show()\n\nX = torch.tensor([trainset.data[7]], dtype=torch.float32).permute(0,3,1,2)\nmodel.eval()\nwith torch.no_grad():\n    feature_maps = model.conv1(X)\nfig, ax = plt.subplots(4, 8, sharex=True, sharey=True, figsize=(16,8))\nfor i in range(0, 32):\n    row, col = i//8, i%8\n    ax[row][col].imshow(feature_maps[0][i])\nplt.show()\n\nwith torch.no_grad():\n    feature_maps = model.act1(model.conv1(X))\n    feature_maps = model.drop1(feature_maps)\n    feature_maps = model.conv2(feature_maps)\nfig, ax = plt.subplots(4, 8, sharex=True, sharey=True, figsize=(16,8))\nfor i in range(0, 32):\n    row, col = i//8, i%8\n    ax[row][col].imshow(feature_maps[0][i])\nplt.show()\n```"]