["```py\nimport torch\ntorch.manual_seed(42)\n\nxrange = torch.range(-50, 50, 0.5)\nsig_func = torch.nn.Sigmoid()\ny_pred = sig_func(xrange)\n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.plot(xrange.numpy(), y_pred.numpy())\nplt.xlabel('range')\nplt.ylabel('y_pred')\nplt.show()\n```", "```py\n...\nlog_regr = torch.nn.Sequential(torch.nn.Linear(1, 1), torch.nn.Sigmoid())\n```", "```py\n...\nprint(list(log_regr.parameters()))\n```", "```py\n[Parameter containing:\ntensor([[0.7645]], requires_grad=True), Parameter containing:\ntensor([0.8300], requires_grad=True)]\n```", "```py\nx = torch.tensor([[1], [2], [3], [4]], dtype=torch.float32)\n```", "```py\ny_pred = log_regr(x)\nprint(\"here is model prediction: \", y_pred)\n```", "```py\nhere is model prediction:  tensor([[0.8313],\n        [0.9137],\n        [0.9579],\n        [0.9799]], grad_fn=<SigmoidBackward0>)\n```", "```py\nimport matplotlib.pyplot as plt\nimport torch\ntorch.manual_seed(42)\n\nxrange = torch.range(-50, 50, 0.5)\nsig_func = torch.nn.Sigmoid()\ny_pred = sig_func(xrange)\nplt.plot(xrange.numpy(), y_pred.numpy())\nplt.xlabel('range')\nplt.ylabel('y_pred')\nplt.show()\n\nlog_regr = torch.nn.Sequential(torch.nn.Linear(1, 1), torch.nn.Sigmoid())\nprint(list(log_regr.parameters()))\n\nx = torch.tensor([[1], [2], [3], [4]], dtype=torch.float32)\ny_pred = log_regr(x)\nprint(\"here is model prediction: \", y_pred)\n```", "```py\n# build custom module for logistic regression\nclass LogisticRegression(torch.nn.Module):    \n    # build the constructor\n    def __init__(self, n_inputs):\n        super(LogisticRegression, self).__init__()\n        self.linear = torch.nn.Linear(n_inputs, 1)\n\n    # make predictions\n    def forward(self, x):\n        y_pred = torch.sigmoid(self.linear(x))\n        return y_pred\n```", "```py\n...\nlog_regr_cus = LogisticRegression(1)\n```", "```py\n...\ny_pred = log_regr_cus(x)\nprint(\"here is model prediction: \", y_pred)\n```", "```py\nhere is model prediction:  tensor([[0.6647],\n        [0.6107],\n        [0.5537],\n        [0.4954]], grad_fn=<SigmoidBackward0>)\n```", "```py\nimport torch\ntorch.manual_seed(42)\n\n# build custom module for logistic regression\nclass LogisticRegression(torch.nn.Module):    \n    # build the constructor\n    def __init__(self, n_inputs):\n        super(LogisticRegression, self).__init__()\n        self.linear = torch.nn.Linear(n_inputs, 1)\n\n    # make predictions\n    def forward(self, x):\n        y_pred = torch.sigmoid(self.linear(x))\n        return y_pred\n\nx = torch.tensor([[1], [2], [3], [4]], dtype=torch.float32)\nlog_regr_cus = LogisticRegression(1)\ny_pred = log_regr_cus(x)\nprint(\"here is model prediction: \", y_pred)\n```"]