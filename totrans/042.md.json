["```py\n# Import the necessary libraries & load the dataset\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nAmes = pd.read_csv('Ames.csv')\n\n# Define feature names in full form for titles and axis\nfeature_names_full = {\n    'LotArea': 'Lot Area (sq ft)',\n    'SalePrice': 'Sales Price (US$)',\n    'TotRmsAbvGrd': 'Total Rooms Above Ground'\n}\n\nplt.figure(figsize=(18, 6))\nfeatures = ['LotArea', 'SalePrice', 'TotRmsAbvGrd']\n\nfor i, feature in enumerate(features, 1):\n    plt.subplot(1, 3, i)\n    sns.boxplot(y=Ames[feature], color=\"lightblue\")\n    plt.title(feature_names_full[feature], fontsize=16)\n    plt.ylabel(feature_names_full[feature], fontsize=14)\n    plt.xlabel('')  # Removing the x-axis label as it's not needed\n\nplt.tight_layout()\nplt.show()\n```", "```py\ndef detect_outliers_iqr_summary(dataframe, features):\n    outliers_summary = {}\n\n    for feature in features:\n        data = dataframe[feature]\n        Q1 = data.quantile(0.25)\n        Q3 = data.quantile(0.75)\n        IQR = Q3 - Q1\n        lower_bound = Q1 - 1.5 * IQR\n        upper_bound = Q3 + 1.5 * IQR\n        outliers = data[(data < lower_bound) | (data > upper_bound)]\n        outliers_summary[feature] = len(outliers)\n\n    return outliers_summary\n\noutliers_summary = detect_outliers_iqr_summary(Ames, features)\nprint(outliers_summary)\n```", "```py\n{'LotArea': 113, 'SalePrice': 116, 'TotRmsAbvGrd': 35}\n```", "```py\n# Define a function to detect outliers using the Gaussian model\ndef detect_outliers_gaussian(dataframe, features, threshold=3):\n    outliers_summary = {}\n\n    for feature in features:\n        data = dataframe[feature]\n        mean = data.mean()\n        std_dev = data.std()\n        outliers = data[(data < mean - threshold * std_dev) | (data > mean + threshold * std_dev)]\n        outliers_summary[feature] = len(outliers)\n\n        # Visualization\n        plt.figure(figsize=(12, 6))\n        sns.histplot(data, color=\"lightblue\")\n        plt.axvline(mean, color='r', linestyle='-', label=f'Mean: {mean:.2f}')\n        plt.axvline(mean - threshold * std_dev, color='y', linestyle='--', label=f'â€”{threshold} std devs')\n        plt.axvline(mean + threshold * std_dev, color='g', linestyle='--', label=f'+{threshold} std devs')\n\n        # Annotate upper 3rd std dev value\n        annotate_text = f'{mean + threshold * std_dev:.2f}'\n        plt.annotate(annotate_text, xy=(mean + threshold * std_dev, 0),\n                     xytext=(mean + (threshold + 1.45) * std_dev, 50),\n                     arrowprops=dict(facecolor='black', arrowstyle='wedge,tail_width=0.7'),\n                     fontsize=12, ha='center')\n\n        plt.title(f'Distribution of {feature_names_full[feature]} with Outliers', fontsize=16)\n        plt.xlabel(feature_names_full[feature], fontsize=14)\n        plt.ylabel('Frequency', fontsize=14)\n        plt.legend()\n        plt.show()\n\n    return outliers_summary\n\noutliers_gaussian_summary = detect_outliers_gaussian(Ames, features)\nprint(outliers_gaussian_summary)\n```", "```py\n{'LotArea': 24, 'SalePrice': 42, 'TotRmsAbvGrd': 35}\n```", "```py\n# Define a function to tabulate outliers into a DataFrame\ndef create_outliers_dataframes_gaussian(dataframe, features, threshold=3, num_rows=None):\n    outliers_dataframes = {}\n\n    for feature in features:\n        data = dataframe[feature]\n        mean = data.mean()\n        std_dev = data.std()\n        outliers = data[(data < mean - threshold * std_dev) | (data > mean + threshold * std_dev)]\n\n        # Create a new DataFrame for outliers of the current feature\n        outliers_df = dataframe.loc[outliers.index, [feature]].copy()\n        outliers_df.rename(columns={feature: 'Outlier Value'}, inplace=True)\n        outliers_df['Feature'] = feature\n        outliers_df.reset_index(inplace=True)\n\n        # Display specified number of rows (default: full dataframe)\n        outliers_df = outliers_df.head(num_rows) if num_rows is not None else outliers_df\n\n        outliers_dataframes[feature] = outliers_df\n\n    return outliers_dataframes\n\n# Example usage with user-defined number of rows = 7\noutliers_gaussian_dataframes = create_outliers_dataframes_gaussian(Ames, features, num_rows=7)\n\n# Print each DataFrame with the original format and capitalized 'index'\nfor feature, df in outliers_gaussian_dataframes.items():\n    df_reset = df.reset_index().rename(columns={'index': 'Index'})\n    print(f\"Outliers for {feature}:\\n\", df_reset[['Index', 'Feature', 'Outlier Value']])\n    print()\n```", "```py\nOutliers for LotArea:\n    Index  Feature  Outlier Value\n0    104  LotArea          53107\n1    195  LotArea          53227\n2    249  LotArea         159000\n3    309  LotArea          40094\n4    329  LotArea          45600\n5    347  LotArea          50271\n6    355  LotArea         215245\n\nOutliers for SalePrice:\n    Index    Feature  Outlier Value\n0     29  SalePrice         450000\n1     65  SalePrice         615000\n2    103  SalePrice         468000\n3    108  SalePrice         500067\n4    124  SalePrice         475000\n5    173  SalePrice         423000\n6    214  SalePrice         500000\n\nOutliers for TotRmsAbvGrd:\n    Index       Feature  Outlier Value\n0     50  TotRmsAbvGrd             12\n1    165  TotRmsAbvGrd             11\n2    244  TotRmsAbvGrd             11\n3    309  TotRmsAbvGrd             11\n4    407  TotRmsAbvGrd             11\n5    424  TotRmsAbvGrd             13\n6    524  TotRmsAbvGrd             11\n```"]