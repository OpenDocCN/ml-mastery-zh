["```py\npython -m http.server\n```", "```py\nfrom datetime import datetime\nimport pytz\nfrom flask import Flask\n\napp = Flask(\"time now\")\n\n@app.route(\"/now/<path:timezone>\")\ndef timenow(timezone):\n    try:\n        zone = pytz.timezone(timezone)\n        now = datetime.now(zone)\n        return now.strftime(\"%Y-%m-%d %H:%M:%S %z %Z\\n\")\n    except pytz.exceptions.UnknownTimeZoneError:\n        return f\"Unknown time zone: {timezone}\\n\"\n\napp.run()\n```", "```py\n * Serving Flask app 'time now' (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)\n```", "```py\n$ curl http://127.0.0.1:5000/now/Asia/Tokyo\n2022-04-20 13:29:42 +0900 JST\n```", "```py\nfrom datetime import datetime\nimport pytz\nfrom flask import Flask\n\napp = Flask(\"time now\")\n\n@app.route('/now', defaults={'timezone': ''})\n@app.route(\"/now/<path:timezone>\")\ndef timenow(timezone):\n    try:\n        if not timezone:\n            zone = pytz.utc\n        else:\n            zone = pytz.timezone(timezone)\n        now = datetime.now(zone)\n        return now.strftime(\"%Y-%m-%d %H:%M:%S %z %Z\\n\")\n    except pytz.exceptions.UnknownTimeZoneError:\n        return f\"Unknown timezone: {timezone}\\n\"\n\napp.run()\n```", "```py\n$ curl http://127.0.0.1:5000/now/Asia/Tokyo\n2022-04-20 13:37:27 +0900 JST\n$ curl http://127.0.0.1:5000/now/Asia/Tok\nUnknown timezone: Asia/Tok\n$ curl http://127.0.0.1:5000/now\n2022-04-20 04:37:29 +0000 UTC\n```", "```py\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, AveragePooling2D, Flatten\nfrom tensorflow.keras.utils import to_categorical\n\n# Load MNIST digits\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Reshape data to (n_samples, height, width, n_channel)\nX_train = np.expand_dims(X_train, axis=3).astype(\"float32\")\nX_test = np.expand_dims(X_test, axis=3).astype(\"float32\")\n\n# One-hot encode the output\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\n# LeNet5 model\nmodel = Sequential([\n    Conv2D(6, (5,5), activation=\"tanh\",\n           input_shape=(28,28,1), padding=\"same\"),\n    AveragePooling2D((2,2), strides=2),\n    Conv2D(16, (5,5), activation=\"tanh\"),\n    AveragePooling2D((2,2), strides=2),\n    Conv2D(120, (5,5), activation=\"tanh\"),\n    Flatten(),\n    Dense(84, activation=\"tanh\"),\n    Dense(10, activation=\"softmax\")\n])\n\n# Train the model\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, batch_size=32)\n```", "```py\n...\nfrom flask import Flask\nfrom dash import Dash, html, dcc\n\n# default values\nmodel_data = {\n    \"activation\": \"relu\",\n    \"optimizer\": \"adam\",\n    \"epochs\": 100,\n    \"batchsize\": 32,\n}\n...\nserver = Flask(\"mlm\")\napp = Dash(server=server)\napp.layout = html.Div(\n    id=\"parent\",\n    children=[\n        html.H1(\n            children=\"LeNet5 training\",\n            style={\"textAlign\": \"center\"}\n        ),\n        html.Div(\n            className=\"flex-container\",\n            children=[\n                html.Div(children=[\n                    html.Div(id=\"activationdisplay\", children=\"Activation:\"),\n                    dcc.Dropdown(\n                        id=\"activation\",\n                        options=[\n                            {\"label\": \"Rectified linear unit\", \"value\": \"relu\"},\n                            {\"label\": \"Hyperbolic tangent\", \"value\": \"tanh\"},\n                            {\"label\": \"Sigmoidal\", \"value\": \"sigmoid\"},\n                        ],\n                        value=model_data[\"activation\"]\n                    )\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"optimizerdisplay\", children=\"Optimizer:\"),\n                    dcc.Dropdown(\n                        id=\"optimizer\",\n                        options=[\n                            {\"label\": \"Adam\", \"value\": \"adam\"},\n                            {\"label\": \"Adagrad\", \"value\": \"adagrad\"},\n                            {\"label\": \"Nadam\", \"value\": \"nadam\"},\n                            {\"label\": \"Adadelta\", \"value\": \"adadelta\"},\n                            {\"label\": \"Adamax\", \"value\": \"adamax\"},\n                            {\"label\": \"RMSprop\", \"value\": \"rmsprop\"},\n                            {\"label\": \"SGD\", \"value\": \"sgd\"},\n                            {\"label\": \"FTRL\", \"value\": \"ftrl\"},\n                        ],\n                        value=model_data[\"optimizer\"]\n                    ),\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"epochdisplay\", children=\"Epochs:\"),\n                    dcc.Slider(1, 200, 1, marks={1: \"1\", 100: \"100\", 200: \"200\"},\n                               value=model_data[\"epochs\"], id=\"epochs\"),\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"batchdisplay\", children=\"Batch size:\"),\n                    dcc.Slider(1, 128, 1, marks={1: \"1\", 128: \"128\"},\n                               value=model_data[\"batchsize\"], id=\"batchsize\"),\n                ]),\n            ]\n        ),\n        html.Button(id=\"train\", n_clicks=0, children=\"Train\"),\n    ]\n)\n```", "```py\n.flex-container {\n    display: flex;\n    padding: 5px;\n    flex-wrap: nowrap;\n    background-color: #EEEEEE;\n}\n\n.flex-container > * {\n    flex-grow: 1\n}\n```", "```py\n...\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, AveragePooling2D, Flatten\nfrom tensorflow.keras.callbacks import EarlyStopping\n\ndef train():\n    activation = model_data[\"activation\"]\n    model = Sequential([\n        Conv2D(6, (5, 5), activation=activation,\n               input_shape=(28, 28, 1), padding=\"same\"),\n        AveragePooling2D((2, 2), strides=2),\n        Conv2D(16, (5, 5), activation=activation),\n        AveragePooling2D((2, 2), strides=2),\n        Conv2D(120, (5, 5), activation=activation),\n        Flatten(),\n        Dense(84, activation=activation),\n        Dense(10, activation=\"softmax\")\n    ])\n    model.compile(loss=\"categorical_crossentropy\",\n                  optimizer=model_data[\"optimizer\"],\n                  metrics=[\"accuracy\"])\n    earlystop = EarlyStopping(monitor=\"val_loss\", patience=3,\n                              restore_best_weights=True)\n    history = model.fit(\n            X_train, y_train, validation_data=(X_test, y_test),\n            epochs=model_data[\"epochs\"],\n            batch_size=model_data[\"batchsize\"],\n            verbose=0, callbacks=[earlystop])\n    return model, history\n```", "```py\n...\nimport pandas as pd\nimport plotly.express as px\nfrom dash.dependencies import Input, Output, State\n\n...\napp.layout = html.Div(\n    id=\"parent\",\n    children=[\n        ...\n        html.Button(id=\"train\", n_clicks=0, children=\"Train\"),\n        dcc.Graph(id=\"historyplot\"),\n    ]\n)\n\n...\n@app.callback(Output(\"historyplot\", \"figure\"),\n              Input(\"train\", \"n_clicks\"),\n              State(\"activation\", \"value\"),\n              State(\"optimizer\", \"value\"),\n              State(\"epochs\", \"value\"),\n              State(\"batchsize\", \"value\"),\n              prevent_initial_call=True)\ndef train_action(n_clicks, activation, optimizer, epoch, batchsize):\n    model_data.update({\n        \"activation\": activation,\n        \"optimizer\": optimizer,\n        \"epoch\": epoch,\n        \"batchsize\": batchsize,\n    })\n    model, history = train()\n    model_data[\"model\"] = model  # keep the trained model\n    history = pd.DataFrame(history.history)\n    fig = px.line(history, title=\"Model training metrics\")\n    fig.update_layout(xaxis_title=\"epochs\",\n                      yaxis_title=\"metric value\", legend_title=\"metrics\")\n    return fig\n```", "```py\n...\n\n@app.callback(Output(component_id=\"epochdisplay\", component_property=\"children\"),\n              Input(component_id=\"epochs\", component_property=\"value\"))\ndef update_epochs(value):\n    return f\"Epochs: {value}\"\n\n@app.callback(Output(\"batchdisplay\", \"children\"),\n              Input(\"batchsize\", \"value\"))\ndef update_batchsize(value):\n    return f\"Batch size: {value}\"\n\n@app.callback(Output(\"activationdisplay\", \"children\"),\n              Input(\"activation\", \"value\"))\ndef update_activation(value):\n    return f\"Activation: {value}\"\n\n@app.callback(Output(\"optimizerdisplay\", \"children\"),\n              Input(\"optimizer\", \"value\"))\ndef update_optimizer(value):\n    return f\"Optimizer: {value}\"\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, AveragePooling2D, Flatten\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nimport plotly.express as px\nfrom dash import Dash, html, dcc\nfrom dash.dependencies import Input, Output, State\nfrom flask import Flask\n\nserver = Flask(\"mlm\")\napp = Dash(server=server)\n# Load MNIST digits\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\nX_train = np.expand_dims(X_train, axis=3).astype(\"float32\")\nX_test = np.expand_dims(X_test, axis=3).astype(\"float32\")\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\nmodel_data = {\n    \"activation\": \"relu\",\n    \"optimizer\": \"adam\",\n    \"epochs\": 100,\n    \"batchsize\": 32,\n}\n\ndef train():\n    activation = model_data[\"activation\"]\n    model = Sequential([\n        Conv2D(6, (5, 5), activation=activation,\n               input_shape=(28, 28, 1), padding=\"same\"),\n        AveragePooling2D((2, 2), strides=2),\n        Conv2D(16, (5, 5), activation=activation),\n        AveragePooling2D((2, 2), strides=2),\n        Conv2D(120, (5, 5), activation=activation),\n        Flatten(),\n        Dense(84, activation=activation),\n        Dense(10, activation=\"softmax\")\n    ])\n    model.compile(loss=\"categorical_crossentropy\",\n                  optimizer=model_data[\"optimizer\"],\n                  metrics=[\"accuracy\"])\n    earlystop = EarlyStopping(monitor=\"val_loss\", patience=3,\n                              restore_best_weights=True)\n    history = model.fit(\n            X_train, y_train, validation_data=(X_test, y_test),\n            epochs=model_data[\"epochs\"],\n            batch_size=model_data[\"batchsize\"],\n            verbose=0, callbacks=[earlystop])\n    return model, history\n\napp.layout = html.Div(\n    id=\"parent\",\n    children=[\n        html.H1(\n            children=\"LeNet5 training\",\n            style={\"textAlign\": \"center\"}\n        ),\n        html.Div(\n            className=\"flex-container\",\n            children=[\n                html.Div(children=[\n                    html.Div(id=\"activationdisplay\"),\n                    dcc.Dropdown(\n                        id=\"activation\",\n                        options=[\n                            {\"label\": \"Rectified linear unit\", \"value\": \"relu\"},\n                            {\"label\": \"Hyperbolic tangent\", \"value\": \"tanh\"},\n                            {\"label\": \"Sigmoidal\", \"value\": \"sigmoid\"},\n                        ],\n                        value=model_data[\"activation\"]\n                    )\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"optimizerdisplay\"),\n                    dcc.Dropdown(\n                        id=\"optimizer\",\n                        options=[\n                            {\"label\": \"Adam\", \"value\": \"adam\"},\n                            {\"label\": \"Adagrad\", \"value\": \"adagrad\"},\n                            {\"label\": \"Nadam\", \"value\": \"nadam\"},\n                            {\"label\": \"Adadelta\", \"value\": \"adadelta\"},\n                            {\"label\": \"Adamax\", \"value\": \"adamax\"},\n                            {\"label\": \"RMSprop\", \"value\": \"rmsprop\"},\n                            {\"label\": \"SGD\", \"value\": \"sgd\"},\n                            {\"label\": \"FTRL\", \"value\": \"ftrl\"},\n                        ],\n                        value=model_data[\"optimizer\"]\n                    ),\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"epochdisplay\"),\n                    dcc.Slider(1, 200, 1, marks={1: \"1\", 100: \"100\", 200: \"200\"},\n                               value=model_data[\"epochs\"], id=\"epochs\"),\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"batchdisplay\"),\n                    dcc.Slider(1, 128, 1, marks={1: \"1\", 128: \"128\"},\n                               value=model_data[\"batchsize\"], id=\"batchsize\"),\n                ]),\n            ]\n        ),\n        html.Button(id=\"train\", n_clicks=0, children=\"Train\"),\n        dcc.Graph(id=\"historyplot\"),\n    ]\n)\n\n@app.callback(Output(component_id=\"epochdisplay\", component_property=\"children\"),\n              Input(component_id=\"epochs\", component_property=\"value\"))\ndef update_epochs(value):\n    model_data[\"epochs\"] = value\n    return f\"Epochs: {value}\"\n\n@app.callback(Output(\"batchdisplay\", \"children\"),\n              Input(\"batchsize\", \"value\"))\ndef update_batchsize(value):\n    model_data[\"batchsize\"] = value\n    return f\"Batch size: {value}\"\n\n@app.callback(Output(\"activationdisplay\", \"children\"),\n              Input(\"activation\", \"value\"))\ndef update_activation(value):\n    model_data[\"activation\"] = value\n    return f\"Activation: {value}\"\n\n@app.callback(Output(\"optimizerdisplay\", \"children\"),\n              Input(\"optimizer\", \"value\"))\ndef update_optimizer(value):\n    model_data[\"optimizer\"] = value\n    return f\"Optimizer: {value}\"\n\n@app.callback(Output(\"historyplot\", \"figure\"),\n              Input(\"train\", \"n_clicks\"),\n              State(\"activation\", \"value\"),\n              State(\"optimizer\", \"value\"),\n              State(\"epochs\", \"value\"),\n              State(\"batchsize\", \"value\"),\n              prevent_initial_call=True)\ndef train_action(n_clicks, activation, optimizer, epoch, batchsize):\n    model_data.update({\n        \"activation\": activation,\n        \"optimizer\": optimizer,\n        \"epcoh\": epoch,\n        \"batchsize\": batchsize,\n    })\n    model, history = train()\n    model_data[\"model\"] = model  # keep the trained model\n    history = pd.DataFrame(history.history)\n    fig = px.line(history, title=\"Model training metrics\")\n    fig.update_layout(xaxis_title=\"epochs\",\n                      yaxis_title=\"metric value\", legend_title=\"metrics\")\n    return fig\n\n# run server, with hot-reloading\napp.run_server(debug=True, threaded=True)\n```", "```py\n...\nfrom tensorflow.keras.callbacks import Callback\n\ntrain_status = {\n    \"running\": False,\n    \"epoch\": 0,\n    \"batch\": 0,\n    \"batch metric\": None,\n    \"last epoch\": None,\n}\n\nclass ProgressCallback(Callback):\n    def on_train_begin(self, logs=None):\n        train_status[\"running\"] = True\n        train_status[\"epoch\"] = 0\n    def on_train_end(self, logs=None):\n        train_status[\"running\"] = False\n    def on_epoch_begin(self, epoch, logs=None):\n        train_status[\"epoch\"] = epoch\n        train_status[\"batch\"] = 0\n    def on_epoch_end(self, epoch, logs=None):\n        train_status[\"last epoch\"] = logs\n    def on_train_batch_begin(self, batch, logs=None):\n        train_status[\"batch\"] = batch\n    def on_train_batch_end(self, batch, logs=None):\n        train_status[\"batch metric\"] = logs\n\ndef train():\n    ...\n    history = model.fit(\n            X_train, y_train, validation_data=(X_test, y_test),\n            epochs=model_data[\"epochs\"],\n            batch_size=model_data[\"batchsize\"],\n            verbose=0, callbacks=[earlystop, ProgressCallback()])\n    return model, history\n```", "```py\n...\n\napp.layout = html.Div(\n    id=\"parent\",\n    children=[\n        ...\n        html.Button(id=\"train\", n_clicks=0, children=\"Train\"),\n        html.Pre(id=\"progressdisplay\"),\n        dcc.Interval(id=\"trainprogress\", n_intervals=0, interval=1000),\n        dcc.Graph(id=\"historyplot\"),\n    ]\n)\n\nimport json\n\n@app.callback(Output(\"progressdisplay\", \"children\"),\n              Input(\"trainprogress\", \"n_intervals\"))\ndef update_progress(n):\n    return json.dumps(train_status, indent=4)\n```", "```py\nimport json\n\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, AveragePooling2D, Flatten\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping\n\nimport plotly.express as px\nfrom dash import Dash, html, dcc\nfrom dash.dependencies import Input, Output, State\nfrom flask import Flask\n\nserver = Flask(\"mlm\")\napp = Dash(server=server)\n\n# Load MNIST digits\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\nX_train = np.expand_dims(X_train, axis=3).astype(\"float32\")\nX_test = np.expand_dims(X_test, axis=3).astype(\"float32\")\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\nmodel_data = {\n    \"activation\": \"relu\",\n    \"optimizer\": \"adam\",\n    \"epochs\": 100,\n    \"batchsize\": 32,\n}\n\ntrain_status = {\n    \"running\": False,\n    \"epoch\": 0,\n    \"batch\": 0,\n    \"batch metric\": None,\n    \"last epoch\": None,\n}\n\nclass ProgressCallback(Callback):\n    def on_train_begin(self, logs=None):\n        train_status[\"running\"] = True\n        train_status[\"epoch\"] = 0\n    def on_train_end(self, logs=None):\n        train_status[\"running\"] = False\n    def on_epoch_begin(self, epoch, logs=None):\n        train_status[\"epoch\"] = epoch\n        train_status[\"batch\"] = 0\n    def on_epoch_end(self, epoch, logs=None):\n        train_status[\"last epoch\"] = logs\n    def on_train_batch_begin(self, batch, logs=None):\n        train_status[\"batch\"] = batch\n    def on_train_batch_end(self, batch, logs=None):\n        train_status[\"batch metric\"] = logs\n\ndef train():\n    activation = model_data[\"activation\"]\n    model = Sequential([\n        Conv2D(6, (5, 5), activation=activation,\n               input_shape=(28, 28, 1), padding=\"same\"),\n        AveragePooling2D((2, 2), strides=2),\n        Conv2D(16, (5, 5), activation=activation),\n        AveragePooling2D((2, 2), strides=2),\n        Conv2D(120, (5, 5), activation=activation),\n        Flatten(),\n        Dense(84, activation=activation),\n        Dense(10, activation=\"softmax\")\n    ])\n    model.compile(loss=\"categorical_crossentropy\",\n                  optimizer=model_data[\"optimizer\"],\n                  metrics=[\"accuracy\"])\n    earlystop = EarlyStopping(monitor=\"val_loss\", patience=3,\n                              restore_best_weights=True)\n    history = model.fit(\n            X_train, y_train, validation_data=(X_test, y_test),\n            epochs=model_data[\"epochs\"],\n            batch_size=model_data[\"batchsize\"],\n            verbose=0, callbacks=[earlystop, ProgressCallback()])\n    return model, history\n\napp.layout = html.Div(\n    id=\"parent\",\n    children=[\n        html.H1(\n            children=\"LeNet5 training\",\n            style={\"textAlign\": \"center\"}\n        ),\n        html.Div(\n            className=\"flex-container\",\n            children=[\n                html.Div(children=[\n                    html.Div(id=\"activationdisplay\"),\n                    dcc.Dropdown(\n                        id=\"activation\",\n                        options=[\n                            {\"label\": \"Rectified linear unit\", \"value\": \"relu\"},\n                            {\"label\": \"Hyperbolic tangent\", \"value\": \"tanh\"},\n                            {\"label\": \"Sigmoidal\", \"value\": \"sigmoid\"},\n                        ],\n                        value=model_data[\"activation\"]\n                    )\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"optimizerdisplay\"),\n                    dcc.Dropdown(\n                        id=\"optimizer\",\n                        options=[\n                            {\"label\": \"Adam\", \"value\": \"adam\"},\n                            {\"label\": \"Adagrad\", \"value\": \"adagrad\"},\n                            {\"label\": \"Nadam\", \"value\": \"nadam\"},\n                            {\"label\": \"Adadelta\", \"value\": \"adadelta\"},\n                            {\"label\": \"Adamax\", \"value\": \"adamax\"},\n                            {\"label\": \"RMSprop\", \"value\": \"rmsprop\"},\n                            {\"label\": \"SGD\", \"value\": \"sgd\"},\n                            {\"label\": \"FTRL\", \"value\": \"ftrl\"},\n                        ],\n                        value=model_data[\"optimizer\"]\n                    ),\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"epochdisplay\"),\n                    dcc.Slider(1, 200, 1, marks={1: \"1\", 100: \"100\", 200: \"200\"},\n                               value=model_data[\"epochs\"], id=\"epochs\"),\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"batchdisplay\"),\n                    dcc.Slider(1, 128, 1, marks={1: \"1\", 128: \"128\"},\n                               value=model_data[\"batchsize\"], id=\"batchsize\"),\n                ]),\n            ]\n        ),\n        html.Button(id=\"train\", n_clicks=0, children=\"Train\"),\n        html.Pre(id=\"progressdisplay\"),\n        dcc.Interval(id=\"trainprogress\", n_intervals=0, interval=1000),\n        dcc.Graph(id=\"historyplot\"),\n    ]\n)\n\n@app.callback(Output(component_id=\"epochdisplay\", component_property=\"children\"),\n              Input(component_id=\"epochs\", component_property=\"value\"))\ndef update_epochs(value):\n    return f\"Epochs: {value}\"\n\n@app.callback(Output(\"batchdisplay\", \"children\"),\n              Input(\"batchsize\", \"value\"))\ndef update_batchsize(value):\n    return f\"Batch size: {value}\"\n\n@app.callback(Output(\"activationdisplay\", \"children\"),\n              Input(\"activation\", \"value\"))\ndef update_activation(value):\n    return f\"Activation: {value}\"\n\n@app.callback(Output(\"optimizerdisplay\", \"children\"),\n              Input(\"optimizer\", \"value\"))\ndef update_optimizer(value):\n    return f\"Optimizer: {value}\"\n\n@app.callback(Output(\"historyplot\", \"figure\"),\n              Input(\"train\", \"n_clicks\"),\n              State(\"activation\", \"value\"),\n              State(\"optimizer\", \"value\"),\n              State(\"epochs\", \"value\"),\n              State(\"batchsize\", \"value\"),\n              prevent_initial_call=True)\ndef train_action(n_clicks, activation, optimizer, epoch, batchsize):\n    model_data.update({\n        \"activation\": activation,\n        \"optimizer\": optimizer,\n        \"epoch\": epoch,\n        \"batchsize\": batchsize,\n    })\n    model, history = train()\n    model_data[\"model\"] = model  # keep the trained model\n    history = pd.DataFrame(history.history)\n    fig = px.line(history, title=\"Model training metrics\")\n    fig.update_layout(xaxis_title=\"epochs\",\n                      yaxis_title=\"metric value\", legend_title=\"metrics\")\n    return fig\n\n@app.callback(Output(\"progressdisplay\", \"children\"),\n              Input(\"trainprogress\", \"n_intervals\"))\ndef update_progress(n):\n    return json.dumps(train_status, indent=4)\n\n# run server, with hot-reloading\napp.run_server(debug=True, threaded=True)\n```", "```py\n...\n@server.route(\"/recognize\", methods=[\"POST\"])\ndef recognize():\n    if not model_data.get(\"model\"):\n        return \"Please train your model.\"\n    matrix = json.loads(request.form[\"matrix\"])\n    matrix = np.asarray(matrix).reshape(1, 28, 28)\n    proba = model_data[\"model\"].predict(matrix).reshape(-1)\n    result = np.argmax(proba)\n    return \"Digit \"+str(result)\n```", "```py\napp.layout = html.Div(\n    id=\"parent\",\n    children=[\n        ...\n        dcc.Graph(id=\"historyplot\"),\n        html.Div(\n            className=\"flex-container\",\n            id=\"predict\",\n            children=[\n                html.Div(\n                    children=html.Canvas(id=\"writing\"),\n                    style={\"textAlign\": \"center\"}\n                ),\n                html.Div(id=\"predictresult\", children=\"?\"),\n                html.Pre(\n                    id=\"lastinput\",\n                ),\n            ]\n        ),\n        html.Div(id=\"dummy\", style={\"display\": \"none\"}),\n    ]\n)\n```", "```py\n...\napp = Dash(server=server,\n           external_scripts=[\n               \"https://code.jquery.com/jquery-3.6.0.min.js\"\n           ])\n```", "```py\nfunction pageinit() {\n\t// Set up canvas object\n\tvar canvas = document.getElementById(\"writing\");\n\tcanvas.width = parseInt($(\"#writing\").css(\"width\"));\n\tcanvas.height = parseInt($(\"#writing\").css(\"height\"));\n\tvar context = canvas.getContext(\"2d\");  // to remember drawing\n\tcontext.strokeStyle = \"#FF0000\";        // draw in bright red\n\tcontext.lineWidth = canvas.width / 15;  // thickness adaptive to canvas size\n\n\t...\n};\n```", "```py\ncanvas#writing {\n    width: 300px;\n    height: 300px;\n    margin: auto;\n    padding: 10px;\n    border: 3px solid #7f7f7f;\n    background-color: #FFFFFF;\n}\n```", "```py\nfunction pageinit() {\n\t...\n\n\t// Canvas reset by timeout\n\tvar timeout = null; // holding the timeout event\n\tvar reset = function() {\n\t\t// clear the canvas\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\t}\n\n\t// Set up drawing with mouse\n\tvar mouse = {x:0, y:0}; // to remember the coordinate w.r.t. canvas\n\tvar onPaint = function() {\n\t\tclearTimeout(timeout);\n\t\t// event handler for mouse move in canvas\n\t\tcontext.lineTo(mouse.x, mouse.y);\n\t\tcontext.stroke();\n\t};\n\n\t// HTML5 Canvas mouse event - in case of desktop browser\n\tcanvas.addEventListener(\"mousedown\", function(e) {\n\t\tclearTimeout(timeout);\n\t\t// mouse down, begin path at current mouse position\n\t\tcontext.moveTo(mouse.x, mouse.y);\n\t\tcontext.beginPath();\n\t\t// all mouse move from now on should be painted\n\t\tcanvas.addEventListener(\"mousemove\", onPaint, false);\n\t}, false);\n\tcanvas.addEventListener(\"mousemove\", function(e) {\n\t\t// mouse move remember position w.r.t. canvas\n\t\tmouse.x = e.pageX - this.offsetLeft;\n\t\tmouse.y = e.pageY - this.offsetTop;\n\t}, false);\n\tcanvas.addEventListener(\"mouseup\", function(e) {\n\t\tclearTimeout(timeout);\n\t\t// all mouse move from now on should NOT be painted\n\t\tcanvas.removeEventListener(\"mousemove\", onPaint, false);\n\t\t// read drawing into image\n\t\tvar img = new Image(); // on load, this will be the canvas in same WxH\n\t\timg.onload = function() {\n\t\t\t// Draw the 28x28 to top left corner of canvas\n\t\t\tcontext.drawImage(img, 0, 0, 28, 28);\n\t\t\t// Extract data: Each pixel becomes a RGBA value, hence 4 bytes each\n\t\t\tvar data = context.getImageData(0, 0, 28, 28).data;\n\t\t\tvar input = [];\n\t\t\tfor (var i=0; i<data.length; i += 4) {\n\t\t\t\t// scan each pixel, extract first byte (R component)\n\t\t\t\tinput.push(data[i]);\n\t\t\t};\n\n\t\t\t// TODO: use \"input\" for prediction\n\t\t};\n\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\ttimeout = setTimeout(reset, 5000); // clear canvas after 5 sec\n\t}, false);\n};\n```", "```py\nfunction pageinit() {\n\tcanvas.addEventListener(\"mouseup\", function(e) {\n\t\t...\n\t\timg.onload = function() {\n            ...\n\t\t\tvar input = [];\n\t\t\tfor (var i=0; i<data.length; i += 4) {\n\t\t\t\t// scan each pixel, extract first byte (R component)\n\t\t\t\tinput.push(data[i]);\n\t\t\t};\n\t\t\tvar matrix = [];\n\t\t\tfor (var i=0; i<input.length; i+=28) {\n\t\t\t\tmatrix.push(input.slice(i, i+28).toString());\n\t\t\t};\n\t\t\t$(\"#lastinput\").html(\"[[\" + matrix.join(\"],<br/>[\") + \"]]\");\n\t\t\t// call predict function with the matrix\n\t\t\tpredict(input);\n\t\t};\n\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\tsetTimeout(reset, 5000); // clear canvas after 5 sec\n\t}, false);\n\n\tfunction predict(input) {\n\t\t$.ajax({\n\t\t\ttype: \"POST\",\n\t\t\turl: \"/recognize\",\n\t\t\tdata: {\"matrix\": JSON.stringify(input)},\n\t\t\tsuccess: function(result) {\n\t\t\t\t$(\"#predictresult\").html(result);\n\t\t\t}\n\t\t});\n\t};\n};\n```", "```py\n...\napp.clientside_callback(\n    \"pageinit\",\n    Output(\"dummy\", \"children\"),\n    Input(\"dummy\", \"children\")\n)\n```", "```py\nfunction pageinit() {\n\t// Set up canvas object\n\tvar canvas = document.getElementById(\"writing\");\n\tcanvas.width = parseInt($(\"#writing\").css(\"width\"));\n\tcanvas.height = parseInt($(\"#writing\").css(\"height\"));\n\tvar context = canvas.getContext(\"2d\");  // to remember drawing\n\tcontext.strokeStyle = \"#FF0000\";        // draw in bright red\n\tcontext.lineWidth = canvas.width / 15;  // thickness adaptive to canvas size\n\n\t// Canvas reset by timeout\n\tvar timeout = null; // holding the timeout event\n\tvar reset = function() {\n\t\t// clear the canvas\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\t}\n\n\t// Set up drawing with mouse\n\tvar mouse = {x:0, y:0}; // to remember the coordinate w.r.t. canvas\n\tvar onPaint = function() {\n\t\tclearTimeout(timeout);\n\t\t// event handler for mousemove in canvas\n\t\tcontext.lineTo(mouse.x, mouse.y);\n\t\tcontext.stroke();\n\t};\n\n\t// HTML5 Canvas mouse event - in case of desktop browser\n\tcanvas.addEventListener(\"mousedown\", function(e) {\n\t\tclearTimeout(timeout);\n\t\t// mousedown, begin path at mouse position\n\t\tcontext.moveTo(mouse.x, mouse.y);\n\t\tcontext.beginPath();\n\t\t// all mousemove from now on should be painted\n\t\tcanvas.addEventListener(\"mousemove\", onPaint, false);\n\t}, false);\n\tcanvas.addEventListener(\"mousemove\", function(e) {\n\t\t// mousemove remember position w.r.t. canvas\n\t\tmouse.x = e.pageX - this.offsetLeft;\n\t\tmouse.y = e.pageY - this.offsetTop;\n\t}, false);\n\tcanvas.addEventListener(\"mouseup\", function(e) {\n\t\tclearTimeout(timeout);\n\t\t// all mousemove from now on should NOT be painted\n\t\tcanvas.removeEventListener(\"mousemove\", onPaint, false);\n\t\t// read drawing into image\n\t\tvar img = new Image(); // on load, this will be the canvas in same WxH\n\t\timg.onload = function() {\n\t\t\t// Draw the 28x28 to top left corner of canvas\n\t\t\tcontext.drawImage(img, 0, 0, 28, 28);\n\t\t\t// Extract data: Each pixel becomes a RGBA value, hence 4 bytes each\n\t\t\tvar data = context.getImageData(0, 0, 28, 28).data;\n\t\t\tvar input = [];\n\t\t\tfor (var i=0; i<data.length; i += 4) {\n\t\t\t\t// scan each pixel, extract first byte (R component)\n\t\t\t\tinput.push(data[i]);\n\t\t\t};\n\t\t\tvar matrix = [];\n\t\t\tfor (var i=0; i<input.length; i+=28) {\n\t\t\t\tmatrix.push(input.slice(i, i+28).toString());\n\t\t\t};\n\t\t\t$(\"#lastinput\").html(\"[[\" + matrix.join(\"],\\n[\") + \"]]\");\n\t\t\t// call predict function with the matrix\n\t\t\tpredict(input);\n\t\t};\n\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\ttimeout = setTimeout(reset, 5000); // clear canvas after 5 sec\n\t}, false);\n\n\tfunction predict(input) {\n\t\t$.ajax({\n\t\t\ttype: \"POST\",\n\t\t\turl: \"/recognize\",\n\t\t\tdata: {\"matrix\": JSON.stringify(input)},\n\t\t\tsuccess: function(result) {\n\t\t\t\t$(\"#predictresult\").html(result);\n\t\t\t}\n\t\t});\n\t};\n};\n```", "```py\n.flex-container {\n    display: flex;\n    padding: 5px;\n    flex-wrap: nowrap;\n    background-color: #EEEEEE;\n}\n\n.flex-container > * {\n    flex-grow: 1\n}\n\ncanvas#writing {\n    width: 300px;\n    height: 300px;\n    margin: auto;\n    padding: 10px;\n    border: 3px solid #7f7f7f;\n    background-color: #FFFFFF;\n}\n\npre#lastinput {\n    font-size: 50%;\n}\n```", "```py\nimport json\n\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Conv2D, Dense, AveragePooling2D, Flatten\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping\n\nimport plotly.express as px\nfrom dash import Dash, html, dcc\nfrom dash.dependencies import Input, Output, State\nfrom flask import Flask, request\n\nserver = Flask(\"mlm\")\napp = Dash(server=server,\n           external_scripts=[\n               \"https://code.jquery.com/jquery-3.6.0.min.js\"\n           ])\n\n# Load MNIST digits\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\nX_train = np.expand_dims(X_train, axis=3).astype(\"float32\")\nX_test = np.expand_dims(X_test, axis=3).astype(\"float32\")\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\nmodel_data = {\n    \"activation\": \"relu\",\n    \"optimizer\": \"adam\",\n    \"epochs\": 100,\n    \"batchsize\": 32,\n    \"model\": load_model(\"lenet5.h5\"),\n}\ntrain_status = {\n    \"running\": False,\n    \"epoch\": 0,\n    \"batch\": 0,\n    \"batch metric\": None,\n    \"last epoch\": None,\n}\n\nclass ProgressCallback(Callback):\n    def on_train_begin(self, logs=None):\n        train_status[\"running\"] = True\n        train_status[\"epoch\"] = 0\n    def on_train_end(self, logs=None):\n        train_status[\"running\"] = False\n    def on_epoch_begin(self, epoch, logs=None):\n        train_status[\"epoch\"] = epoch\n        train_status[\"batch\"] = 0\n    def on_epoch_end(self, epoch, logs=None):\n        train_status[\"last epoch\"] = logs\n    def on_train_batch_begin(self, batch, logs=None):\n        train_status[\"batch\"] = batch\n    def on_train_batch_end(self, batch, logs=None):\n        train_status[\"batch metric\"] = logs\n\ndef train():\n    activation = model_data[\"activation\"]\n    model = Sequential([\n        Conv2D(6, (5, 5), activation=activation,\n               input_shape=(28, 28, 1), padding=\"same\"),\n        AveragePooling2D((2, 2), strides=2),\n        Conv2D(16, (5, 5), activation=activation),\n        AveragePooling2D((2, 2), strides=2),\n        Conv2D(120, (5, 5), activation=activation),\n        Flatten(),\n        Dense(84, activation=activation),\n        Dense(10, activation=\"softmax\")\n    ])\n    model.compile(loss=\"categorical_crossentropy\",\n                  optimizer=model_data[\"optimizer\"],\n                  metrics=[\"accuracy\"])\n    earlystop = EarlyStopping(monitor=\"val_loss\", patience=3,\n                              restore_best_weights=True)\n    history = model.fit(\n            X_train, y_train, validation_data=(X_test, y_test),\n            epochs=model_data[\"epochs\"],\n            batch_size=model_data[\"batchsize\"],\n            verbose=0, callbacks=[earlystop, ProgressCallback()])\n    return model, history\n\napp.layout = html.Div(\n    id=\"parent\",\n    children=[\n        html.H1(\n            children=\"LeNet5 training\",\n            style={\"textAlign\": \"center\"}\n        ),\n        html.Div(\n            className=\"flex-container\",\n            children=[\n                html.Div(children=[\n                    html.Div(id=\"activationdisplay\"),\n                    dcc.Dropdown(\n                        id=\"activation\",\n                        options=[\n                            {\"label\": \"Rectified linear unit\", \"value\": \"relu\"},\n                            {\"label\": \"Hyperbolic tangent\", \"value\": \"tanh\"},\n                            {\"label\": \"Sigmoidal\", \"value\": \"sigmoid\"},\n                        ],\n                        value=model_data[\"activation\"]\n                    )\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"optimizerdisplay\"),\n                    dcc.Dropdown(\n                        id=\"optimizer\",\n                        options=[\n                            {\"label\": \"Adam\", \"value\": \"adam\"},\n                            {\"label\": \"Adagrad\", \"value\": \"adagrad\"},\n                            {\"label\": \"Nadam\", \"value\": \"nadam\"},\n                            {\"label\": \"Adadelta\", \"value\": \"adadelta\"},\n                            {\"label\": \"Adamax\", \"value\": \"adamax\"},\n                            {\"label\": \"RMSprop\", \"value\": \"rmsprop\"},\n                            {\"label\": \"SGD\", \"value\": \"sgd\"},\n                            {\"label\": \"FTRL\", \"value\": \"ftrl\"},\n                        ],\n                        value=model_data[\"optimizer\"]\n                    ),\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"epochdisplay\"),\n                    dcc.Slider(1, 200, 1, marks={1: \"1\", 100: \"100\", 200: \"200\"},\n                               value=model_data[\"epochs\"], id=\"epochs\"),\n                ]),\n                html.Div(children=[\n                    html.Div(id=\"batchdisplay\"),\n                    dcc.Slider(1, 128, 1, marks={1: \"1\", 128: \"128\"},\n                               value=model_data[\"batchsize\"], id=\"batchsize\"),\n                ]),\n            ]\n        ),\n        html.Button(id=\"train\", n_clicks=0, children=\"Train\"),\n        html.Pre(id=\"progressdisplay\"),\n        dcc.Interval(id=\"trainprogress\", n_intervals=0, interval=1000),\n        dcc.Graph(id=\"historyplot\"),\n        html.Div(\n            className=\"flex-container\",\n            id=\"predict\",\n            children=[\n                html.Div(\n                    children=html.Canvas(id=\"writing\"),\n                    style={\"textAlign\": \"center\"}\n                ),\n                html.Div(id=\"predictresult\", children=\"?\"),\n                html.Pre(\n                    id=\"lastinput\",\n                ),\n            ]\n        ),\n        html.Div(id=\"dummy\", style={\"display\": \"none\"}),\n    ]\n)\n\n@app.callback(Output(component_id=\"epochdisplay\", component_property=\"children\"),\n              Input(component_id=\"epochs\", component_property=\"value\"))\ndef update_epochs(value):\n    model_data[\"epochs\"] = value\n    return f\"Epochs: {value}\"\n\n@app.callback(Output(\"batchdisplay\", \"children\"),\n              Input(\"batchsize\", \"value\"))\ndef update_batchsize(value):\n    model_data[\"batchsize\"] = value\n    return f\"Batch size: {value}\"\n\n@app.callback(Output(\"activationdisplay\", \"children\"),\n              Input(\"activation\", \"value\"))\ndef update_activation(value):\n    model_data[\"activation\"] = value\n    return f\"Activation: {value}\"\n\n@app.callback(Output(\"optimizerdisplay\", \"children\"),\n              Input(\"optimizer\", \"value\"))\ndef update_optimizer(value):\n    model_data[\"optimizer\"] = value\n    return f\"Optimizer: {value}\"\n\n@app.callback(Output(\"historyplot\", \"figure\"),\n              Input(\"train\", \"n_clicks\"),\n              State(\"activation\", \"value\"),\n              State(\"optimizer\", \"value\"),\n              State(\"epochs\", \"value\"),\n              State(\"batchsize\", \"value\"),\n              prevent_initial_call=True)\ndef train_action(n_clicks, activation, optimizer, epoch, batchsize):\n    model_data.update({\n        \"activation\": activation,\n        \"optimizer\": optimizer,\n        \"epoch\": epoch,\n        \"batchsize\": batchsize,\n    })\n    model, history = train()\n    model_data[\"model\"] = model  # keep the trained model\n    history = pd.DataFrame(history.history)\n    fig = px.line(history, title=\"Model training metrics\")\n    fig.update_layout(xaxis_title=\"epochs\",\n                      yaxis_title=\"metric value\", legend_title=\"metrics\")\n    return fig\n\n@app.callback(Output(\"progressdisplay\", \"children\"),\n              Input(\"trainprogress\", \"n_intervals\"))\ndef update_progress(n):\n    return json.dumps(train_status, indent=4)\n\napp.clientside_callback(\n    \"function() { pageinit(); };\",\n    Output(\"dummy\", \"children\"),\n    Input(\"dummy\", \"children\")\n)\n\n@server.route(\"/recognize\", methods=[\"POST\"])\ndef recognize():\n    if not model_data.get(\"model\"):\n        return \"Please train your model.\"\n    matrix = json.loads(request.form[\"matrix\"])\n    matrix = np.asarray(matrix).reshape(1, 28, 28)\n    proba = model_data[\"model\"].predict(matrix).reshape(-1)\n    result = np.argmax(proba)\n    return \"Digit \"+str(result)\n\n# run server, with hot-reloading\napp.run_server(debug=True, threaded=True)\n```"]