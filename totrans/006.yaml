- en: Generating Diagrams with ChatGPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/generating-graphics-with-chatgpt/](https://machinelearningmastery.com/generating-graphics-with-chatgpt/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A large language model trained with appropriate content can generate responses
    more than just English text. ChatGPT, for example, is known to be able to generate
    code in many programming languages. Indeed, you can make ChatGPT generate other
    content as well, such as pictures. In this post, you will learn
  prefs: []
  type: TYPE_NORMAL
- en: How to make ChatGPT to generate block diagrams and sequence diagrams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The general rules to make ChatGPT to create diagrams for you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get started and apply ChatGPT** with my book [Maximizing Productivity with
    ChatGPT](https://machinelearningmastery.com/productivity-with-chatgpt/). It provides
    **real-world use cases** and **prompt examples** designed to get you using ChatGPT
    quickly.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.![](../Images/9ced04f6d15078c6efc6694f77424484.png)
  prefs: []
  type: TYPE_NORMAL
- en: Generating Diagrams with ChatGPT
  prefs: []
  type: TYPE_NORMAL
- en: Picture generated by the author using Stable Diffusion. Some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This post is divided into three parts; they are
  prefs: []
  type: TYPE_NORMAL
- en: Building a System Design Block Diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Sequence Diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations and Tips for Graphics Generation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a System Design Block Diagram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In today’s software industry, it is inevitable to consider scalability. That
    means a fairly large system has to be broken down into smaller pieces and run
    on segregated hardware. These pieces will collaborate over the network to finish
    a task. This contrasts the pre-Internet age when software was designed to be installed
    and run on a single computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider a cloud-based file storage system that can interact with a mobile
    app. If you search on the Internet, it is not difficult to learn how such a system
    is built to support massive number of users. But a picture is worth a thousand
    words. You can describe such a system to ChatGPT and ask it to generate a picture.
    The prompt can be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A cloud file storage service has the following components:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. A mobile client that contains a local database, an index controller, a chunk
    controller, and a watcher components
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2\. The controllers and watcher components are interacting with the server side
    through a load balancer
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. There is a notification server at the server side that push messages such
    as files update to the client, which the watcher component at client will handle
    them
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. The upload and download of files are handled by a file processing server,
    which files are indexed and broken down into chunks. The chunks are stored in
    the cloud storage.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5\. Metadata of files are processed by the metadata server and stored in the
    metadata database
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 6\. All these operations are streamlined using a message queue built on top
    of Kafka.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please create a block diagram for this using the Mermaid syntax.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There are two key properties in constructing such prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: You put down the system components and how they interact with each other clearly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You request to use Mermaid syntax for the diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving the detail of what components should include and how they should interact
    is important to get the elements in the diagram right. However, ChatGPT can generate
    text but not graphics. In order to have the diagram, you need a **graphics generation
    language** that can present in plaintext form. [Mermaid.js](https://mermaid.js.org/)
    is one example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The response from ChatGPT is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure! Here’s a block diagram representing the components and their interactions
    in the cloud file storage service:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this diagram, the mobile client consists of a local database, an index controller,
    a chunk controller, and a watcher component. These components interact with the
    server-side components through a load balancer. The server side consists of controllers,
    a file processing server, a metadata server, and a notification server. The file
    processing server handles the upload and download of files, breaking them down
    into chunks and storing them in the cloud storage. The metadata server processes
    the metadata of files and stores it in the metadata database. The notification
    server pushes messages, such as file updates, to the client, which are handled
    by the watcher component. All these operations are streamlined using a message
    queue built on top of Kafka.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please note that this is a simplified representation, and there may be additional
    components or interactions depending on the specific implementation of the cloud
    file storage service.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The code block in the response is the diagram in Mermaid.js syntax. If you
    copy them to the [Mermaid Live Editor](https://mermaid.live/) online, the following
    is what you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d1e7d9fd63f17042a5a6a3bc9d39962.png)'
  prefs: []
  type: TYPE_IMG
- en: Mermaid is a Javascript library that can render a variety of graphics on a web
    page. You may further polish the Mermaid code to add color or move the blocks
    to a different location on the canvas. However, it is a great help from ChatGPT
    already if you need a visualization of a system.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you can combine this technique with others, such as providing a system’s
    high-level goal to ChatGPT and asking it to tell you the system components. Then
    in the follow-up prompt, ask ChatGPT to convert this into a diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try out the following prompt as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the system components behind a social media like Twitter and how do
    they interact?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and then in the follow-up prompt,
  prefs: []
  type: TYPE_NORMAL
- en: Please provide a block diagram for the above in the Mermaid syntax.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Building a Sequence Diagram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As another example, let’s make ChatGPT generate a sequence diagram. It is another
    commonly used graphic in software engineering depicting how different components
    interact in a timeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Contrast to above, let’s make ChatGPT figure out the components and interactions
    and generate the picture in the same prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: How can a user interact with an webapp and login using OAuth2? Please generate
    a sequence diagram in PlantUML syntax to explain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: OAuth2 is a common way of authentication on webapps that the webapp server does
    not need you to create an account, but using other platform’s account instead.
    For example, you can use your Google account to login to ChatGPT. Google checks
    your password, but the application (ChatGPT) is not part of Google. There are
    multiple parties involved in the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is how ChatGPT explained this process to you:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Certainly! I can help you generate a sequence diagram in PlantUML syntax to
    illustrate how a user can interact with a web app and login using OAuth2\. Here’s
    the diagram:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this diagram, the steps are as follows:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. The User accesses the web app.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2\. The Web App displays a login button to the User.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. The User clicks the login button.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. The Web App redirects the User to the OAuth2 Provider.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5\. The User enters their credentials on the OAuth2 Provider’s login page.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 6\. The OAuth2 Provider validates the User’s credentials.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 7\. The OAuth2 Provider redirects the User back to the Web App with an authorization
    code.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 8\. The Web App sends the authorization code to the OAuth2 Provider.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 9\. The OAuth2 Provider exchanges the authorization code for an access token.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 10\. The OAuth2 Provider sends the access token back to the Web App.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 11\. The Web App logs in the User using the access token.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please note that this diagram provides a high-level overview of the OAuth2 login
    process and may not include all the intricacies of the protocol or specific implementation
    details. It serves as a simplified representation of the general flow.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here you asked for a different “language” of the graphics syntax: PlantUML.
    You can copy the code above and run it on the [PlantUML Online Server](https://www.plantuml.com/plantuml/uml/).
    The picture you get is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30b3545c618d41ee7b5881e662fd3d1a.png)'
  prefs: []
  type: TYPE_IMG
- en: The sequence diagram explains how the login and authentication happened and
    how the access token was created.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this works because ChatGPT can accurately articulate how this process
    works. If your process is too complicated or not known by ChatGPT, you should
    provide the detail of how the different components interact in the prompt and
    ask ChatGPT to convert your description into a graphics language.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations and Tips for Graphics Generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a language model, its training data largely limits its capability. Generating
    graphics is probably not the primary interest in building ChatGPT. It is well
    known that ChatGPT is weak at some graphics, such as schematic diagrams of electronic
    circuits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also note that if you ask ChatGPT to give you a diagram, by default it assumed
    you mean some kind of “ASCII art”, which usually doesn’t look right. Therefore
    it is essential to specify some kind of graphics language to use and then you
    render the output into graphics. Below are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Mermaid, as you saw in the first example above, can make flowcharts, sequence
    diagram, entity-relationship diagram, Gantt chart, and mindmaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PlantUML, as used in another example above, can make a lot of UML diagrams,
    including sequence diagram, state diagram, and class diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For other simple graphics (e.g., those with only nodes and arrows), you can
    ask for the Graphviz syntax, also known as the “dot language”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For generic graphics, you can ask for TikZ syntax, which is a package in LaTeX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For circuits, there is circuitikz which is a specialized version of TikZ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this post, you learned that ChatGPT can generate not only text, but also
    graphics, albeit in the form of some graphics language. Specifically, you saw
    how ChatGPT can
  prefs: []
  type: TYPE_NORMAL
- en: generate a block diagram depicting the interaction of different parties according
    to your description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generate a sequence diagram to explain a complex logic to answer your question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most importantly, the key to making ChatGPT generate graphics is to give enough
    details on how the graph should be generated. You should specify the format (e.g.,
    in Mermaid syntax) and provide enough detail about what should be on the visualization.
  prefs: []
  type: TYPE_NORMAL
