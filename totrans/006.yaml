- en: Generating Diagrams with ChatGPT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ChatGPT生成图示
- en: 原文：[https://machinelearningmastery.com/generating-graphics-with-chatgpt/](https://machinelearningmastery.com/generating-graphics-with-chatgpt/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/generating-graphics-with-chatgpt/](https://machinelearningmastery.com/generating-graphics-with-chatgpt/)
- en: A large language model trained with appropriate content can generate responses
    more than just English text. ChatGPT, for example, is known to be able to generate
    code in many programming languages. Indeed, you can make ChatGPT generate other
    content as well, such as pictures. In this post, you will learn
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 经过适当内容训练的大型语言模型可以生成的不仅仅是英文文本。例如，ChatGPT已知能够生成多种编程语言的代码。事实上，你还可以让ChatGPT生成其他内容，如图片。在这篇文章中，你将学习到
- en: How to make ChatGPT to generate block diagrams and sequence diagrams
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何让ChatGPT生成块图和序列图
- en: The general rules to make ChatGPT to create diagrams for you
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作ChatGPT为你创建图示的一般规则
- en: '**Get started and apply ChatGPT** with my book [Maximizing Productivity with
    ChatGPT](https://machinelearningmastery.com/productivity-with-chatgpt/). It provides
    **real-world use cases** and **prompt examples** designed to get you using ChatGPT
    quickly.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**开始使用并应用ChatGPT**，可以参考我的书籍[《最大化生产力与ChatGPT》](https://machinelearningmastery.com/productivity-with-chatgpt/)。它提供了**实际使用案例**和**提示示例**，旨在帮助你快速使用ChatGPT。'
- en: Let’s get started.![](../Images/9ced04f6d15078c6efc6694f77424484.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！[](../Images/9ced04f6d15078c6efc6694f77424484.png)
- en: Generating Diagrams with ChatGPT
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ChatGPT生成图示
- en: Picture generated by the author using Stable Diffusion. Some rights reserved.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用Stable Diffusion生成。保留部分权利。
- en: Overview
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: This post is divided into three parts; they are
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文分为三部分；它们是
- en: Building a System Design Block Diagram
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建系统设计块图
- en: Building a Sequence Diagram
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建序列图
- en: Limitations and Tips for Graphics Generation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形生成的限制和技巧
- en: Building a System Design Block Diagram
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建系统设计块图
- en: In today’s software industry, it is inevitable to consider scalability. That
    means a fairly large system has to be broken down into smaller pieces and run
    on segregated hardware. These pieces will collaborate over the network to finish
    a task. This contrasts the pre-Internet age when software was designed to be installed
    and run on a single computer.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的软件行业中，考虑可扩展性是不可避免的。这意味着一个相当大的系统必须被拆分成更小的部分，并在分隔的硬件上运行。这些部分将通过网络协作完成任务。这与互联网前时代的情况形成对比，当时软件设计是为了在单一计算机上安装和运行的。
- en: 'Let’s consider a cloud-based file storage system that can interact with a mobile
    app. If you search on the Internet, it is not difficult to learn how such a system
    is built to support massive number of users. But a picture is worth a thousand
    words. You can describe such a system to ChatGPT and ask it to generate a picture.
    The prompt can be the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个可以与移动应用交互的基于云的文件存储系统。如果你在互联网搜索，不难发现如何构建这样一个系统以支持大量用户。但是，一图胜千言。你可以向ChatGPT描述这样的系统，并要求它生成一张图片。提示可以是：
- en: 'A cloud file storage service has the following components:'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个云文件存储服务包含以下组件：
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. A mobile client that contains a local database, an index controller, a chunk
    controller, and a watcher components
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1. 一个包含本地数据库、索引控制器、块控制器和监视器组件的移动客户端
- en: 2\. The controllers and watcher components are interacting with the server side
    through a load balancer
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2. 控制器和监视器组件通过负载均衡器与服务器端进行交互。
- en: 3\. There is a notification server at the server side that push messages such
    as files update to the client, which the watcher component at client will handle
    them
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 3. 服务器端有一个通知服务器，向客户端推送如文件更新的消息，客户端的监视组件将处理这些消息。
- en: 4\. The upload and download of files are handled by a file processing server,
    which files are indexed and broken down into chunks. The chunks are stored in
    the cloud storage.
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 4. 文件的上传和下载由一个文件处理服务器处理，这些文件被索引并拆分成块。这些块存储在云存储中。
- en: 5\. Metadata of files are processed by the metadata server and stored in the
    metadata database
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 5. 文件的元数据由元数据服务器处理，并存储在元数据数据库中。
- en: 6\. All these operations are streamlined using a message queue built on top
    of Kafka.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 6. 所有这些操作都通过基于Kafka构建的消息队列进行流畅处理。
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please create a block diagram for this using the Mermaid syntax.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请使用Mermaid语法为此创建一个块图。
- en: 'There are two key properties in constructing such prompt:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 构建这样的提示有两个关键属性：
- en: You put down the system components and how they interact with each other clearly
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你明确列出系统组件及其如何相互作用。
- en: You request to use Mermaid syntax for the diagram
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你请求使用Mermaid语法来生成图示。
- en: Giving the detail of what components should include and how they should interact
    is important to get the elements in the diagram right. However, ChatGPT can generate
    text but not graphics. In order to have the diagram, you need a **graphics generation
    language** that can present in plaintext form. [Mermaid.js](https://mermaid.js.org/)
    is one example.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 详细说明组件应该包括哪些内容以及如何交互对于获得准确的图示是重要的。然而，ChatGPT可以生成文本，但不能生成图形。为了获得图示，你需要一种**图形生成语言**，它可以以纯文本形式呈现。[Mermaid.js](https://mermaid.js.org/)就是一个例子。
- en: 'The response from ChatGPT is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT的回应如下：
- en: 'Sure! Here’s a block diagram representing the components and their interactions
    in the cloud file storage service:'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当然！这是一个表示云文件存储服务中组件及其交互的块图：
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this diagram, the mobile client consists of a local database, an index controller,
    a chunk controller, and a watcher component. These components interact with the
    server-side components through a load balancer. The server side consists of controllers,
    a file processing server, a metadata server, and a notification server. The file
    processing server handles the upload and download of files, breaking them down
    into chunks and storing them in the cloud storage. The metadata server processes
    the metadata of files and stores it in the metadata database. The notification
    server pushes messages, such as file updates, to the client, which are handled
    by the watcher component. All these operations are streamlined using a message
    queue built on top of Kafka.
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这个图示中，移动客户端包括本地数据库、索引控制器、块控制器和观察者组件。这些组件通过负载均衡器与服务器端组件交互。服务器端包括控制器、文件处理服务器、元数据服务器和通知服务器。文件处理服务器处理文件的上传和下载，将其拆分成块并存储在云存储中。元数据服务器处理文件的元数据，并将其存储在元数据库中。通知服务器将消息（如文件更新）推送到客户端，由观察者组件处理。所有这些操作都通过基于Kafka的消息队列进行流线化。
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please note that this is a simplified representation, and there may be additional
    components or interactions depending on the specific implementation of the cloud
    file storage service.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，这只是一个简化的表示，具体的云文件存储服务可能会有额外的组件或交互。
- en: 'The code block in the response is the diagram in Mermaid.js syntax. If you
    copy them to the [Mermaid Live Editor](https://mermaid.live/) online, the following
    is what you get:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 响应中的代码块是Mermaid.js语法的图示。如果你将其复制到[Mermaid Live Editor](https://mermaid.live/)在线编辑器中，结果如下：
- en: '![](../Images/4d1e7d9fd63f17042a5a6a3bc9d39962.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d1e7d9fd63f17042a5a6a3bc9d39962.png)'
- en: Mermaid is a Javascript library that can render a variety of graphics on a web
    page. You may further polish the Mermaid code to add color or move the blocks
    to a different location on the canvas. However, it is a great help from ChatGPT
    already if you need a visualization of a system.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Mermaid是一个JavaScript库，可以在网页上呈现各种图形。你可以进一步润色Mermaid代码，以添加颜色或将块移动到画布上的不同位置。然而，如果你需要系统的可视化，ChatGPT已经提供了很大的帮助。
- en: In fact, you can combine this technique with others, such as providing a system’s
    high-level goal to ChatGPT and asking it to tell you the system components. Then
    in the follow-up prompt, ask ChatGPT to convert this into a diagram.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可以将这种技术与其他技术结合使用，例如向ChatGPT提供系统的高层目标，并让它告诉你系统组件。然后在后续提示中，请求ChatGPT将其转换成图示。
- en: 'You can try out the following prompt as an example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试以下提示作为示例：
- en: What are the system components behind a social media like Twitter and how do
    they interact?
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 社交媒体如Twitter背后的系统组件是什么，它们如何交互？
- en: and then in the follow-up prompt,
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在后续提示中，
- en: Please provide a block diagram for the above in the Mermaid syntax.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请提供上述内容的Mermaid语法块图。
- en: Building a Sequence Diagram
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建时序图
- en: As another example, let’s make ChatGPT generate a sequence diagram. It is another
    commonly used graphic in software engineering depicting how different components
    interact in a timeline.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个示例，让我们让ChatGPT生成一个时序图。这是软件工程中另一种常用的图形，用于描述不同组件在时间线中的交互。
- en: 'Contrast to above, let’s make ChatGPT figure out the components and interactions
    and generate the picture in the same prompt:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述相对，让我们让ChatGPT在同一提示中找出组件和交互并生成图示：
- en: How can a user interact with an webapp and login using OAuth2? Please generate
    a sequence diagram in PlantUML syntax to explain.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用户如何与web应用程序交互并使用OAuth2登录？请生成一个PlantUML语法的时序图进行解释。
- en: OAuth2 is a common way of authentication on webapps that the webapp server does
    not need you to create an account, but using other platform’s account instead.
    For example, you can use your Google account to login to ChatGPT. Google checks
    your password, but the application (ChatGPT) is not part of Google. There are
    multiple parties involved in the process.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth2 是一种常见的网页应用认证方式，网页应用服务器无需你创建账户，而是使用其他平台的账户。例如，你可以使用你的 Google 账户登录 ChatGPT。Google
    检查你的密码，但应用程序（ChatGPT）并不属于 Google。这个过程涉及多个参与方。
- en: 'The following is how ChatGPT explained this process to you:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 ChatGPT 如何向你解释这个过程的：
- en: 'Certainly! I can help you generate a sequence diagram in PlantUML syntax to
    illustrate how a user can interact with a web app and login using OAuth2\. Here’s
    the diagram:'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当然！我可以帮助你生成一个 PlantUML 语法的时序图，以说明用户如何与网页应用互动并使用 OAuth2 登录。这里是图示：
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this diagram, the steps are as follows:'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这个图中，步骤如下：
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. The User accesses the web app.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1\. 用户访问网页应用。
- en: 2\. The Web App displays a login button to the User.
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2\. 网络应用向用户展示登录按钮。
- en: 3\. The User clicks the login button.
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 3\. 用户点击登录按钮。
- en: 4\. The Web App redirects the User to the OAuth2 Provider.
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 4\. 网络应用将用户重定向到 OAuth2 提供者。
- en: 5\. The User enters their credentials on the OAuth2 Provider’s login page.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 5\. 用户在 OAuth2 提供者的登录页面上输入凭据。
- en: 6\. The OAuth2 Provider validates the User’s credentials.
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 6\. OAuth2 提供者验证用户的凭据。
- en: 7\. The OAuth2 Provider redirects the User back to the Web App with an authorization
    code.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 7\. OAuth2 提供者将用户重定向回网络应用，并附带授权码。
- en: 8\. The Web App sends the authorization code to the OAuth2 Provider.
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 8\. 网络应用将授权码发送给 OAuth2 提供者。
- en: 9\. The OAuth2 Provider exchanges the authorization code for an access token.
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 9\. OAuth2 提供者将授权码兑换为访问令牌。
- en: 10\. The OAuth2 Provider sends the access token back to the Web App.
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 10\. OAuth2 提供者将访问令牌发送回网络应用。
- en: 11\. The Web App logs in the User using the access token.
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 11\. 网络应用使用访问令牌登录用户。
- en: ''
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please note that this diagram provides a high-level overview of the OAuth2 login
    process and may not include all the intricacies of the protocol or specific implementation
    details. It serves as a simplified representation of the general flow.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，这张图提供了 OAuth2 登录过程的高级概述，可能没有包含协议或具体实现细节的所有复杂性。它作为一般流程的简化表示。
- en: 'Here you asked for a different “language” of the graphics syntax: PlantUML.
    You can copy the code above and run it on the [PlantUML Online Server](https://www.plantuml.com/plantuml/uml/).
    The picture you get is the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你要求使用不同的“语言”来表示图形语法：PlantUML。你可以复制上面的代码并在 [PlantUML 在线服务器](https://www.plantuml.com/plantuml/uml/)
    上运行。你得到的图像如下：
- en: '![](../Images/30b3545c618d41ee7b5881e662fd3d1a.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30b3545c618d41ee7b5881e662fd3d1a.png)'
- en: The sequence diagram explains how the login and authentication happened and
    how the access token was created.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 时序图解释了登录和认证是如何发生的以及访问令牌是如何创建的。
- en: Note that this works because ChatGPT can accurately articulate how this process
    works. If your process is too complicated or not known by ChatGPT, you should
    provide the detail of how the different components interact in the prompt and
    ask ChatGPT to convert your description into a graphics language.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这之所以有效，是因为 ChatGPT 能准确说明这个过程如何运作。如果你的过程过于复杂或 ChatGPT 不熟悉，你应在提示中提供不同组件如何互动的详细信息，并要求
    ChatGPT 将你的描述转换为图形语言。
- en: Limitations and Tips for Graphics Generation
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形生成的限制和提示
- en: As a language model, its training data largely limits its capability. Generating
    graphics is probably not the primary interest in building ChatGPT. It is well
    known that ChatGPT is weak at some graphics, such as schematic diagrams of electronic
    circuits.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种语言模型，其训练数据在很大程度上限制了其能力。生成图形可能不是构建 ChatGPT 的主要兴趣。众所周知，ChatGPT 在某些图形方面表现较弱，例如电子电路的原理图。
- en: 'Also note that if you ask ChatGPT to give you a diagram, by default it assumed
    you mean some kind of “ASCII art”, which usually doesn’t look right. Therefore
    it is essential to specify some kind of graphics language to use and then you
    render the output into graphics. Below are some examples:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，如果你要求 ChatGPT 给你一个图示，它默认假设你指的是某种“ASCII 艺术”，这通常看起来不对。因此，指定使用某种图形语言并将输出渲染为图形是至关重要的。以下是一些示例：
- en: Mermaid, as you saw in the first example above, can make flowcharts, sequence
    diagram, entity-relationship diagram, Gantt chart, and mindmaps
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mermaid，正如你在上面的第一个示例中看到的，可以制作流程图、时序图、实体-关系图、甘特图和思维导图。
- en: PlantUML, as used in another example above, can make a lot of UML diagrams,
    including sequence diagram, state diagram, and class diagram
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如上例所示，PlantUML 可以制作许多 UML 图，包括时序图、状态图和类图。
- en: For other simple graphics (e.g., those with only nodes and arrows), you can
    ask for the Graphviz syntax, also known as the “dot language”
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他简单图形（例如仅包含节点和箭头的图形），你可以询问 Graphviz 语法，也称为“dot 语言”。
- en: For generic graphics, you can ask for TikZ syntax, which is a package in LaTeX
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于通用图形，你可以询问 TikZ 语法，它是 LaTeX 中的一个包。
- en: For circuits, there is circuitikz which is a specialized version of TikZ
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于电路图，有 circuitikz 这是 TikZ 的一个专门版本。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: In this post, you learned that ChatGPT can generate not only text, but also
    graphics, albeit in the form of some graphics language. Specifically, you saw
    how ChatGPT can
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你了解到 ChatGPT 不仅可以生成文本，还可以生成图形，尽管是以某种图形语言的形式。具体来说，你看到 ChatGPT 可以
- en: generate a block diagram depicting the interaction of different parties according
    to your description
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个块图，根据你的描述描绘不同方的互动。
- en: generate a sequence diagram to explain a complex logic to answer your question
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个时序图来解释复杂的逻辑，以回答你的问题。
- en: Most importantly, the key to making ChatGPT generate graphics is to give enough
    details on how the graph should be generated. You should specify the format (e.g.,
    in Mermaid syntax) and provide enough detail about what should be on the visualization.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，使 ChatGPT 生成图形的关键是提供足够的图形生成细节。你应该指定格式（例如，使用 Mermaid 语法），并提供关于可视化内容的足够细节。
