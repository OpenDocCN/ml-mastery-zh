["```py\n# Set up to obtain CV model performance and coefficient using K-Fold\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold\n\nAmes = pd.read_csv(\"Ames.csv\")\nX = Ames[[\"GrLivArea\"]].values  # get 2D matrix\ny = Ames[\"SalePrice\"].values    # get 1D vector\n\nmodel = LinearRegression()\nkf = KFold(n_splits=5)\ncoefs = []\nscores = []\n\n# Manually perform K-Fold Cross-Validation\nfor fold, (train_index, test_index) in enumerate(kf.split(X), start=1):\n    # Split the data into training and testing sets\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    # Fit the model, obtain fold performance and coefficient\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\n    coefs.append(model.coef_)\n\nmean_score = np.mean(scores)\nprint(f\"Mean CV R² = {mean_score:.4f}\")\n\nmean_coefs = np.mean(coefs)\nprint(f\"Mean Coefficient = {mean_coefs:.4f}\")\n```", "```py\nMean CV R² = 0.5127\nMean Coefficient = 110.5214\n```", "```py\n# Rank neighborhoods by their mean sale price\nAmes = pd.read_csv(\"Ames.csv\")\nneighbor_stats = Ames.groupby(\"Neighborhood\")[\"SalePrice\"].agg([\"count\", \"mean\"]).sort_values(by=\"mean\")\nprint(neighbor_stats.round(0).astype(int))\n```", "```py\n              count    mean\nNeighborhood               \nMeadowV          34   96836\nBrDale           29  106095\nIDOTRR           76  108103\nBrkSide         103  126030\nOldTown         213  126939\nEdwards         165  133152\nSWISU            42  133576\nLandmrk           1  137000\nSawyer          139  137493\nNPkVill          22  140743\nBlueste          10  143590\nNAmes           410  145087\nMitchel         104  162655\nSawyerW         113  188102\nGilbert         143  189440\nNWAmes          123  190372\nGreens            8  193531\nBlmngtn          23  196237\nCollgCr         236  198133\nCrawfor          92  202076\nClearCr          40  213981\nSomerst         143  228762\nTimber           54  242910\nVeenker          23  251263\nGrnHill           2  280000\nStoneBr          43  305308\nNridgHt         121  313662\nNoRidge          67  326114\n```", "```py\n# Build on initial set up and block of code above\n# Import OneHotEncoder to preprocess a categorical feature\nfrom sklearn.preprocessing import OneHotEncoder\n\n# One Hot Encoding for \"Neighborhood\", Note: drop=[\"MeadowV\"]\nencoder = OneHotEncoder(sparse=False, drop=[\"MeadowV\"])\nX = encoder.fit_transform(Ames[[\"Neighborhood\"]])\ny = Ames[\"SalePrice\"].values\n\n# Setup KFold and initialize storage\nkf = KFold(n_splits=5)\nscores = []\ncoefficients = []\nintercept = []\n\n# Perform the KFold cross-validation\nfor train_index, test_index in kf.split(X):\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Append the results for each fold\n    scores.append(model.score(X_test, y_test))\n    coefficients.append(model.coef_)\n    intercept.append(model.intercept_)\n\nmean_score = np.mean(scores)\nprint(f\"Mean CV R² = {mean_score:.4f}\")\nmean_coefficients = np.mean(coefficients, axis=0)\nmean_intercept = np.mean(intercept)\nprint(f\"Mean Y-intercept = {mean_intercept:.0f}\")\n\n# Retrieve neighborhood names from the encoder, adjusting for the dropped category\nneighborhoods = encoder.categories_[0]\nif \"MeadowV\" in neighborhoods:\n    neighborhoods = [name for name in neighborhoods if name != \"MeadowV\"]\n\n# Create a DataFrame to nicely display neighborhoods with their average coefficients\nimport pandas as pd\n\ncoefficients_df = pd.DataFrame({\n    \"Neighborhood\": neighborhoods,\n    \"Average Coefficient\": mean_coefficients.round(0).astype(int)\n})\n\n# Print or return the DataFrame\nprint(coefficients_df.sort_values(by=\"Average Coefficient\").reset_index(drop=True))\n```", "```py\nMean CV R² = 0.5408\nMean Y-intercept = 96827\n\n   Neighborhood  Average Coefficient\n0        BrDale                 9221\n1        IDOTRR                11335\n2       BrkSide                29235\n3       OldTown                30092\n4       Landmrk                31729\n5       Edwards                36305\n6         SWISU                36848\n7        Sawyer                40645\n8       NPkVill                43988\n9       Blueste                46388\n10        NAmes                48274\n11      Mitchel                65851\n12      SawyerW                91252\n13      Gilbert                92627\n14       NWAmes                93521\n15       Greens                96641\n16      Blmngtn                99318\n17      CollgCr               101342\n18      Crawfor               105258\n19      ClearCr               116993\n20      Somerst               131844\n21       Timber               146216\n22      Veenker               155042\n23      GrnHill               183173\n24      StoneBr               208096\n25      NridgHt               216605\n26      NoRidge               229423\n```", "```py\n# Import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\n# Load data\nAmes = pd.read_csv(\"Ames.csv\")\n\n# Select features and target\nfeatures = Ames[[\"GrLivArea\", \"Neighborhood\"]]\ntarget = Ames[\"SalePrice\"]\n\n# Preprocess features using ColumnTransformer\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", \"passthrough\", [\"GrLivArea\"]),\n        (\"cat\", OneHotEncoder(sparse=False, drop=[\"MeadowV\"], handle_unknown=\"ignore\"), [\"Neighborhood\"])\n    ])\n\n# Fit and transform the features\nX_transformed = preprocessor.fit_transform(features)\nfeature_names = [\"GrLivArea\"] + list(preprocessor.named_transformers_[\"cat\"].get_feature_names_out())\n\n# Initialize KFold\nkf = KFold(n_splits=5)\n\n# Initialize variables to store results\ncoefficients_list = []\nintercepts_list = []\nscores = []\n\n# Perform the KFold cross-validation\nfor train_index, test_index in kf.split(X_transformed):\n    X_train, X_test = X_transformed[train_index], X_transformed[test_index]\n    y_train, y_test = target.iloc[train_index], target.iloc[test_index]\n\n    # Initialize the linear regression model\n    model = LinearRegression()\n\n    # Fit the model on the training data\n    model.fit(X_train, y_train)\n\n    # Store coefficients and intercepts\n    coefficients_list.append(model.coef_)\n    intercepts_list.append(model.intercept_)\n\n    # Evaluate the model\n    scores.append(model.score(X_test, y_test))\n\n# Calculate the mean of scores, coefficients, and intercepts\naverage_score = np.mean(scores)\naverage_coefficients = np.mean(coefficients_list, axis=0)\naverage_intercept = np.mean(intercepts_list)\n\n# Display the average R² score and Y-Intercept across all folds\n# The Y-Intercept represents the baseline sale price in \"MeadowV\" with no additional living area\nprint(f\"Mean CV R² Score of Combined Model: {average_score:.4f}\")\nprint(f\"Mean Y-intercept = {average_intercept:.0f}\")\n\n# Create a DataFrame for the coefficients\ndf_coefficients = pd.DataFrame({\n    \"Feature\": feature_names,\n    \"Average Coefficient\": average_coefficients\n    }).sort_values(by=\"Average Coefficient\").reset_index(drop=True)\n\n# Display the DataFrame\nprint(\"Coefficients for Combined Model:\")\nprint(df_coefficients)\n```", "```py\nMean CV R² Score of Combined Model: 0.7375\nMean Y-intercept = 11786\n\nCoefficients for Combined Model:\n                 Feature  Average Coefficient\n0     Neighborhood_SWISU         -3728.929853\n1    Neighborhood_IDOTRR         -1498.971239\n2              GrLivArea            78.938757\n3   Neighborhood_OldTown          2363.805796\n4    Neighborhood_BrDale          6551.114637\n5   Neighborhood_BrkSide         16521.117849\n6   Neighborhood_Landmrk         16921.529665\n7   Neighborhood_Edwards         17520.110407\n8   Neighborhood_NPkVill         30034.541748\n9     Neighborhood_NAmes         31717.960146\n10   Neighborhood_Sawyer         32009.140024\n11  Neighborhood_Blueste         39908.310031\n12   Neighborhood_NWAmes         44409.237736\n13  Neighborhood_Mitchel         48013.229999\n14  Neighborhood_SawyerW         48204.606372\n15  Neighborhood_Gilbert         49255.248193\n16  Neighborhood_Crawfor         55701.500795\n17  Neighborhood_ClearCr         61737.497483\n18  Neighborhood_CollgCr         69781.161291\n19  Neighborhood_Blmngtn         72456.245569\n20  Neighborhood_Somerst         90020.562168\n21   Neighborhood_Greens         90219.452164\n22   Neighborhood_Timber         97021.781128\n23  Neighborhood_Veenker         98829.786236\n24  Neighborhood_NoRidge        120717.748175\n25  Neighborhood_StoneBr        147811.849406\n26  Neighborhood_NridgHt        150129.579392\n27  Neighborhood_GrnHill        157858.199004\n```"]