["```py\npip install requests beautifulsoup4 lxml\n```", "```py\nimport requests\n\n# Lat-Lon of New York\nURL = \"https://weather.com/weather/today/l/40.75,-73.98\"\nresp = requests.get(URL)\nprint(resp.status_code)\nprint(resp.text)\n```", "```py\n200\n<!doctype html><html dir=\"ltr\" lang=\"en-US\"><head>\n      <meta data-react-helmet=\"true\" charset=\"utf-8\"/><meta data-react-helmet=\"true\"\nname=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\"/>\n...\n```", "```py\nimport io\nimport pandas as pd\nimport requests\n\nURL = \"https://fred.stlouisfed.org/graph/fredgraph.csv?id=T10YIE&cosd=2017-04-14&coed=2022-04-14\"\nresp = requests.get(URL)\nif resp.status_code == 200:\n   csvtext = resp.text\n   csvbuffer = io.StringIO(csvtext)\n   df = pd.read_csv(csvbuffer)\n   print(df)\n```", "```py\n            DATE T10YIE\n0     2017-04-17   1.88\n1     2017-04-18   1.85\n2     2017-04-19   1.85\n3     2017-04-20   1.85\n4     2017-04-21   1.84\n...          ...    ...\n1299  2022-04-08   2.87\n1300  2022-04-11   2.91\n1301  2022-04-12   2.86\n1302  2022-04-13    2.8\n1303  2022-04-14   2.89\n\n[1304 rows x 2 columns]\n```", "```py\nimport requests\n\nURL = \"https://api.github.com/users/jbrownlee\"\nresp = requests.get(URL)\nif resp.status_code == 200:\n    data = resp.json()\n    print(data)\n```", "```py\n{'login': 'jbrownlee', 'id': 12891, 'node_id': 'MDQ6VXNlcjEyODkx',\n'avatar_url': 'https://avatars.githubusercontent.com/u/12891?v=4',\n'gravatar_id': '', 'url': 'https://api.github.com/users/jbrownlee',\n'html_url': 'https://github.com/jbrownlee',\n...\n'company': 'Machine Learning Mastery', 'blog': 'https://machinelearningmastery.com',\n'location': None, 'email': None, 'hireable': None,\n'bio': 'Making developers awesome at machine learning.', 'twitter_username': None,\n'public_repos': 5, 'public_gists': 0, 'followers': 1752, 'following': 0,\n'created_at': '2008-06-07T02:20:58Z', 'updated_at': '2022-02-22T19:56:27Z'\n}\n```", "```py\nimport requests\n\nURL = \"https://en.wikipedia.org/static/images/project-logos/enwiki.png\"\nwikilogo = requests.get(URL)\nif wikilogo.status_code == 200:\n    with open(\"enwiki.png\", \"wb\") as fp:\n        fp.write(wikilogo.content)\n```", "```py\n...\nfrom lxml import etree\n\n# Create DOM from HTML text\ndom = etree.HTML(resp.text)\n# Search for the temperature element and get the content\nelements = dom.xpath(\"//span[@data-testid='TemperatureValue' and contains(@class,'CurrentConditions')]\")\nprint(elements[0].text)\n```", "```py\n61°\n```", "```py\n...\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(resp.text, \"lxml\")\nelements = soup.select('span[data-testid=\"TemperatureValue\"][class^=\"CurrentConditions\"]')\nprint(elements[0].text)\n```", "```py\n61°\n```", "```py\nimport requests\nfrom lxml import etree\n\n# Reading temperature of New York\nURL = \"https://weather.com/weather/today/l/40.75,-73.98\"\nresp = requests.get(URL)\n\nif resp.status_code == 200:\n    # Using lxml\n    dom = etree.HTML(resp.text)\n    elements = dom.xpath(\"//span[@data-testid='TemperatureValue' and contains(@class,'CurrentConditions')]\")\n    print(elements[0].text)\n\n    # Using BeautifulSoup\n    soup = BeautifulSoup(resp.text, \"lxml\")\n    elements = soup.select('span[data-testid=\"TemperatureValue\"][class^=\"CurrentConditions\"]')\n    print(elements[0].text)\n```", "```py\nimport pandas as pd\n\ntables = pd.read_html(\"https://www.federalreserve.gov/releases/h15/\")\nprint(tables)\n```", "```py\n[                               Instruments 2022Apr7 2022Apr8 2022Apr11 2022Apr12 2022Apr13\n0          Federal funds (effective) 1 2 3     0.33     0.33      0.33      0.33      0.33\n1                 Commercial Paper 3 4 5 6      NaN      NaN       NaN       NaN       NaN\n2                             Nonfinancial      NaN      NaN       NaN       NaN       NaN\n3                                  1-month     0.30     0.34      0.36      0.39      0.39\n4                                  2-month     n.a.     0.48      n.a.      n.a.      n.a.\n5                                  3-month     n.a.     n.a.      n.a.      0.78      0.78\n6                                Financial      NaN      NaN       NaN       NaN       NaN\n7                                  1-month     0.49     0.45      0.46      0.39      0.46\n8                                  2-month     n.a.     n.a.      0.60      0.71      n.a.\n9                                  3-month     0.85     0.81      0.75      n.a.      0.86\n10                   Bank prime loan 2 3 7     3.50     3.50      3.50      3.50      3.50\n11      Discount window primary credit 2 8     0.50     0.50      0.50      0.50      0.50\n12              U.S. government securities      NaN      NaN       NaN       NaN       NaN\n13   Treasury bills (secondary market) 3 4      NaN      NaN       NaN       NaN       NaN\n14                                  4-week     0.21     0.20      0.21      0.19      0.23\n15                                 3-month     0.68     0.69      0.78      0.74      0.75\n16                                 6-month     1.12     1.16      1.22      1.18      1.17\n17                                  1-year     1.69     1.72      1.75      1.67      1.67\n18            Treasury constant maturities      NaN      NaN       NaN       NaN       NaN\n19                               Nominal 9      NaN      NaN       NaN       NaN       NaN\n20                                 1-month     0.21     0.20      0.22      0.21      0.26\n21                                 3-month     0.68     0.70      0.77      0.74      0.75\n22                                 6-month     1.15     1.19      1.23      1.20      1.20\n23                                  1-year     1.78     1.81      1.85      1.77      1.78\n24                                  2-year     2.47     2.53      2.50      2.39      2.37\n25                                  3-year     2.66     2.73      2.73      2.58      2.57\n26                                  5-year     2.70     2.76      2.79      2.66      2.66\n27                                  7-year     2.73     2.79      2.84      2.73      2.71\n28                                 10-year     2.66     2.72      2.79      2.72      2.70\n29                                 20-year     2.87     2.94      3.02      2.99      2.97\n30                                 30-year     2.69     2.76      2.84      2.82      2.81\n31                    Inflation indexed 10      NaN      NaN       NaN       NaN       NaN\n32                                  5-year    -0.56    -0.57     -0.58     -0.65     -0.59\n33                                  7-year    -0.34    -0.33     -0.32     -0.36     -0.31\n34                                 10-year    -0.16    -0.15     -0.12     -0.14     -0.10\n35                                 20-year     0.09     0.11      0.15      0.15      0.18\n36                                 30-year     0.21     0.23      0.27      0.28      0.30\n37  Inflation-indexed long-term average 11     0.23     0.26      0.30      0.30      0.33,       0               1\n0  n.a.  Not available.]\n```", "```py\nimport requests\n\n# Read Yahoo home page\nURL = \"https://www.yahoo.com/\"\nresp = requests.get(URL)\ndom = etree.HTML(resp.text)\n\n# Print news headlines\nelements = dom.xpath(\"//h3/a[u[@class='StretchedBox']]\")\nfor elem in elements:\n    print(etree.tostring(elem, method=\"text\", encoding=\"unicode\"))\n```", "```py\npip install selenium\n```", "```py\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.common.by import By\n\n# Launch Chrome browser in headless mode\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"headless\")\nbrowser = webdriver.Chrome(options=options)\n\n# Load web page\nbrowser.get(\"https://www.yahoo.com\")\n# Network transport takes time. Wait until the page is fully loaded\ndef is_ready(browser):\n    return browser.execute_script(r\"\"\"\n        return document.readyState === 'complete'\n    \"\"\")\nWebDriverWait(browser, 30).until(is_ready)\n\n# Scroll to bottom of the page to trigger JavaScript action\nbrowser.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\ntime.sleep(1)\nWebDriverWait(browser, 30).until(is_ready)\n\n# Search for news headlines and print\nelements = browser.find_elements(By.XPATH, \"//h3/a[u[@class='StretchedBox']]\")\nfor elem in elements:\n    print(elem.text)\n\n# Close the browser once finish\nbrowser.close()\n```", "```py\noptions = webdriver.FirefoxOptions()\noptions.set_headless()\nbrowser = webdriver.Firefox(firefox_options=options)\n```"]