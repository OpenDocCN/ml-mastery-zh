- en: Command Line Arguments for Your Python Script
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为你的Python脚本添加命令行参数
- en: 原文：[https://machinelearningmastery.com/command-line-arguments-for-your-python-script/](https://machinelearningmastery.com/command-line-arguments-for-your-python-script/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/command-line-arguments-for-your-python-script/](https://machinelearningmastery.com/command-line-arguments-for-your-python-script/)
- en: Working on a machine learning project means we need to experiment. Having a
    way to configure your script easily will help you move faster. In Python, we have
    a way to adapt the code from a command line. In this tutorial, we are going to
    see how we can leverage the command line arguments to a Python script to help
    you work better in your machine learning project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习项目中工作意味着我们需要进行实验。有一种简单配置脚本的方法将帮助你更快地前进。在Python中，我们有一种方法可以从命令行适应代码。在本教程中，我们将看到如何利用Python脚本的命令行参数，帮助你在机器学习项目中更有效地工作。
- en: After finishing this tutorial, you will learn
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本教程后，你将学会
- en: Why we would like to control a Python script in a command line
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们想要在命令行中控制Python脚本
- en: How we can work in a command line efficiently
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何能在命令行上高效工作
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**用我的新书[Python机器学习](https://machinelearningmastery.com/python-for-machine-learning/)**快速启动你的项目，包括*逐步教程*和所有示例的*Python源代码*文件。'
- en: Let’s get started.![](../Images/c9f3ac961769a235f2a8293ea0ac8dca.png)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！![](../Images/c9f3ac961769a235f2a8293ea0ac8dca.png)
- en: Command line arguments for your Python script. Photo by [insung yoon](https://unsplash.com/photos/Uaf6XwW4n10).
    Some rights reserved
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的Python脚本添加命令行参数。照片由[insung yoon](https://unsplash.com/photos/Uaf6XwW4n10)拍摄。部分权利保留
- en: Overview
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'This tutorial is in three parts; they are:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为三部分；它们是：
- en: Running a Python script in command line
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令行中运行Python脚本
- en: Working on the command line
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令行工作
- en: Alternative to command line arguments
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替代命令行参数
- en: Running a Python Script in Command Line
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在命令行中运行Python脚本
- en: There are many ways to run a Python script. Someone may run it as part of a
    Jupyter notebook. Someone may run it in an IDE. But in all platforms, it is always
    possible to run a Python script in command line. In Windows, you have the command
    prompt or PowerShell (or, even better, the [Windows Terminal](https://aka.ms/terminal)).
    In macOS or Linux, you have the Terminal or xterm. Running a Python script in
    command line is powerful because you can pass in additional parameters to the
    script.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以运行Python脚本。有人可能在Jupyter笔记本中运行它。有人可能在IDE中运行它。但在所有平台上，始终可以在命令行中运行Python脚本。在Windows中，你可以使用命令提示符或PowerShell（或者更好的是[Windows终端](https://aka.ms/terminal)）。在macOS或Linux中，你可以使用终端或xterm。在命令行中运行Python脚本是强大的，因为你可以向脚本传递额外的参数。
- en: 'The following script allows us to pass in values from the command line into
    Python:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本允许我们将值从命令行传递到Python中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We save these few lines into a file and run it in command line with an argument:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这几行保存到一个文件中，并在命令行中运行它，带一个参数：
- en: Shell
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, you will see it takes our argument, converts it into an integer, adds
    one to it, and prints. The list `sys.argv` contains the name of our script and
    all the arguments (all strings), which in the above case, is `["commandline.py",
    "15"]`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你会看到它接受我们的参数，将其转换为整数，加一并打印出来。列表`sys.argv`包含我们脚本的名称和所有参数（都是字符串），在上述情况下，是`["commandline.py",
    "15"]`。
- en: 'When you run a command line with a more complicated set of arguments, it takes
    some effort to process the list `sys.argv`. Therefore, Python provided the library
    `argparse` to help. This assumes GNU-style, which can be explained using the following
    example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行带有更复杂参数集的命令行时，需要一些处理列表`sys.argv`的努力。因此，Python提供了`argparse`库来帮助。这假设GNU风格，可以用以下例子来解释：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The optional arguments are introduced by “`-`” or “`--`“, where a single hyphen
    will carry a single character “short option” (such as `-a`, `-B`, and `-v` above),
    and two hyphens are for multiple characters “long options” (such as `--exclude` and `--ignore-existing` above).
    The optional arguments may have additional parameters, such as in `-B 1024` or `--exclude="*.pyc";` the `1024` and `"*.pyc"` are
    parameters to `-B` and `--exclude`, respectively. Additionally, we may also have
    compulsory arguments, which we just put into the command line. The part `192.168.0.3:/tmp/` and `./`
    above are examples. The order of compulsory arguments is important. For example,
    the `rsync` command above will copy files from `192.168.0.3:/tmp/` to `./` instead
    of the other way round.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数由“`-`”或“`--`”引入，单个连字符表示单个字符的“短选项”（例如上述的 `-a`、`-B` 和 `-v`），双连字符用于多个字符的“长选项”（例如上述的
    `--exclude` 和 `--ignore-existing`）。可选参数可能有附加参数，例如在 `-B 1024` 或 `--exclude="*.pyc"`
    中，`1024` 和 `"*.pyc"` 分别是 `B` 和 `--exclude` 的参数。此外，我们还可能有强制性参数，我们直接将其放入命令行中。上面的
    `192.168.0.3:/tmp/` 和 `./` 就是例子。强制参数的顺序很重要。例如，上面的 `rsync` 命令将文件从 `192.168.0.3:/tmp/`
    复制到 `./` 而不是相反。
- en: 'The following replicates the above example in Python using argparse:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 argparse 在 Python 中复制上述示例的方法：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you run the above script, you will see:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行上述脚本，您将看到：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This means you didn’t provide the compulsory arguments for `src` and `dest`.
    Perhaps the best reason to use argparse is to get a help screen for free if you
    provided `-h` or `--help` as the argument, like the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您没有为 `src` 和 `dest` 提供必需的参数。也许使用 argparse 的最佳理由是，如果您提供了 `-h` 或 `--help`
    作为参数，可以免费获取帮助屏幕，如下所示：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'While the script did nothing real, if you provided the arguments as required,
    you will see this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然脚本并未执行任何实际操作，但如果按要求提供参数，将会看到以下内容：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The parser object created by `ArgumentParser()` has a `parse_args()` method
    that reads `sys.argv` and returns a **namespace** object. This is an object that
    carries attributes, and we can read them using `args.ignore_existing`, for example.
    But usually, it is easier to handle if it is a Python dictionary. Hence we can
    convert it into one using `vars(args)`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `ArgumentParser()` 创建的解析器对象有一个 `parse_args()` 方法，它读取 `sys.argv` 并返回一个 **namespace**
    对象。这是一个携带属性的对象，我们可以使用 `args.ignore_existing` 等方式读取它们。但通常，如果它是 Python 字典，处理起来会更容易。因此，我们可以使用
    `vars(args)` 将其转换为一个字典。
- en: Usually, for all optional arguments, we provide the long option and sometimes
    also the short option. Then we can access the value provided from the command
    line using the long option as the key (with the hyphen replaced with an underscore
    or the single-character short option as the key if we don’t have a long version).
    The “positional arguments” are not optional, and their names are provided in the
    `add_argument()` function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于所有可选参数，我们提供长选项，有时也提供短选项。然后，我们可以使用长选项作为键（将连字符替换为下划线）从命令行访问提供的值，如果没有长版本，则使用单字符短选项作为键。
    “位置参数” 不是可选的，并且它们的名称在 `add_argument()` 函数中提供。
- en: There are multiple types of arguments. For the optional arguments, sometimes
    we use them as Boolean flags, but sometimes we expect them to bring in some data.
    In the above, we use `action="store_true"` to make that option set to `False` by
    default and toggle to `True` if it is specified. For the other option, such as `-B`
    above, by default, it expects additional data to go following it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 参数有多种类型。对于可选参数，有时我们将它们用作布尔标志，但有时我们期望它们带入一些数据。在上述示例中，我们使用 `action="store_true"`
    来将该选项默认设置为 `False`，如果指定则切换为 `True`。对于其他选项，例如上面的 `-B`，默认情况下，它期望在其后跟随附加数据。
- en: 'We can further require an argument to be a specific type. For example, in the
    `-B` option above, we can make it expect integer data by adding `type` like the
    following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以进一步要求参数是特定类型。例如，对于上面的 `-B` 选项，我们可以通过添加 `type` 来使其期望整数数据，如下所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And if we provided the wrong type, argparse will help terminate our program
    with an informative error message:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了错误的类型，argparse 将帮助终止我们的程序，并显示一个信息性错误消息：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Working on the Command Line
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在命令行上工作
- en: 'Empowering your Python script with command line arguments can bring it to a
    new level of reusability. First, let’s look at a simple example of fitting an
    ARIMA model to a GDP time series. World Bank collects historical GDP data from
    many countries. We can make use of the `pandas_datareader` package to read the
    data. If you haven’t installed it yet, you can use `pip` (or `conda` if you installed
    Anaconda) to install the package:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行参数增强你的Python脚本可以使其达到新的可重用性水平。首先，让我们看一个简单的示例，将ARIMA模型拟合到GDP时间序列上。世界银行收集了许多国家的历史GDP数据。我们可以利用`pandas_datareader`包来读取这些数据。如果你还没有安装它，可以使用`pip`（或者如果你安装了Anaconda，则可以使用`conda`）来安装该包：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The code for the GDP data that we use is `NY.GDP.MKTP.CN`; we can get the data
    of a country in the form of a pandas DataFrame by:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的GDP数据的代码是`NY.GDP.MKTP.CN`；我们可以通过以下方式获得国家的数据，将其转换成pandas DataFrame：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then we can tidy up the DataFrame a bit using the tools provided by pandas:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用pandas提供的工具稍微整理一下DataFrame：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Fitting an ARIMA model and using the model for predictions is not difficult.
    In the following, we fit it using the first 40 data points and forecast for the
    next 3\. Then compare the forecast with the actual in terms of relative error:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 拟合ARIMA模型并使用该模型进行预测并不困难。接下来，我们使用前40个数据点进行拟合，并预测未来3个数据点。然后，通过相对误差比较预测值和实际值：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Putting it all together, and after a little polishing, the following is the
    complete code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起，并稍加修饰后，以下是完整的代码：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This script prints the following output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本输出以下内容：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The above code is short, but we made it flexible enough by holding some parameters
    in variables. We can change the above code to use argparse so that we can change
    some parameters from the command line, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码很简短，但我们通过在变量中保存一些参数使其更加灵活。我们可以将上述代码改为使用argparse，这样我们就可以从命令行中更改一些参数，如下所示：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we run the code above in a command line, we can see it can now accept arguments:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在命令行中运行上述代码，可以看到它现在可以接受参数：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the last command above, we pass in `-c NO` to apply the same model to the
    GDP data of Norway (NO) instead of Sweden (SE). Hence, without the risk of messing
    up the code, we reused our code for a different dataset.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的最后一个命令中，我们传入`-c NO`来将相同的模型应用于挪威（NO）的GDP数据，而不是瑞典（SE）。因此，在不破坏代码的风险下，我们重用了我们的代码来处理不同的数据集。
- en: 'The power of introducing a command line argument is that we can easily test
    our code with varying parameters. For example, we want to see if the ARIMA(1,1,1)
    model is a good model for predicting GDP, and we want to verify with a different
    time window of the Nordic countries:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 引入命令行参数的强大之处在于，我们可以轻松地测试我们的代码，使用不同的参数。例如，我们想要查看ARIMA(1,1,1)模型是否是预测GDP的好模型，并且我们希望使用北欧国家的不同时间窗口来验证：
- en: Denmark (DK)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丹麦（DK）
- en: Finland (FI)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 芬兰（FI）
- en: Iceland (IS)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冰岛（IS）
- en: Norway (NO)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挪威（NO）
- en: Sweden (SE)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瑞典（SE）
- en: 'We want to check for the window of 40 years but with different starting points
    (since 1960, 1965, 1970, 1975). Depending on the OS, you can build a for loop
    in Linux and mac using the bash shell syntax:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望检查40年的窗口，但是使用不同的起始点（从1960年、1965年、1970年、1975年起）。根据操作系统的不同，可以在Linux和mac中使用bash
    shell语法构建for循环：
- en: Shell
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Or, as the shell syntax permits, we can put everything in one line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，由于shell语法允许，我们可以将所有内容放在一行中：
- en: Shell
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Or even better, give some information at each iteration of the loop, and we
    get our script run multiple times:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更好的做法是，在循环的每次迭代中提供一些信息，然后多次运行我们的脚本：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you’re using Windows, you can use the following syntax in command prompt:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Windows，可以在命令提示符中使用以下语法：
- en: MS DOS
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: MS DOS
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'or the following in PowerShell:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在PowerShell中：
- en: PowerShell
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Both should produce the same result.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 两者应该产生相同的结果。
- en: While we can put a similar loop inside our Python script, sometimes it is easier
    if we can do it at the command line. It could be more convenient when we are exploring
    different options. Moreover, by taking the loop outside of the Python code, we
    can be assured that every time we run the script, it is independent because we
    will not share any variables between iterations.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以将类似的循环放在Python脚本中，但有时如果能在命令行中完成会更容易。当我们探索不同的选项时，这可能更加方便。此外，通过将循环移到Python代码之外，我们可以确保每次运行脚本时都是独立的，因为我们不会在迭代之间共享任何变量。
- en: Alternative to command line arguments
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行参数的替代方案
- en: 'Using command line arguments is not the only way to pass in data to your Python
    script. At least, there are several other ways too:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行参数并不是将数据传递给Python脚本的唯一方法。至少还有几种其他方法：
- en: using environment variables
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用环境变量
- en: using config files
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用配置文件
- en: 'Environment variables are features from your OS to keep a small amount of data
    in memory. We can read environment variables in Python using the following syntax:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量是操作系统提供的功能，用于在内存中保留少量数据。我们可以使用以下语法在 Python 中读取环境变量：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For example, in Linux, the above two-line script will work with the shell as
    follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Linux 中，上述两行脚本将在 shell 中如下工作：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In Windows, the syntax inside the command prompt is similar:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中，命令提示符中的语法类似：
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You may also add or edit environment variables in Windows using the dialog
    in the Control Panel:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过控制面板中的对话框在 Windows 中添加或编辑环境变量：
- en: '[![](../Images/23d798dcb84df48ae0025afb7b30d707.png)](https://machinelearningmastery.com/wp-content/uploads/2022/02/Env-Variable.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/23d798dcb84df48ae0025afb7b30d707.png)](https://machinelearningmastery.com/wp-content/uploads/2022/02/Env-Variable.jpg)'
- en: So we may keep the parameters to the script in some environment variables and
    let the script adapt its behavior, like setting up command line arguments.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将参数保存在一些环境变量中，让脚本适应其行为，例如设置命令行参数。
- en: In case we have a lot of options to set, it is better to save the options to
    a file rather than overwhelming the command line. Depending on the format we chose,
    we can use the `configparser` or `json` module from Python to read the Windows
    INI format or JSON format, respectively. We may also use the third-party library
    PyYAML to read the YAML format.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要设置很多选项，最好将这些选项保存到文件中，而不是让命令行变得过于繁杂。根据我们选择的格式，我们可以使用 Python 的 `configparser`
    或 `json` 模块来读取 Windows INI 格式或 JSON 格式。我们也可以使用第三方库 PyYAML 来读取 YAML 格式。
- en: 'For the above example running the ARIMA model on GDP data, we can modify the
    code to use a YAML config file:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述在 GDP 数据上运行 ARIMA 模型的示例，我们可以修改代码以使用 YAML 配置文件：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The YAML config file is named as `config.yaml`, and its content is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 配置文件名为 `config.yaml`，其内容如下：
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then we can run the above code and obtain the same result as before. The JSON
    counterpart is very similar, where we use the `load()` function from the `json` module:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以运行上述代码，并获得与之前相同的结果。JSON 对应的代码非常相似，我们使用 `json` 模块中的 `load()` 函数：
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And the JSON config file, `config.json`, would be:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 配置文件 `config.json` 如下：
- en: '[PRE28]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You may learn more about the syntax of [JSON](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON) and [YAML](https://en.wikipedia.org/wiki/YAML) for
    your project. But the idea here is that we can separate the data and algorithm
    for better reusability of our code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以了解更多关于[JSON](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON)和[YAML](https://en.wikipedia.org/wiki/YAML)的语法，以便于你的项目。但这里的核心理念是，我们可以分离数据和算法，以提高代码的可重用性。
- en: Want to Get Started With Python for Machine Learning?
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想要开始使用 Python 进行机器学习？
- en: Take my free 7-day email crash course now (with sample code).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 立即领取我的免费 7 天电子邮件速成课程（包含示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注册并获得课程的免费 PDF 电子书版本。
- en: Further Reading
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This section provides more resources on the topic if you are looking to go deeper.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了更多关于该主题的资源，如果你想深入了解。
- en: Libraries
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 库
- en: argparse module, [https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: argparse 模块，[https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html)
- en: Pandas Data Reader, [https://pandas-datareader.readthedocs.io/en/latest/](https://pandas-datareader.readthedocs.io/en/latest/)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas Data Reader，[https://pandas-datareader.readthedocs.io/en/latest/](https://pandas-datareader.readthedocs.io/en/latest/)
- en: ARIMA in statsmodels, [https://www.statsmodels.org/devel/generated/statsmodels.tsa.arima.model.ARIMA.html](https://www.statsmodels.org/devel/generated/statsmodels.tsa.arima.model.ARIMA.html)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: statsmodels 中的 ARIMA，[https://www.statsmodels.org/devel/generated/statsmodels.tsa.arima.model.ARIMA.html](https://www.statsmodels.org/devel/generated/statsmodels.tsa.arima.model.ARIMA.html)
- en: configparser module, [https://docs.python.org/3/library/configparser.html](https://docs.python.org/3/library/configparser.html)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: configparser 模块，[https://docs.python.org/3/library/configparser.html](https://docs.python.org/3/library/configparser.html)
- en: json module, [https://docs.python.org/3/library/json.html](https://docs.python.org/3/library/json.html)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: json 模块，[https://docs.python.org/3/library/json.html](https://docs.python.org/3/library/json.html)
- en: PyYAML, [https://pyyaml.org/wiki/PyYAMLDocumentation](https://pyyaml.org/wiki/PyYAMLDocumentation)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyYAML，[https://pyyaml.org/wiki/PyYAMLDocumentation](https://pyyaml.org/wiki/PyYAMLDocumentation)
- en: Articles
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文章
- en: Working with JSON, [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 JSON，[https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON)
- en: YAML on Wikipedia, [https://en.wikipedia.org/wiki/YAML](https://en.wikipedia.org/wiki/YAML)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的 YAML，[https://zh.wikipedia.org/wiki/YAML](https://zh.wikipedia.org/wiki/YAML)
- en: Books
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 书籍
- en: '*Python Cookbook*, third edition, by David Beazley and Brian K. Jones, [https://www.amazon.com/dp/1449340377/](https://www.amazon.com/dp/1449340377/)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python Cookbook*，第三版，作者 David Beazley 和 Brian K. Jones，[https://www.amazon.com/dp/1449340377/](https://www.amazon.com/dp/1449340377/)'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this tutorial, you’ve seen how we can use the command line for more efficient
    control of our Python script. Specifically, you learned:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您已经看到如何使用命令行更有效地控制我们的 Python 脚本。具体来说，您学到了：
- en: How we can pass in parameters to your Python script using the argparse module
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 argparse 模块向您的 Python 脚本传递参数
- en: How we can efficiently control the argparse-enabled Python script in a terminal
    under different OS
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在不同操作系统的终端中高效控制启用 argparse 的 Python 脚本
- en: We can also use environment variables or config files to pass in parameters
    to a Python script
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以使用环境变量或配置文件来向 Python 脚本传递参数
