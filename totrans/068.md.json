["```py\nimport cv2\n\n# Load the image and convert to grayscale\nimg = cv2.imread('image.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n# define each block as 4x4 cells of 64x64 pixels each\ncell_size = (128, 128)      # h x w in pixels\nblock_size = (4, 4)         # h x w in cells\nwin_size = (8, 6)           # h x w in cells\n\nnbins = 9  # number of orientation bins\nimg_size = img.shape[:2]  # h x w in pixels\n\n# create a HOG object\nhog = cv2.HOGDescriptor(\n    _winSize=(win_size[1] * cell_size[1],\n              win_size[0] * cell_size[0]),\n    _blockSize=(block_size[1] * cell_size[1],\n                block_size[0] * cell_size[0]),\n    _blockStride=(cell_size[1], cell_size[0]),\n    _cellSize=(cell_size[1], cell_size[0]),\n    _nbins=nbins\n)\nn_cells = (img_size[0] // cell_size[0], img_size[1] // cell_size[1])\n\n# find features as a 1xN vector, then reshape into spatial hierarchy\nhog_feats = hog.compute(img)\nhog_feats = hog_feats.reshape(\n    n_cells[1] - win_size[1] + 1,\n    n_cells[0] - win_size[0] + 1,\n    win_size[1] - block_size[1] + 1,\n    win_size[0] - block_size[0] + 1,\n    block_size[1],\n    block_size[0],\n    nbins)\nprint(hog_feats.shape)\n```", "```py\nimg[n_cells[1]*i : n_cells[1]*i+(n_cells[1]*win_size[1]),\n    n_cells[0]*j : n_cells[0]*j+(n_cells[0]*win_size[0])]\n```", "```py\nimport cv2\n\n# Load the image and convert it to grayscale\nimg = cv2.imread('people.jpg')\n\nhog = cv2.HOGDescriptor()\nhog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())\n\n# Detect people in the image\nlocations, confidence = hog.detectMultiScale(img)\n\n# Draw rectangles around the detected people\nfor (x, y, w, h) in locations:\n    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 5)\n\n# Display the image with detected people\ncv2.imshow('People', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```"]