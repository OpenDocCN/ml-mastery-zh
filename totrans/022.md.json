["```py\n# Import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\n\n# Prepare data and setup for linear regression\nAmes = pd.read_csv('Ames.csv')\ny = Ames['SalePrice']\nlinear_model = LinearRegression()\n\n# Perform 5-fold cross-validation without Pipeline\ncv_score = cross_val_score(linear_model, Ames[['OverallQual']], y).mean()\nprint(\"Example Without Pipeline, Mean CV R² score for 'OverallQual': {:.3f}\".format(cv_score))\n\n# Perform 5-fold cross-validation WITH Pipeline\npipeline = Pipeline([('regressor', linear_model)])\npipeline_score = cross_val_score(pipeline, Ames[['OverallQual']], y, cv=5).mean()\nprint(\"Example With Pipeline, Mean CV R² for 'OverallQual': {:.3f}\".format(pipeline_score))\n```", "```py\nExample Without Pipeline, Mean CV R² score for 'OverallQual': 0.618\nExample With Pipeline, Mean CV R² for 'OverallQual': 0.618\n```", "```py\n# Import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import FunctionTransformer\n\n# Prepare data and setup for linear regression\nAmes = pd.read_csv('Ames.csv')\ny = Ames['SalePrice']\nlinear_model = LinearRegression()\n\n# Perform 5-fold cross-validation without Pipeline\nAmes['OWA'] = Ames['OverallQual'] * Ames['GrLivArea']\ncv_score_2 = cross_val_score(linear_model, Ames[['OWA']], y).mean()\nprint(\"Example Without Pipeline, Mean CV R² score for 'Quality Weighted Area': {:.3f}\".format(cv_score_2))\n\n# WITH Pipeline\n# Define the transformation function for 'QualityArea'\ndef create_quality_area(X):\n    X['QualityArea'] = X['OverallQual'] * X['GrLivArea']\n    return X[['QualityArea']].values\n\n# Setup the FunctionTransformer using the function\nquality_area_transformer = FunctionTransformer(create_quality_area)\n\n# Pipeline using the engineered feature 'QualityArea'\npipeline_2 = Pipeline([\n    ('quality_area_transform', quality_area_transformer),\n    ('regressor', linear_model)\n])\npipeline_score_2 = cross_val_score(pipeline_2, Ames[['OverallQual', 'GrLivArea']], y, cv=5).mean()\n\n# Output the mean CV scores rounded to four decimal places\nprint(\"Example With Pipeline, Mean CV R² score for 'Quality Weighted Area': {:.3f}\".format(pipeline_score_2))\n```", "```py\nExample Without Pipeline, Mean CV R² score for 'Quality Weighted Area': 0.748\nExample With Pipeline, Mean CV R² score for 'Quality Weighted Area': 0.748\n```", "```py\n# Import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import FunctionTransformer, OneHotEncoder\n\n# Prepare data and setup for linear regression\nAmes = pd.read_csv('Ames.csv')\ny = Ames['SalePrice']\nlinear_model = LinearRegression()\n\n# Function to apply cubic transformation\ndef cubic_transformation(x):\n    return x ** 3\n\n# Function to create 'QualityArea'\ndef create_quality_area(X):\n    X['QualityArea'] = X['OverallQual'] * X['GrLivArea']\n    return X[['QualityArea']].values\n\n# Setup the FunctionTransformer for cubic and quality area transformations\ncubic_transformer = FunctionTransformer(cubic_transformation)\nquality_area_transformer = FunctionTransformer(create_quality_area)\n\n# Setup ColumnTransformer for preprocessing\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cubic', cubic_transformer, ['OverallQual']),\n        ('quality_area_transform', quality_area_transformer, ['OverallQual', 'GrLivArea']),\n        ('onehot', OneHotEncoder(drop='first', handle_unknown='ignore'), ['Neighborhood', 'ExterQual', 'KitchenQual']),\n        ('passthrough', 'passthrough', ['YearBuilt'])\n    ])\n\n# Create the pipeline with the preprocessor and linear regression\npipeline_3 = Pipeline([\n    ('preprocessor', preprocessor),\n    ('regressor', linear_model)\n])\n\n# Evaluate the pipeline using 5-fold cross-validation\npipeline_score_3 = cross_val_score(pipeline_3, Ames, y, cv=5).mean()\n\n# Output the mean CV scores rounded to four decimal places\nprint(\"Mean CV R² score with enhanced transformations: {:.3f}\".format(pipeline_score_3))\n```", "```py\nMean CV R² score with enhanced transformations: 0.850\n```", "```py\n# Import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import FunctionTransformer, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\n\n# Load data\nAmes = pd.read_csv('Ames.csv')\ny = Ames['SalePrice']\nlinear_model = LinearRegression()\n\n# Function to apply cubic transformation\ndef cubic_transformation(x):\n    return x ** 3\n\n# Function to create 'QualityArea'\ndef create_quality_area(X):\n    X['QualityArea'] = X['OverallQual'] * X['GrLivArea']\n    return X[['QualityArea']].values\n\n# Setup the FunctionTransformer for cubic and quality area transformations\ncubic_transformer = FunctionTransformer(cubic_transformation)\nquality_area_transformer = FunctionTransformer(create_quality_area)\n\n# Prepare the BsmtQual imputation and encoding within a nested pipeline\nbsmt_qual_transformer = Pipeline([\n    ('imputer', SimpleImputer(strategy='constant', fill_value='None')),\n    ('encoder', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Setup ColumnTransformer for all preprocessing\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cubic', cubic_transformer, ['OverallQual']),\n        ('quality_area_transform', quality_area_transformer, ['OverallQual', 'GrLivArea']),\n        ('onehot', OneHotEncoder(drop='first', handle_unknown='ignore'), ['Neighborhood', 'ExterQual', 'KitchenQual']),\n        ('bsmt_qual', bsmt_qual_transformer, ['BsmtQual']),  # Adding BsmtQual handling\n        ('passthrough', 'passthrough', ['YearBuilt'])\n    ])\n\n# Create the pipeline with the preprocessor and linear regression\npipeline_4 = Pipeline([\n    ('preprocessor', preprocessor),\n    ('regressor', linear_model)\n])\n\n# Evaluate the pipeline using 5-fold cross-validation\npipeline_score = cross_val_score(pipeline_4, Ames, y, cv=5).mean()\n\n# Output the mean CV scores rounded to four decimal places\nprint(\"Mean CV R² score with imputing & transformations: {:.3f}\".format(pipeline_score))\n```", "```py\nMean CV R² score with imputing & transformations: 0.856\n```"]