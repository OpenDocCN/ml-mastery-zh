["```py\nimport torch\nimport numpy as np \nimport pandas as pd\n```", "```py\nexample_2D_list = [[5, 10, 15, 20],\n                   [25, 30, 35, 40],\n                   [45, 50, 55, 60]]\nlist_to_tensor = torch.tensor(example_2D_list)\nprint(\"Our New 2D Tensor from 2D List is: \", list_to_tensor)\n```", "```py\nOur New 2D Tensor from 2D List is:  tensor([[ 5, 10, 15, 20],\n        [25, 30, 35, 40],\n        [45, 50, 55, 60]])\n```", "```py\nprint(\"Getting the shape of tensor object: \", list_to_tensor.shape)\nprint(\"Getting the size of tensor object: \", list_to_tensor.size())\nprint(\"Getting the dimensions of tensor object: \", list_to_tensor.ndimension())\n```", "```py\nprint(\"Getting the shape of tensor object: \", list_to_tensor.shape)\nprint(\"Getting the size of tensor object: \", list_to_tensor.size())\nprint(\"Getting the dimensions of tensor object: \", list_to_tensor.ndimension())\n```", "```py\n# Converting two_D tensor to numpy array\n\ntwoD_tensor_to_numpy = list_to_tensor.numpy()\nprint(\"Converting two_Dimensional tensor to numpy array:\")\nprint(\"Numpy array after conversion: \", twoD_tensor_to_numpy)\nprint(\"Data type after conversion: \", twoD_tensor_to_numpy.dtype)\n\nprint(\"***************************************************************\")\n\n# Converting numpy array back to a tensor\n\nback_to_tensor = torch.from_numpy(twoD_tensor_to_numpy)\nprint(\"Converting numpy array back to two_Dimensional tensor:\")\nprint(\"Tensor after conversion:\", back_to_tensor)\nprint(\"Data type after conversion: \", back_to_tensor.dtype)\n```", "```py\nConverting two_Dimensional tensor to numpy array:\nNumpy array after conversion:  [[ 5 10 15 20]\n [25 30 35 40]\n [45 50 55 60]]\nData type after conversion:  int64\n***************************************************************\nConverting numpy array back to two_Dimensional tensor:\nTensor after conversion: tensor([[ 5, 10, 15, 20],\n        [25, 30, 35, 40],\n        [45, 50, 55, 60]])\nData type after conversion:  torch.int64\n```", "```py\n# Converting Pandas Dataframe to a Tensor\n\ndataframe = pd.DataFrame({'x':[22,24,26],'y':[42,52,62]})\n\nprint(\"Pandas to numpy conversion: \", dataframe.values)\nprint(\"Data type before tensor conversion: \", dataframe.values.dtype)\n\nprint(\"***********************************************\")\n\npandas_to_tensor = torch.from_numpy(dataframe.values)\nprint(\"Getting new tensor: \", pandas_to_tensor)\nprint(\"Data type after conversion to tensor: \", pandas_to_tensor.dtype)\n```", "```py\nPandas to numpy conversion:  [[22 42]\n [24 52]\n [26 62]]\nData type before tensor conversion:  int64\n***********************************************\nGetting new tensor:  tensor([[22, 42],\n        [24, 52],\n        [26, 62]])\nData type after conversion to tensor:  torch.int64\n```", "```py\nexample_tensor = torch.tensor([[10, 20, 30, 40],\n                               [50, 60, 70, 80],\n                               [90, 100, 110, 120]])\nprint(\"Accessing element in 2nd row and 2nd column: \", example_tensor[1, 1])\nprint(\"Accessing element in 2nd row and 2nd column: \", example_tensor[1][1])\n\nprint(\"********************************************************\")\n\nprint(\"Accessing element in 3rd row and 4th column: \", example_tensor[2, 3])\nprint(\"Accessing element in 3rd row and 4th column: \", example_tensor[2][3])\n```", "```py\nAccessing element in 2nd row and 2nd column:  tensor(60)\nAccessing element in 2nd row and 2nd column:  tensor(60)\n********************************************************\nAccessing element in 3rd row and 4th column:  tensor(120)\nAccessing element in 3rd row and 4th column:  tensor(120)\n```", "```py\nexample_tensor = torch.tensor([[10, 20, 30, 40],\n                               [50, 60, 70, 80],\n                               [90, 100, 110, 120]])\nprint(\"Accessing first two elements of the second row: \", example_tensor[1, 0:2])\nprint(\"Accessing first two elements of the second row: \", example_tensor[1][0:2])\n\nprint(\"********************************************************\")\n\nprint(\"Accessing first three elements of the third row: \", example_tensor[2, 0:3])\nprint(\"Accessing first three elements of the third row: \", example_tensor[2][0:3])\n```", "```py\nexample_tensor = torch.tensor([[10, 20, 30, 40],\n                               [50, 60, 70, 80],\n                               [90, 100, 110, 120]])\nprint(\"Accessing first two elements of the second row: \", example_tensor[1, 0:2])\nprint(\"Accessing first two elements of the second row: \", example_tensor[1][0:2])\n\nprint(\"********************************************************\")\n\nprint(\"Accessing first three elements of the third row: \", example_tensor[2, 0:3])\nprint(\"Accessing first three elements of the third row: \", example_tensor[2][0:3])\n```", "```py\nA = torch.tensor([[5, 10],\n                  [50, 60], \n                  [100, 200]]) \nB = torch.tensor([[10, 20], \n                  [60, 70], \n                  [200, 300]])\nadd = A + B\nprint(\"Adding A and B to get: \", add)\n```", "```py\nAdding A and B to get:  tensor([[ 15,  30],\n        [110, 130],\n        [300, 500]])\n```", "```py\nnew_tensor = torch.tensor([[1, 2, 3], \n                           [4, 5, 6]]) \nmul_scalar = 4 * new_tensor\nprint(\"result of scalar multiplication: \", mul_scalar)\n```", "```py\nresult of scalar multiplication:  tensor([[ 4,  8, 12],\n        [16, 20, 24]])\n```", "```py\nA = torch.tensor([[3, 2, 1], \n                  [1, 2, 1]])\nB = torch.tensor([[3, 2], \n                  [1, 1], \n                  [2, 1]])\nA_mult_B = torch.mm(A, B)\nprint(\"multiplying A with B: \", A_mult_B)\n```", "```py\nmultiplying A with B:  tensor([[13,  9],\n        [ 7,  5]])\n```"]