["```py\nimport torch\n\n# defining the parameters 'w' and 'b'\nw = torch.tensor(3.0, requires_grad = True)\nb = torch.tensor(1.0, requires_grad = True)\n```", "```py\n# function of the linear equation for making predictions\ndef forward(x):\n    y_pred = w * x + b\n    return y_pred\n```", "```py\n# let's predict y_pred at x = 2\nx = torch.tensor([[2.0]])\ny_pred = forward(x)\nprint(\"prediction of y at 'x = 2' is: \", y_pred)\n```", "```py\nprediction of y at 'x = 2' is:  tensor([[7.]], grad_fn=<AddBackward0>)\n```", "```py\n# making predictions at multiple values of x\nx = torch.tensor([[3.0], [4.0]])\ny_pred = forward(x)\nprint(\"prediction of y at 'x = 3 & 4' is: \", y_pred)\n```", "```py\nprediction of y at 'x = 3 & 4' is:  tensor([[10.],\n        [13.]], grad_fn=<AddBackward0>)\n```", "```py\nimport torch\n\n# defining the parameters 'w' and 'b'\nw = torch.tensor(3.0, requires_grad = True)\nb = torch.tensor(1.0, requires_grad = True)\n\n# function of the linear equation for making predictions\ndef forward(x):\n    y_pred = w * x + b\n    return y_pred\n\n# let's predict y_pred at x = 2\nx = torch.tensor([[2.0]])\ny_pred = forward(x)\nprint(\"prediction of y at 'x = 2' is: \", y_pred)\n\n# making predictions at multiple values of x\nx = torch.tensor([[3.0], [4.0]])\ny_pred = forward(x)\nprint(\"prediction of y at 'x = 3 & 4' is: \", y_pred)\n```", "```py\nfrom torch.nn import Linear\ntorch.manual_seed(42)\n```", "```py\nlinear_regression = Linear(in_features=1, out_features=1)\nprint(\"displaying parameters w and b: \",\n      list(linear_regression.parameters()))\n```", "```py\ndisplaying parameters w and b:  [Parameter containing:\ntensor([[0.5153]], requires_grad=True), Parameter containing:\ntensor([-0.4414], requires_grad=True)]\n```", "```py\nprint(\"getting python dictionary: \",linear_regression.state_dict())\nprint(\"dictionary keys: \",linear_regression.state_dict().keys())\nprint(\"dictionary values: \",linear_regression.state_dict().values())\n```", "```py\ngetting python dictionary:  OrderedDict([('weight', tensor([[0.5153]])), ('bias', tensor([-0.4414]))])\ndictionary keys:  odict_keys(['weight', 'bias'])\ndictionary values:  odict_values([tensor([[0.5153]]), tensor([-0.4414])])\n```", "```py\n# make predictions at x = 2\nx = torch.tensor([[2.0]])\ny_pred = linear_regression(x)\nprint(\"getting the prediction for x: \", y_pred)\n```", "```py\ngetting the prediction for x:  tensor([[0.5891]], grad_fn=<AddmmBackward0>)\n```", "```py\n# making predictions at multiple values of x\nx = torch.tensor([[3.0], [4.0]])\ny_pred = linear_regression(x)\nprint(\"prediction of y at 'x = 3 & 4' is: \", y_pred)\n```", "```py\nprediction of y at 'x = 3 & 4' is:  tensor([[1.1044],\n        [1.6197]], grad_fn=<AddmmBackward0>)\n```", "```py\nimport torch\nfrom torch.nn import Linear\n\ntorch.manual_seed(1)\n\nlinear_regression = Linear(in_features=1, out_features=1)\nprint(\"displaying parameters w and b: \", list(linear_regression.parameters()))\nprint(\"getting python dictionary: \",linear_regression.state_dict())\nprint(\"dictionary keys: \",linear_regression.state_dict().keys())\nprint(\"dictionary values: \",linear_regression.state_dict().values())\n\n# make predictions at x = 2\nx = torch.tensor([[2.0]])\ny_pred = linear_regression(x)\nprint(\"getting the prediction for x: \", y_pred)\n\n# making predictions at multiple values of x\nx = torch.tensor([[3.0], [4.0]])\ny_pred = linear_regression(x)\nprint(\"prediction of y at 'x = 3 & 4' is: \", y_pred)\n```", "```py\nfrom torch import nn\n```", "```py\nclass Linear_Regression(nn.Module):\n    def __init__(self, input_sample, output_sample):        \n        # Inheriting properties from the parent calss\n        super(Linear_Regression, self).__init__()\n        self.linear = nn.Linear(input_sample, output_sample)\n\n    # define function to make predictions\n    def forward(self, x):\n        output = self.linear(x)\n        return output\n```", "```py\nmodel = Linear_Regression(input_sample=1, output_sample=1)\nprint(\"printing the model parameters: \", list(model.parameters()))\n```", "```py\nprinting the model parameters:  [Parameter containing:\ntensor([[-0.1939]], requires_grad=True), Parameter containing:\ntensor([0.4694], requires_grad=True)]\n```", "```py\nx = torch.tensor([[2.0]])\ny_pred = model(x)\nprint(\"getting the prediction for x: \", y_pred)\n```", "```py\ngetting the prediction for x:  tensor([[0.0816]], grad_fn=<AddmmBackward0>)\n```", "```py\nx = torch.tensor([[3.0], [4.0]])\ny_pred = model(x)\nprint(\"prediction of y at 'x = 3 & 4' is: \", y_pred)\n```", "```py\nprediction of y at 'x = 3 & 4' is:  tensor([[-0.1122],\n        [-0.3061]], grad_fn=<AddmmBackward0>)\n```", "```py\nimport torch\nfrom torch import nn\n\ntorch.manual_seed(42)\n\nclass Linear_Regression(nn.Module):\n    def __init__(self, input_sample, output_sample):\n        # Inheriting properties from the parent calss\n        super(Linear_Regression, self).__init__()\n        self.linear = nn.Linear(input_sample, output_sample)\n\n    # define function to make predictions\n    def forward(self, x):\n        output = self.linear(x)\n        return output\n\nmodel = Linear_Regression(input_sample=1, output_sample=1)\nprint(\"printing the model parameters: \", list(model.parameters()))\n\nx = torch.tensor([[2.0]])\ny_pred = model(x)\nprint(\"getting the prediction for x: \", y_pred)\n\nx = torch.tensor([[3.0], [4.0]])\ny_pred = model(x)\nprint(\"prediction of y at 'x = 3 & 4' is: \", y_pred)\n```"]