- en: Applications of Derivatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/applications-of-derivatives/](https://machinelearningmastery.com/applications-of-derivatives/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The derivative defines the rate at which one variable changes with respect to
    another.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is an important concept that comes in extremely useful in many applications:
    in everyday life, the derivative can tell you at which speed you are driving,
    or help you predict fluctuations on the stock market; in machine learning, derivatives
    are important for function optimization.'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will explore different applications of derivatives, starting with
    the more familiar ones before moving to machine learning. We will be taking a
    closer look at what the derivatives tell us about the different functions we are
    studying.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, you will discover different applications of derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing this tutorial, you will know:'
  prefs: []
  type: TYPE_NORMAL
- en: The use of derivatives can be applied to real-life problems that we find around
    us.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of derivatives is essential in machine learning, for function optimization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/0e073b5576f37075edd8c26f58427fef.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/applications_cover-scaled.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Applications of Derivatives
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Devon Janse van Rensburg](https://unsplash.com/photos/QT0q-nPWIII),
    some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tutorial Overview**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This tutorial is divided into two parts; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: Applications of Derivatives in Real-Life
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications of Derivatives in Optimization Algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applications of Derivatives in Real-Life**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen that derivatives model rates of change.
  prefs: []
  type: TYPE_NORMAL
- en: '*Derivatives answer questions like “How fast?” “How steep?” and “How sensitive?”
    These are all questions about rates of change in one form or another. *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*– Page 141, [Infinite Powers](https://www.amazon.com/Infinite-Powers-Calculus-Reveals-Universe/dp/0358299284/ref=as_li_ss_tl?dchild=1&keywords=joy+of+x&qid=1606170381&sr=8-2&linkCode=sl1&tag=inspiredalgor-20&linkId=17ed7cfdd9b7dd013730d0699a8652a1&language=en_US),
    2019.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This rate of change is denoted by, ????*y* / ????*x*, hence defining a change
    in the dependent variable, ????*y*, with respect to a change in the independent
    variable, ????*x*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start off with one of the most familiar applications of derivatives that
    we can find around us.
  prefs: []
  type: TYPE_NORMAL
- en: '*Every time you get in your car, you witness differentiation. *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*– Page 178, [Calculus for Dummies](https://www.amazon.com/Calculus-Dummies-Math-Science/dp/1119293499/ref=as_li_ss_tl?dchild=1&keywords=calculus&qid=1606170839&sr=8-2&linkCode=sl1&tag=inspiredalgor-20&linkId=539ed0b89e326b6eb27b1a9a028e9cee&language=en_US),
    2016.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When we say that a car is moving at 100 kilometers an hour, we would have just
    stated its rate of change. The common term that we often use is *speed* or *velocity*,
    although it would be best that we first distinguish between the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'In everyday life, we often use *speed* and *velocity* interchangeably if we
    are describing the rate of change of a moving object. However, this in not mathematically
    correct because speed is always positive, whereas velocity introduces a notion
    of direction and, hence, can exhibit both positive and negative values. Hence,
    in the ensuing explanation, we shall consider velocity as the more technical concept,
    defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: velocity = ????*y* / ????*t*
  prefs: []
  type: TYPE_NORMAL
- en: This means that velocity gives the change in the car’s position, ????*y*, within
    an interval of time, ????*t*. In other words, velocity is the *first derivative*
    of position with respect to time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The car’s velocity can remain constant, such as if the car keeps on travelling
    at 100 kilometers an hour consistently, or it can also change as a function of
    time. In case of the latter, this means that the velocity function itself is changing
    as a function of time, or in simpler terms, the car can be said to be *accelerating*.
    Acceleration is defined as the first derivative of velocity, *v*, and the second
    derivative of position, *y*, with respect to time:'
  prefs: []
  type: TYPE_NORMAL
- en: acceleration = ????*v* / ????*t =* ????*²**y* / ????*t**²*
  prefs: []
  type: TYPE_NORMAL
- en: 'We can graph the position, velocity and acceleration curves to visualize them
    better. Suppose that the car’s position, as a function of time, is given by *y*(*t*)
    = *t*³ – 8*t*² + 40*t*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/3e26b032057f157e712745d0115a7c78.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/applications_1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plot of the Car’s Position Against Time
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph indicates that the car’s position changes slowly at the beginning
    of the journey, slowing down slightly until around t = 2.7s, at which point its
    rate of change picks up and continues increasing until the end of the journey.
    This is depicted by the graph of the car’s velocity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/bd4b8ce069e6321b3a9ae4192d7cb89c.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/applications_2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plot of the Car’s Velocity Against Time
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the car retains a positive velocity throughout the journey, and
    this is because it never changes direction. Hence, if we had to imagine ourselves
    sitting in this moving car, the speedometer would be showing us the values that
    we have just plotted on the velocity graph (since the velocity remains positive
    throughout, otherwise we would have to find the absolute value of the velocity
    to work out the speed). If we had to apply the power rule to *y*(*t*) to find
    its derivative, then we would find that the velocity is defined by the following
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '*v*(*t*) = *y*’(*t*) = 3*t*² – 16*t* + 40'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also plot the acceleration graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/0af02df1a687197dfbc2b2124e1769a1.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/applications_3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plot of the Car’s Acceleration Against Time
  prefs: []
  type: TYPE_NORMAL
- en: 'We find that the graph is now characterised by negative acceleration in the
    time interval, *t* = [0, 2.7) seconds. This is because acceleration is the derivative
    of velocity, and within this time interval the car’s velocity is decreasing. If
    we had to, again, apply the power rule to *v*(*t*) to find its derivative, then
    we would find that the acceleration is defined by the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '*a*(*t*) = *v*’(*t*) = 6*t* – 16'
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting all functions together, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*y*(*t*) = *t*³ – 8*t*² + 40*t*'
  prefs: []
  type: TYPE_NORMAL
- en: '*v*(*t*) = *y*’(*t*) = 3*t*² – 16*t* + 40'
  prefs: []
  type: TYPE_NORMAL
- en: '*a*(*t*) = *v*’(*t*) = 6*t* – 16'
  prefs: []
  type: TYPE_NORMAL
- en: If we substitute for *t* = 10s, we can use these three functions to find that
    by the end of the journey, the car has travelled 600m, its velocity is 180 m/s,
    and it is accelerating at 44 m/s². We can verify that all of these values tally
    with the graphs that we have just plotted.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have framed this particular example within the context of finding a car’s
    velocity and acceleration. But there is a plethora of real-life phenomena that
    change with time (or variables other than time), which can be studied by applying
    the concept of derivatives as we have just done for this particular example. To
    name a few:'
  prefs: []
  type: TYPE_NORMAL
- en: Growth rate of a population (be it a collection of humans, or a colony of bacteria)
    over time, which can be used to predict changes in population size in the near
    future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in temperature as a function of location, which can be used for weather
    forecasting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fluctuations of the stock market over time, which can be used to predict future
    stock market behaviour.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Derivatives also provide salient information in solving optimization problems,
    as we shall be seeing next.
  prefs: []
  type: TYPE_NORMAL
- en: '**Applications of Derivatives in Optimization Algorithms**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We had [already seen](https://machinelearningmastery.com/calculus-in-machine-learning-why-it-works/)
    that an optimization algorithm, such as gradient descent, seeks to reach the global
    minimum of an error (or cost) function by applying the use of derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at what the derivatives tell us about the error function,
    by going through the same exercise as we have done for the car example.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, let’s consider the following [one-dimensional test function
    for function optimization](https://machinelearningmastery.com/1d-test-functions-for-function-optimization/):'
  prefs: []
  type: TYPE_NORMAL
- en: '*f*(*x*) = –*x* sin(*x*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can apply the product rule to *f*(*x*) to find its first derivative, denoted
    by *f*’(*x*), and then again apply the product rule to *f*’(*x*) to find the second
    derivative, denoted by *f*’’(*x*):'
  prefs: []
  type: TYPE_NORMAL
- en: '*f*’(*x*) = -sin(*x*) – *x* cos(*x*)'
  prefs: []
  type: TYPE_NORMAL
- en: '*f*’’(*x*) = *x* sin(*x*) – 2 cos(*x*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can plot these three functions for different values of *x* to visualize
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/86107f835063ca2455fb6180f0e82fa0.png)](https://machinelearningmastery.com/wp-content/uploads/2021/06/applications_4.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Line Plot of Function, *f*(*x*), its first derivative, *f*‘(*x*), and its second
    derivative, *f*”(*x*)
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to what we have observed earlier for the car example, the graph of
    the first derivative indicates how *f*(*x*) is changing and by how much. For example,
    a positive derivative indicates that *f*(*x*) is an increasing function, whereas
    a negative derivative tells us that *f*(*x*) is now decreasing. Hence, if in its
    search for a function minimum, the optimization algorithm performs small changes
    to the input based on its learning rate, ε:'
  prefs: []
  type: TYPE_NORMAL
- en: '*x_new = x* – ε *f*’(*x*)'
  prefs: []
  type: TYPE_NORMAL
- en: Then the algorithm can reduce *f*(*x*) by moving to the opposite direction (by
    inverting the sign) of the derivative.
  prefs: []
  type: TYPE_NORMAL
- en: We might also be interested in finding the second derivative of a function.
  prefs: []
  type: TYPE_NORMAL
- en: '*We can think of the second derivative as measuring curvature. *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*– Page 86, [Deep Learning](https://www.amazon.com/Deep-Learning-Adaptive-Computation-Machine/dp/0262035618/ref=sr_1_1?dchild=1&keywords=deep+learning&qid=1622968138&sr=8-1),
    2017.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, if the algorithm arrives at a critical point at which the first
    derivative is zero, it cannot distinguish between this point being a local maximum,
    a local minimum, a saddle point or a flat region based on *f*’(*x*) alone. However,
    when the second derivative intervenes, the algorithm can tell that the critical
    point in question is a local minimum if the second derivative is greater than
    zero. For a local maximum, the second derivative is smaller than zero. Hence,
    the second derivative can inform the optimization algorithm on which direction
    to move. Unfortunately, this test remains inconclusive for saddle points and flat
    regions, for which the second derivative is zero in both cases.
  prefs: []
  type: TYPE_NORMAL
- en: Optimization algorithms based on gradient descent do not make use of second
    order derivatives and are, therefore, known as *first-order optimization algorithms*.
    Optimization algorithms, such as Newton’s method, that exploit the use of second
    derivatives, are otherwise called *second-order optimization algorithms*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Further Reading**'
  prefs: []
  type: TYPE_NORMAL
- en: This section provides more resources on the topic if you are looking to go deeper.
  prefs: []
  type: TYPE_NORMAL
- en: '**Books**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Calculus for Dummies](https://www.amazon.com/Calculus-Dummies-Math-Science/dp/1119293499/ref=as_li_ss_tl?dchild=1&keywords=calculus&qid=1606170839&sr=8-2&linkCode=sl1&tag=inspiredalgor-20&linkId=539ed0b89e326b6eb27b1a9a028e9cee&language=en_US),
    2016.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Infinite Powers](https://www.amazon.com/Infinite-Powers-Calculus-Reveals-Universe/dp/0358299284/ref=as_li_ss_tl?dchild=1&keywords=joy+of+x&qid=1606170381&sr=8-2&linkCode=sl1&tag=inspiredalgor-20&linkId=17ed7cfdd9b7dd013730d0699a8652a1&language=en_US),
    2020.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deep Learning](https://www.amazon.com/Deep-Learning-Adaptive-Computation-Machine/dp/0262035618/ref=sr_1_1?dchild=1&keywords=deep+learning&qid=1622968138&sr=8-1),
    2017.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Algorithms for Optimization](https://www.amazon.com/Algorithms-Optimization-Press-Mykel-Kochenderfer/dp/0262039427/ref=sr_1_1?dchild=1&keywords=algorithms+for+optimization&qid=1624019308&sr=8-1),
    2019.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, you discovered different applications of derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: The use of derivatives can be applied to real-life problems that we find around
    us.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of derivatives is essential in machine learning, for function optimization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any questions?
  prefs: []
  type: TYPE_NORMAL
- en: Ask your questions in the comments below and I will do my best to answer.
  prefs: []
  type: TYPE_NORMAL
