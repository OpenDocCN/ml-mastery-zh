["```py\nimport torch\ntorch.manual_seed(42)\n\n# Setting weights and bias\nw = torch.tensor([[3.0], \n                  [4.0]], requires_grad=True)\nb = torch.tensor([[1.0]], requires_grad=True)\n```", "```py\n# Defining our forward function for prediction\ndef forward(x):\n    # using mm module for matrix multiplication \n    y_pred = torch.mm(x, w) + b\n    return y_pred\n```", "```py\n# define a tensor 'x'\nx = torch.tensor([[2.0, 4.0]])\n# predict the value with forward function\ny_pred = forward(x)\n# show the result\nprint(\"Printing Prediction: \", y_pred)\n```", "```py\nPrinting Prediction:  tensor([[23.]], grad_fn=<AddBackward0>)\n```", "```py\n# define a tensor 'X' with multiple rows\nX = torch.tensor([[1.0, 2.0],\n                  [3.0, 4.0], \n                  [5.0, 6.0]])\n```", "```py\n# Making predictions for Multi-Dimensional tensor \"X\"\ny_pred = forward(X)\nprint(\"Predictions for 'X': \", y_pred)\n```", "```py\nPredictions for 'X':  tensor([[12.],\n        [26.],\n        [40.]], grad_fn=<AddBackward0>)\n```", "```py\n# using Pytorch's own built-in fuction to define the LR model\nlr_model = torch.nn.Linear(in_features=2, out_features=1)\n```", "```py\n# Making predictions for X\ny_pred = lr_model(X)\nprint(\"Predictions for 'X': \", y_pred)\n```", "```py\nPredictions for 'X':  tensor([[-0.5754],\n        [-1.2430],\n        [-1.9106]], grad_fn=<AddmmBackward0>)\n```", "```py\n...\n# creating custom modules with package 'nn.Module'\nclass LR(torch.nn.Module):\n    # Object Constructor\n    def __init__(self, input_features, output_features):\n        super().__init__()\n        self.linear = torch.nn.Linear(input_features, output_features)\n    # define the forward function for prediction\n    def forward(self, x):\n        y_pred = self.linear(x)\n        return y_pred\n```", "```py\n# build the model object\nLR_model = LR(2, 1)\n```", "```py\n# make predictions for multiple input samples of 'X'\ny_pred  = LR_model(X)\nprint(\"Predictions for 'X': \", y_pred)\n```", "```py\nPredictions for 'X':  tensor([[0.3405],\n        [0.5596],\n        [0.7787]], grad_fn=<AddmmBackward0>)\n```", "```py\nprint(list(LR_model.parameters()))\n```", "```py\n[Parameter containing:\ntensor([[ 0.6496, -0.1549]], requires_grad=True), Parameter containing:\ntensor([0.1427], requires_grad=True)]\n```", "```py\nimport torch\n\n# Setting weights and bias\nw = torch.tensor([[3.0], \n                  [4.0]], requires_grad=True)\nb = torch.tensor([[1.0]], requires_grad=True)\n\n# Defining our forward function for prediction\ndef forward(x):\n    # using .mm module for matrix multiplication \n    y_pred = torch.mm(x, w) + b\n    return y_pred\n\n# define a tensor 'x'\nx = torch.tensor([[2.0, 4.0]])\n# predict the value with forward function\ny_pred = forward(x)\n# show the result\nprint(\"Printing Prediction: \", y_pred)\n\n# define a tensor 'X' with multiple rows\nX = torch.tensor([[1.0, 2.0],\n                  [3.0, 4.0], \n                  [5.0, 6.0]])\n\n# Making predictions for Multi-Dimensional tensor \"X\"\ny_pred = forward(X)\nprint(\"Predictions for 'X': \", y_pred)\n\n# using Pytorch's own built-in fuction to define the LR model\nlr_model = torch.nn.Linear(in_features=2, out_features=1)\n\n# Making predictions for X\ny_pred = lr_model(X)\nprint(\"Predictions for 'X': \", y_pred)\n\n# creating custom modules with package 'nn.Module'\nclass LR(torch.nn.Module):\n    # Object Constructor\n    def __init__(self, input_features, output_features):\n        super().__init__()\n        self.linear = torch.nn.Linear(input_features, output_features)\n    # define the forward function for prediction\n    def forward(self, x):\n        y_pred = self.linear(x)\n        return y_pred\n\n# build the model object\nLR_model = LR(2, 1)\n\n# make predictions for multiple input samples of 'X'\ny_pred  = LR_model(X)\nprint(\"Predictions for 'X': \", y_pred)\n\nprint(list(LR_model.parameters()))\n```"]