["```py\nimport matplotlib.pyplot as plt\nimport torch\n```", "```py\nx = torch.tensor(3.0, requires_grad = True)\nprint(\"creating a tensor x: \", x)\n```", "```py\ncreating a tensor x:  tensor(3., requires_grad=True)\n```", "```py\ny = 3 * x ** 2\nprint(\"Result of the equation is: \", y)\ny.backward()\nprint(\"Dervative of the equation at x = 3 is: \", x.grad)\n```", "```py\nResult of the equation is:  tensor(27., grad_fn=<MulBackward0>)\nDervative of the equation at x = 3 is:  tensor(18.)\n```", "```py\nprint('data attribute of the tensor:',x.data)\nprint('grad attribute of the tensor::',x.grad)\nprint('grad_fn attribute of the tensor::',x.grad_fn)\nprint(\"is_leaf attribute of the tensor::\",x.is_leaf)\nprint(\"requires_grad attribute of the tensor::\",x.requires_grad)\n```", "```py\ndata attribute of the tensor: tensor(3.)\ngrad attribute of the tensor:: tensor(18.)\ngrad_fn attribute of the tensor:: None\nis_leaf attribute of the tensor:: True\nrequires_grad attribute of the tensor:: True\n```", "```py\nprint('data attribute of the tensor:',y.data)\nprint('grad attribute of the tensor:',y.grad)\nprint('grad_fn attribute of the tensor:',y.grad_fn)\nprint(\"is_leaf attribute of the tensor:\",y.is_leaf)\nprint(\"requires_grad attribute of the tensor:\",y.requires_grad)\n```", "```py\nprint('data attribute of the tensor:',y.data)\nprint('grad attribute of the tensor:',y.grad)\nprint('grad_fn attribute of the tensor:',y.grad_fn)\nprint(\"is_leaf attribute of the tensor:\",y.is_leaf)\nprint(\"requires_grad attribute of the tensor:\",y.requires_grad)\n```", "```py\nx = torch.tensor(3.0, requires_grad = True)\ny = 6 * x ** 2 + 2 * x + 4\nprint(\"Result of the equation is: \", y)\ny.backward()\nprint(\"Derivative of the equation at x = 3 is: \", x.grad)\n```", "```py\nResult of the equation is:  tensor(64., grad_fn=<AddBackward0>)\nDerivative of the equation at x = 3 is:  tensor(38.)\n```", "```py\nu = torch.tensor(3., requires_grad=True)\nv = torch.tensor(4., requires_grad=True)\n\nf = u**3 + v**2 + 4*u*v\n\nprint(u)\nprint(v)\nprint(f)\n\nf.backward()\nprint(\"Partial derivative with respect to u: \", u.grad)\nprint(\"Partial derivative with respect to v: \", v.grad)\n```", "```py\ntensor(3., requires_grad=True)\ntensor(4., requires_grad=True)\ntensor(91., grad_fn=<AddBackward0>)\nPartial derivative with respect to u:  tensor(43.)\nPartial derivative with respect to v:  tensor(20.)\n```", "```py\n# compute the derivative of the function with multiple values\nx = torch.linspace(-20, 20, 20, requires_grad = True)\nY = x ** 2\ny = torch.sum(Y)\ny.backward()\n\n# ploting the function and derivative\nfunction_line, = plt.plot(x.detach().numpy(), Y.detach().numpy(), label = 'Function')\nfunction_line.set_color(\"red\")\nderivative_line, = plt.plot(x.detach().numpy(), x.grad.detach().numpy(), label = 'Derivative')\nderivative_line.set_color(\"green\")\nplt.xlabel('x')\nplt.legend()\nplt.show()\n```"]