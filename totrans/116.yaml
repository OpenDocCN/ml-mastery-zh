- en: 'PyTorch Tutorial: How to Develop Deep Learning Models with Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch 教程：如何使用 Python 开发深度学习模型
- en: 原文：[https://machinelearningmastery.com/pytorch-tutorial-develop-deep-learning-models/](https://machinelearningmastery.com/pytorch-tutorial-develop-deep-learning-models/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/pytorch-tutorial-develop-deep-learning-models/](https://machinelearningmastery.com/pytorch-tutorial-develop-deep-learning-models/)
- en: Predictive modeling with deep learning is a skill that modern developers need
    to know.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 进行深度学习的预测建模是现代开发者需要掌握的一项技能。
- en: PyTorch is the premier open-source deep learning framework developed and maintained
    by Facebook.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 是由 Facebook 开发和维护的顶级开源深度学习框架。
- en: At its core, PyTorch is a mathematical library that allows you to perform efficient
    computation and automatic differentiation on graph-based models. Achieving this
    directly is challenging, although thankfully, the modern PyTorch API provides
    classes and idioms that allow you to easily develop a suite of deep learning models.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，PyTorch 是一个数学库，允许你对基于图的模型进行高效计算和自动微分。虽然直接实现这一点具有挑战性，但幸运的是，现代的 PyTorch
    API 提供了类和习惯用法，使你可以轻松开发一系列深度学习模型。
- en: In this tutorial, you will discover a step-by-step guide to developing deep
    learning models in PyTorch.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你将发现一个逐步指导，帮助你在 PyTorch 中开发深度学习模型。
- en: 'After completing this tutorial, you will know:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本教程后，你将了解：
- en: The difference between Torch and PyTorch and how to install and confirm PyTorch
    is working.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Torch 和 PyTorch 之间的区别以及如何安装和确认 PyTorch 是否正常工作。
- en: The five-step life-cycle of PyTorch models and how to define, fit, and evaluate
    models.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch 模型的五个生命周期步骤，以及如何定义、训练和评估模型。
- en: How to develop PyTorch deep learning models for regression, classification,
    and predictive modeling tasks.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为回归、分类和预测建模任务开发 PyTorch 深度学习模型。
- en: '**Kick-start your project** with my book [Deep Learning with PyTorch](https://machinelearningmastery.com/deep-learning-with-pytorch/).
    It provides **self-study tutorials** with **working code**.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过我的书籍开始你的项目**，[《深度学习与 PyTorch》](https://machinelearningmastery.com/deep-learning-with-pytorch/)。它提供了**自学教程**和**可运行的代码**。'
- en: Let’s get started.![PyTorch Tutorial - How to Develop Deep Learning Models](../Images/13ff658685e88a714278b5d716b7a04a.png)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。![PyTorch 教程 - 如何开发深度学习模型](../Images/13ff658685e88a714278b5d716b7a04a.png)
- en: PyTorch Tutorial – How to Develop Deep Learning Models
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 教程 – 如何开发深度学习模型
- en: Photo by [Dimitry B](https://flickr.com/photos/ru_boff/14863560864/)., some
    rights reserved.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Dimitry B](https://flickr.com/photos/ru_boff/14863560864/)。保留了一些权利。
- en: PyTorch Tutorial Overview
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyTorch 教程概述
- en: The focus of this tutorial is on using the PyTorch API for common deep learning
    model development tasks; we will not be diving into the math and theory of deep
    learning. For that, I recommend [starting with this excellent book](https://amzn.to/2Y8JuBv).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的重点是使用 PyTorch API 进行常见的深度学习模型开发任务；我们不会深入探讨深度学习的数学和理论。关于这些，我推荐[从这本优秀的书籍开始](https://amzn.to/2Y8JuBv)。
- en: The best way to learn deep learning in python is by doing. Dive in. You can
    circle back for more theory later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Python 深度学习的最佳方式是动手实践。直接深入，你可以稍后再回顾理论。
- en: I have designed each code example to use best practices and to be standalone
    so that you can copy and paste it directly into your project and adapt it to your
    specific needs. This will give you a massive head start over trying to figure
    out the API from official documentation alone.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我设计了每个代码示例以使用最佳实践，并使其独立，以便你可以直接复制并粘贴到你的项目中，并根据你的具体需求进行调整。这将使你比仅依赖官方文档快速掌握 API
    领先一步。
- en: 'It is a large tutorial, and as such, it is divided into three parts; they are:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个大型教程，因此分为三个部分；它们是：
- en: How to Install PyTorch
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何安装 PyTorch
- en: What Are Torch and PyTorch?
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Torch 和 PyTorch？
- en: How to Install PyTorch
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何安装 PyTorch
- en: How to Confirm PyTorch Is Installed
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何确认 PyTorch 已安装
- en: PyTorch Deep Learning Model Life-Cycle
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyTorch 深度学习模型生命周期
- en: 'Step 1: Prepare the Data'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤 1：准备数据
- en: 'Step 2: Define the Model'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤 2：定义模型
- en: 'Step 3: Train the Model'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤 3：训练模型
- en: 'Step 4: Evaluate the Model'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤 4：评估模型
- en: 'Step 5: Make Predictions'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤 5：进行预测
- en: How to Develop PyTorch Deep Learning Models
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何开发 PyTorch 深度学习模型
- en: How to Develop an MLP for Binary Classification
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为二类分类开发 MLP
- en: How to Develop an MLP for Multiclass Classification
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为多类分类开发 MLP
- en: How to Develop an MLP for Regression
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为回归开发 MLP
- en: How to Develop a CNN for Image Classification
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为图像分类开发 CNN
- en: You Can Do Deep Learning in Python!
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你可以在 Python 中进行深度学习！
- en: Work through this tutorial. It will take you 60 minutes, max!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个教程。最多花费 60 分钟！
- en: '**You do not need to understand everything (at least not right now)**. Your
    goal is to run through the tutorial end-to-end and get a result. You do not need
    to understand everything on the first pass. List down your questions as you go.
    Make heavy use of the API documentation to learn about all of the functions that
    you’re using.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**你不需要完全理解一切（至少现在不需要）**。你的目标是从头到尾运行教程并获得结果。你不需要在第一遍完全理解一切。在进行过程中列出你的问题。大量使用
    API 文档来学习你正在使用的所有函数。'
- en: '**You do not need to know the math first**. Math is a compact way of describing
    how algorithms work, specifically tools from linear algebra, probability, and
    calculus. These are not the only tools that you can use to learn how algorithms
    work. You can also use code and explore algorithm behavior with different inputs
    and outputs. Knowing the math will not tell you what algorithm to choose or how
    to best configure it. You can only discover that through carefully controlled
    experiments.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**你不需要首先了解数学**。数学是描述算法工作原理的紧凑方式，特别是线性代数、概率和微积分工具。这些不是你学习算法工作的唯一工具。你也可以使用代码，并通过不同的输入和输出探索算法行为。了解数学不会告诉你选择哪种算法或如何最佳配置它。只有通过精心控制的实验才能发现这一点。'
- en: '**You do not need to know how the algorithms work**. It is important to know
    about the limitations and how to configure deep learning algorithms. But learning
    about algorithms can come later. You need to build up this algorithm knowledge
    slowly over a long period of time. Today, start by getting comfortable with the
    platform.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**你不需要知道算法如何工作**。了解深度学习算法的限制和如何配置是重要的，但学习算法可以稍后再做。你需要在较长的时间内慢慢建立起这方面的知识。今天，先熟悉平台的使用。'
- en: '**You do not need to be a Python programmer**. The syntax of the Python language
    can be intuitive if you are new to it. Just like other languages, focus on function
    calls (e.g. function()) and assignments (e.g. a = “b”). This will get you most
    of the way. You are a developer; you know how to pick up the basics of a language
    really fast. Just get started and dive into the details later.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**你不需要成为 Python 程序员**。如果你是新手，Python 语言的语法可能很直观。和其他语言一样，专注于函数调用（例如 function()）和赋值（例如
    a = "b"）。这将让你快速掌握语言的基础知识。你是开发者；你知道如何快速掌握一门语言的基础知识。开始动手，详细内容稍后再深入了解。'
- en: '**You do not need to be a deep learning expert**. You can learn about the benefits
    and limitations of various algorithms later, and there are plenty of tutorials
    that you can read to brush up on the steps of a deep learning project.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**你不需要成为深度学习专家**。你可以稍后了解各种算法的优缺点，有很多教程可以帮助你了解深度学习项目的步骤。'
- en: 1\. How to Install PyTorch
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 如何安装 PyTorch
- en: In this section, you will discover what PyTorch is, how to install it, and how
    to confirm that it is installed correctly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，你将了解 PyTorch 是什么，如何安装它以及如何确认安装正确。
- en: 1.1\. What Are Torch and PyTorch?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.1\. Torch 和 PyTorch 是什么？
- en: '[PyTorch](https://github.com/pytorch/pytorch) is an open-source Python library
    for deep learning developed and maintained by Facebook.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyTorch](https://github.com/pytorch/pytorch) 是一个由 Facebook 开发和维护的开源 Python
    深度学习库。'
- en: The project started in 2016 and quickly became a popular framework among developers
    and researchers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目始于 2016 年，并迅速成为开发者和研究人员中流行的框架。
- en: '[Torch](https://github.com/torch/torch7) (*Torch7*) is an open-source project
    for deep learning written in C and generally used via the Lua interface. It was
    a precursor project to PyTorch and is no longer actively developed. PyTorch includes
    “*Torch*” in the name, acknowledging the prior torch library with the “*Py*” prefix
    indicating the Python focus of the new project.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[Torch](https://github.com/torch/torch7)（*Torch7*）是一个用 C 语言编写的开源深度学习项目，通常通过
    Lua 接口使用。它是 PyTorch 的前身项目，目前已不再积极开发。PyTorch 在其名称中包含了“*Torch*”，以示尊重先前的 torch 库，“*Py*”前缀表示新项目专注于
    Python。'
- en: The PyTorch API is simple and flexible, making it a favorite for academics and
    researchers in the development of new deep learning models and applications. The
    extensive use has led to many extensions for specific applications (such as text,
    computer vision, and audio data), and may pre-trained models that can be used
    directly. As such, it may be the most popular library used by academics.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch API 简单且灵活，使其成为学术界和研究人员开发新深度学习模型和应用的最爱。广泛的使用导致了许多针对特定应用的扩展（例如文本、计算机视觉和音频数据），以及可能直接使用的预训练模型。因此，它可能是学术界使用的最受欢迎的库。
- en: The flexibility of PyTorch comes at the cost of ease of use, especially for
    beginners, as compared to simpler interfaces like [Keras](https://machinelearningmastery.com/tensorflow-tutorial-deep-learning-with-tf-keras/).
    The choice to use PyTorch instead of Keras gives up some ease of use, a slightly
    steeper learning curve, and more code for more flexibility, and perhaps a more
    vibrant academic community.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于更简单的接口如[Keras](https://machinelearningmastery.com/tensorflow-tutorial-deep-learning-with-tf-keras/)，PyTorch
    的灵活性以易用性为代价，特别是对于初学者。选择使用 PyTorch 而不是 Keras 会放弃一些易用性、稍微陡峭的学习曲线和更多的代码以获得更多的灵活性，也许还有一个更活跃的学术社区。
- en: 1.2\. How to Install PyTorch
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2. 如何安装 PyTorch
- en: Before installing PyTorch, ensure that you have Python installed, such as Python
    3.6 or higher.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 PyTorch 之前，请确保你已经安装了 Python，例如 Python 3.6 或更高版本。
- en: 'If you don’t have Python installed, you can install it using Anaconda. This
    tutorial will show you how:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装 Python，你可以使用 Anaconda 安装。这个教程将向你展示如何：
- en: '[How to Setup Your Python Environment for Machine Learning With Anaconda](https://machinelearningmastery.com/setup-python-environment-machine-learning-deep-learning-anaconda/)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Anaconda 设置 Python 环境进行机器学习](https://machinelearningmastery.com/setup-python-environment-machine-learning-deep-learning-anaconda/)'
- en: There are many ways to install the PyTorch open-source deep learning library.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以安装 PyTorch 开源深度学习库。
- en: The most common, and perhaps simplest, way to install PyTorch on your workstation
    is by using pip.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作站上安装 PyTorch 最常见，也许最简单的方法是使用 pip。
- en: 'For example, on the command line, you can type:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在命令行中，你可以输入：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Perhaps the most popular application of deep learning is for [computer vision](https://machinelearningmastery.com/what-is-computer-vision/),
    and the PyTorch computer vision package is called “[torchvision](https://github.com/pytorch/vision/tree/master/torchvision).”
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习最流行的应用之一是[计算机视觉](https://machinelearningmastery.com/what-is-computer-vision/)，而
    PyTorch 的计算机视觉包被称为“[torchvision](https://github.com/pytorch/vision/tree/master/torchvision)。”
- en: 'Installing torchvision is also highly recommended and it can be installed as
    follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议同时安装 torchvision，可以按照以下方法安装：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you prefer to use an installation method more specific to your platform
    or package manager, you can see a complete list of installation instructions here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更愿意使用更具体于你的平台或包管理器的安装方法，你可以在这里查看完整的安装说明：
- en: '[PyTorch Installation Guide](https://pytorch.org/get-started/locally/)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch 安装指南](https://pytorch.org/get-started/locally/)'
- en: There is no need to set up the GPU now.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在无需设置 GPU。
- en: All examples in this tutorial will work just fine on a modern CPU. If you want
    to configure PyTorch for your GPU, you can do that after completing this tutorial.
    Don’t get distracted!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中的所有示例在现代 CPU 上都能正常运行。如果你想为 GPU 配置 PyTorch，可以在完成本教程后进行。不要分心！
- en: 1.3\. How to Confirm PyTorch Is Installed
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3. 如何确认 PyTorch 已安装
- en: Once PyTorch is installed, it is important to confirm that the library was installed
    successfully and that you can start using it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 PyTorch 安装完成，确认库是否成功安装并且可以开始使用是很重要的。
- en: Don’t skip this step.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 不要跳过这一步。
- en: If PyTorch is not installed correctly or raises an error on this step, you won’t
    be able to run the examples later.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 PyTorch 未正确安装或在此步骤中出现错误，你将无法在后续运行示例。
- en: Create a new file called *versions.py* and copy and paste the following code
    into the file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 *versions.py* 的新文件，并将以下代码复制粘贴到文件中。
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the file, then open your command line and change directory to where you
    saved the file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，然后打开你的命令行并将目录更改为你保存文件的位置。
- en: 'Then type:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should then see output like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该看到类似以下的输出：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This confirms that PyTorch is installed correctly and that we are all using
    the same version.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了 PyTorch 已正确安装，并且我们都在使用相同的版本。
- en: This also shows you how to run a Python script from the command line. I recommend
    running all code from the command line in this manner, and not from a notebook
    or an IDE.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这还展示了如何从命令行运行 Python 脚本。我建议以这种方式从命令行运行所有代码，而不是从笔记本或 IDE 中运行。
- en: 2\. PyTorch Deep Learning Model Life-Cycle
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. PyTorch 深度学习模型生命周期
- en: In this section, you will discover the life-cycle for a deep learning model
    and the PyTorch API that you can use to define models.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解深度学习模型的生命周期和你可以用来定义模型的 PyTorch API。
- en: A model has a life-cycle, and this very simple knowledge provides the backbone
    for both modeling a dataset and understanding the PyTorch API.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 模型具有生命周期，这个非常简单的知识为建模数据集和理解 PyTorch API 提供了基础。
- en: 'The five steps in the life-cycle are as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期中的五个步骤如下：
- en: 1\. Prepare the Data.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. 准备数据。
- en: 2\. Define the Model.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. 定义模型。
- en: 3\. Train the Model.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. 训练模型。
- en: 4\. Evaluate the Model.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. 评估模型。
- en: 5\. Make Predictions.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5\. 做出预测。
- en: Let’s take a closer look at each step in turn.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步仔细看看每个步骤。
- en: '**Note**: There are many ways to achieve each of these steps using the PyTorch
    API, although I have aimed to show you the simplest, or most common, or most idiomatic.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：有许多方法可以使用 PyTorch API 实现这些步骤，虽然我旨在展示最简单的、最常见的或最惯用的方法。'
- en: If you discover a better approach, let me know in the comments below.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现更好的方法，请在下面的评论中告诉我。
- en: 'Step 1: Prepare the Data'
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步：准备数据
- en: The first step is to load and prepare your data.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是加载和准备你的数据。
- en: Neural network models require numerical input data and numerical output data.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络模型需要数值输入数据和数值输出数据。
- en: You can use standard Python libraries to load and prepare tabular data, like
    CSV files. For example, Pandas can be used to load your CSV file, and tools from
    scikit-learn can be used to encode categorical data, such as class labels.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用标准 Python 库来加载和准备表格数据，如 CSV 文件。例如，可以使用 Pandas 加载 CSV 文件，使用 scikit-learn
    的工具对类别数据（如类别标签）进行编码。
- en: PyTorch provides the [Dataset class](https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset)
    that you can extend and customize to load your dataset.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 提供了 [Dataset 类](https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset)，你可以扩展和自定义它来加载你的数据集。
- en: For example, the constructor of your dataset object can load your data file
    (e.g. a CSV file). You can then override the *__len__()* function that can be
    used to get the length of the dataset (number of rows or samples), and the *__getitem__()*
    function that is used to get a specific sample by index.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你的数据集对象的构造函数可以加载你的数据文件（例如 CSV 文件）。然后，你可以重写 *__len__()* 函数，该函数用于获取数据集的长度（行数或样本数），以及
    *__getitem__()* 函数，该函数用于通过索引获取特定样本。
- en: When loading your dataset, you can also perform any required transforms, such
    as scaling or encoding.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载数据集时，你还可以执行任何所需的转换，如缩放或编码。
- en: A skeleton of a custom *Dataset* class is provided below.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下面提供了一个自定义 *Dataset* 类的骨架。
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once loaded, PyTorch provides the [DataLoader class](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader)
    to navigate a *Dataset* instance during the training and evaluation of your model.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 加载后，PyTorch 提供了 [DataLoader 类](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader)，用于在训练和评估模型期间遍历
    *Dataset* 实例。
- en: A *DataLoader* instance can be created for the training dataset, test dataset,
    and even a validation dataset.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为训练数据集、测试数据集甚至验证数据集创建 *DataLoader* 实例。
- en: The [random_split() function](https://pytorch.org/docs/stable/data.html#torch.utils.data.random_split)
    can be used to split a dataset into train and test sets. Once split, a selection
    of rows from the *Dataset* can be provided to a DataLoader, along with the batch
    size and whether the data should be shuffled every epoch.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[random_split() 函数](https://pytorch.org/docs/stable/data.html#torch.utils.data.random_split)
    可以用来将数据集拆分为训练集和测试集。拆分后，可以将 *Dataset* 的选择行提供给 DataLoader，并设置批大小和数据是否每个 epoch 应该被打乱。'
- en: For example, we can define a *DataLoader* by passing in a selected sample of
    rows in the dataset.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以通过传入数据集中选择的行样本来定义 *DataLoader*。
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once defined, a *DataLoader* can be enumerated, yielding one batch worth of
    samples each iteration.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了，可以对 *DataLoader* 进行枚举，每次迭代产生一批样本。
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Step 2: Define the Model'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二步：定义模型
- en: The next step is to define a model.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义模型。
- en: The idiom for defining a model in PyTorch involves defining a class that extends
    the [Module class](https://pytorch.org/docs/stable/nn.html#module).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyTorch 中定义模型的惯用方法是定义一个扩展 [Module 类](https://pytorch.org/docs/stable/nn.html#module)
    的类。
- en: The constructor of your class defines the layers of the model and the forward()
    function is the override that defines how to forward propagate input through the
    defined layers of the model.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 类的构造函数定义了模型的层和重写的`forward()`函数定义了如何通过模型的定义层进行前向传播的方法。
- en: Many layers are available, such as [Linear](https://pytorch.org/docs/stable/nn.html#torch.nn.Linear)
    for fully connected layers, [Conv2d](https://pytorch.org/docs/stable/nn.html#torch.nn.Conv2d)
    for convolutional layers, and [MaxPool2d](https://pytorch.org/docs/stable/nn.html#torch.nn.MaxPool2d)
    for pooling layers.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 许多层都可用，例如用于全连接层的[Linear](https://pytorch.org/docs/stable/nn.html#torch.nn.Linear)，用于卷积层的[Conv2d](https://pytorch.org/docs/stable/nn.html#torch.nn.Conv2d)，以及用于池化层的[MaxPool2d](https://pytorch.org/docs/stable/nn.html#torch.nn.MaxPool2d)。
- en: Activation functions can also be defined as layers, such as [ReLU](https://pytorch.org/docs/stable/nn.html#torch.nn.ReLU),
    [Softmax](https://pytorch.org/docs/stable/nn.html#torch.nn.Softmax), and [Sigmoid](https://pytorch.org/docs/stable/nn.html#torch.nn.Sigmoid).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 激活函数也可以作为层来定义，例如[ReLU](https://pytorch.org/docs/stable/nn.html#torch.nn.ReLU)、[Softmax](https://pytorch.org/docs/stable/nn.html#torch.nn.Softmax)和[Sigmoid](https://pytorch.org/docs/stable/nn.html#torch.nn.Sigmoid)。
- en: Below is an example of a simple MLP model with one layer.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个具有一个层的简单MLP模型的示例。
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The weights of a given layer can also be initialized after the layer is defined
    in the constructor.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 给定层的权重也可以在构造函数中定义层之后初始化。
- en: 'Common examples include the [Xavier](https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.xavier_uniform_)
    and [He weight](https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.kaiming_uniform_)
    initialization schemes. For example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的示例包括[Xavier](https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.xavier_uniform_)和[He权重](https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.kaiming_uniform_)初始化方案。例如：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Step 3: Train the Model'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：训练模型
- en: The training process requires that you define a loss function and an optimization
    algorithm.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 训练过程要求您定义一个损失函数和一个优化算法。
- en: 'Common loss functions include the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的损失函数包括以下内容：
- en: '[BCELoss](https://pytorch.org/docs/stable/nn.html#torch.nn.BCELoss): Binary
    cross-entropy loss for binary classification.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[二元交叉熵损失](https://pytorch.org/docs/stable/nn.html#torch.nn.BCELoss)：用于二元分类的二元交叉熵损失。'
- en: '[CrossEntropyLoss](https://pytorch.org/docs/stable/nn.html#torch.nn.CrossEntropyLoss):
    Categorical cross-entropy loss for multi-class classification.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[交叉熵损失](https://pytorch.org/docs/stable/nn.html#torch.nn.CrossEntropyLoss)：用于多类分类的交叉熵损失。'
- en: '[MSELoss](https://pytorch.org/docs/stable/nn.html#torch.nn.MSELoss): Mean squared
    loss for regression.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[均方误差损失](https://pytorch.org/docs/stable/nn.html#torch.nn.MSELoss)：用于回归的均方误差损失。'
- en: 'For more on loss functions generally, see the tutorial:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 关于损失函数的更多信息，请参阅教程：
- en: '[Loss and Loss Functions for Training Deep Learning Neural Networks](https://machinelearningmastery.com/loss-and-loss-functions-for-training-deep-learning-neural-networks/)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深度学习神经网络的损失和损失函数](https://machinelearningmastery.com/loss-and-loss-functions-for-training-deep-learning-neural-networks/)'
- en: Stochastic gradient descent is used for optimization, and the standard algorithm
    is provided by the [SGD class](https://pytorch.org/docs/stable/optim.html#torch.optim.SGD),
    although other versions of the algorithm are available, such as [Adam](https://pytorch.org/docs/stable/optim.html#torch.optim.Adam).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用随机梯度下降进行优化，标准算法由[SGD类](https://pytorch.org/docs/stable/optim.html#torch.optim.SGD)提供，尽管还有其他版本的算法可用，例如[Adam](https://pytorch.org/docs/stable/optim.html#torch.optim.Adam)。
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Training the model involves enumerating the *DataLoader* for the training dataset.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 训练模型涉及枚举用于训练数据集的*DataLoader*。
- en: First, a loop is required for the number of training epochs. Then an inner loop
    is required for the mini-batches for stochastic gradient descent.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，需要一个循环来迭代训练周期的数量。然后，需要一个内部循环来处理随机梯度下降的小批量。
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Each update to the model involves the same general pattern comprised of:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的每次更新都遵循相同的一般模式，包括：
- en: Clearing the last error gradient.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除最后的误差梯度。
- en: A forward pass of the input through the model.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过模型的输入进行前向传递。
- en: Calculating the loss for the model output.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算模型输出的损失。
- en: Backpropagating the error through the model.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过模型进行误差反向传播。
- en: Update the model in an effort to reduce loss.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新模型以尝试减少损失。
- en: 'For example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Step 4: Evaluate the model'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：评估模型
- en: Once the model is fit, it can be evaluated on the test dataset.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型适合，就可以在测试数据集上进行评估。
- en: This can be achieved by using the *DataLoader* for the test dataset and collecting
    the predictions for the test set, then comparing the predictions to the expected
    values of the test set and calculating a performance metric.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用*DataLoader*来处理测试数据集并收集测试集的预测值来实现，然后将预测值与测试集的预期值进行比较，并计算性能指标。
- en: '[PRE13]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Step 5: Make predictions'
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤5：进行预测
- en: A fit model can be used to make a prediction on new data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 适合的模型可以用来对新数据进行预测。
- en: For example, you might have a single image or a single row of data and want
    to make a prediction.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能有一张单独的图片或一行数据，想要进行预测。
- en: This requires that you wrap the data in a [PyTorch Tensor](https://pytorch.org/docs/stable/tensors.html)
    data structure.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这要求您将数据封装在[PyTorch Tensor](https://pytorch.org/docs/stable/tensors.html)数据结构中。
- en: A Tensor is just the PyTorch version of a NumPy array for holding data. It also
    allows you to perform the automatic differentiation tasks in the model graph,
    like calling *backward()* when training the model.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Tensor只是PyTorch版本的NumPy数组，用于保存数据。它还允许您执行模型图中的自动微分任务，比如在训练模型时调用*backward()*。
- en: The prediction too will be a Tensor, although you can retrieve the NumPy array
    by [detaching the Tensor](https://pytorch.org/docs/stable/autograd.html#torch.Tensor.detach)
    from the automatic differentiation graph and calling the NumPy function.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 预测结果也将是一个Tensor，尽管您可以通过[分离Tensor](https://pytorch.org/docs/stable/autograd.html#torch.Tensor.detach)来从自动微分图中获取NumPy数组，并调用NumPy函数。
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now that we are familiar with the PyTorch API at a high-level and the model
    life-cycle, let’s look at how we can develop some standard deep learning models
    from scratch.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了PyTorch API的高级别和模型生命周期，让我们看看如何从头开始开发一些标准的深度学习模型。
- en: 3\. How to Develop PyTorch Deep Learning Models
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 如何开发PyTorch深度学习模型
- en: In this section, you will discover how to develop, evaluate, and make predictions
    with standard deep learning models, including Multilayer Perceptrons (MLP) and
    Convolutional Neural Networks (CNN).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解如何开发、评估和预测使用标准深度学习模型（包括多层感知器（MLP）和卷积神经网络（CNN））的方法。
- en: A Multilayer Perceptron model, or MLP for short, is a standard fully connected
    neural network model.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 多层感知器模型（简称MLP）是一种标准的全连接神经网络模型。
- en: It is comprised of layers of nodes where each node is connected to all outputs
    from the previous layer and the output of each node is connected to all inputs
    for nodes in the next layer.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它由节点层组成，其中每个节点与前一层的所有输出连接，并且每个节点的输出与下一层节点的所有输入连接。
- en: An MLP is a model with one or more fully connected layers. This model is appropriate
    for tabular data, that is data as it looks in a table or spreadsheet with one
    column for each variable and one row for each variable. There are three predictive
    modeling problems you may want to explore with an MLP; they are binary classification,
    multiclass classification, and regression.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: MLP是一个具有一个或多个全连接层的模型。这种模型适用于表格数据，即数据在表格或电子表格中的形式，每个变量对应一列，每个观测对应一行。您可能想用MLP探索三种预测建模问题，它们分别是二元分类、多类分类和回归。
- en: Let’s fit a model on a real dataset for each of these cases.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为每种情况在真实数据集上拟合一个模型。
- en: '**Note**: The models in this section are effective, but not optimized. See
    if you can improve their performance. Post your findings in the comments below.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：本节中的模型是有效的，但尚未经过优化。请尝试提升它们的性能。在下方评论区分享您的发现。'
- en: 3.1\. How to Develop an MLP for Binary Classification
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1\. 如何开发用于二元分类的MLP
- en: We will use the Ionosphere binary (two class) classification dataset to demonstrate
    an MLP for binary classification.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用电离层二元（两类）分类数据集来演示MLP进行二元分类。
- en: This dataset involves predicting whether there is a structure in the atmosphere
    or not given radar returns.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据集涉及根据雷达返回预测大气中是否存在结构。
- en: The dataset will be downloaded automatically using Pandas, but you can learn
    more about it here.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集将使用Pandas自动下载，但您也可以在此处了解更多信息。
- en: '[Ionosphere Dataset (csv)](https://raw.githubusercontent.com/jbrownlee/Datasets/master/ionosphere.csv).'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[电离层数据集（csv）](https://raw.githubusercontent.com/jbrownlee/Datasets/master/ionosphere.csv)。'
- en: '[Ionosphere Dataset Description](https://raw.githubusercontent.com/jbrownlee/Datasets/master/ionosphere.names).'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[电离层数据集描述](https://raw.githubusercontent.com/jbrownlee/Datasets/master/ionosphere.names)。'
- en: We will use a [LabelEncoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html)
    to encode the string labels to integer values 0 and 1\. The model will be fit
    on 67 percent of the data, and the remaining 33 percent will be used for evaluation,
    split using the [train_test_split() function](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个[LabelEncoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html)将字符串标签编码为整数值0和1。模型将在67%的数据上进行拟合，其余33%将用于评估，使用[train_test_split()函数](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)进行拆分。
- en: 'It is a good practice to use ‘*relu*‘ activation with a ‘*He Uniform*‘ weight
    initialization. This combination goes a long way to overcome the problem of [vanishing
    gradients](https://machinelearningmastery.com/how-to-fix-vanishing-gradients-using-the-rectified-linear-activation-function/)
    when training deep neural network models. For more on ReLU, see the tutorial:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用‘*relu*’激活函数和‘*He Uniform*’权重初始化是一种良好的实践。这种组合有助于克服[梯度消失](https://machinelearningmastery.com/how-to-fix-vanishing-gradients-using-the-rectified-linear-activation-function/)的问题，尤其是在训练深度神经网络模型时。有关ReLU的更多信息，请参阅教程：
- en: '[A Gentle Introduction to the Rectified Linear Unit (ReLU)](https://machinelearningmastery.com/rectified-linear-activation-function-for-deep-learning-neural-networks/)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对修正线性单元（ReLU）的温和介绍](https://machinelearningmastery.com/rectified-linear-activation-function-for-deep-learning-neural-networks/)'
- en: The model predicts the probability of class 1 and uses the sigmoid activation
    function. The model is optimized using stochastic gradient descent and seeks to
    minimize the [binary cross-entropy loss](https://machinelearningmastery.com/cross-entropy-for-machine-learning/).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型预测类别1的概率，并使用sigmoid激活函数。模型使用随机梯度下降进行优化，并力求最小化[二元交叉熵损失](https://machinelearningmastery.com/cross-entropy-for-machine-learning/)。
- en: The complete example is listed below.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例列在下方。
- en: '[PRE15]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Running the example first reports the shape of the train and test datasets,
    then fits the model and evaluates it on the test dataset. Finally, a prediction
    is made for a single row of data.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例首先报告训练和测试数据集的形状，然后拟合模型并在测试数据集上进行评估。最后，对单行数据进行预测。
- en: '**Note**: Your [results may vary](https://machinelearningmastery.com/different-results-each-time-in-machine-learning/)
    given the stochastic nature of the algorithm or evaluation procedure, or differences
    in numerical precision. Consider running the example a few times and compare the
    average outcome.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：由于算法或评估过程的随机性质，或者数值精度的差异，你的[结果可能会有所不同](https://machinelearningmastery.com/different-results-each-time-in-machine-learning/)。考虑多次运行示例，并比较平均结果。'
- en: Further Reading
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This section provides more resources on the topic if you are looking to go deeper.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了更多关于该主题的资源，以便你能够深入了解。
- en: Books
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 书籍
- en: '[Deep Learning](https://amzn.to/2Y8JuBv), 2016.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Deep Learning](https://amzn.to/2Y8JuBv)，2016年。'
- en: '[Programming PyTorch for Deep Learning: Creating and Deploying Deep Learning
    Applications](https://amzn.to/2LA71Gq), 2018.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Programming PyTorch for Deep Learning: Creating and Deploying Deep Learning
    Applications](https://amzn.to/2LA71Gq)，2018年。'
- en: '[Deep Learning with PyTorch](https://amzn.to/2Yw2s5q), 2020.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Deep Learning with PyTorch](https://amzn.to/2Yw2s5q)，2020年。'
- en: '[Deep Learning for Coders with fastai and PyTorch: AI Applications Without
    a PhD](https://amzn.to/2P0MQDM), 2020.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Deep Learning for Coders with fastai and PyTorch: AI Applications Without
    a PhD](https://amzn.to/2P0MQDM)，2020年。'
- en: PyTorch Project
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyTorch 项目
- en: '[PyTorch Homepage](https://pytorch.org/).'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch 主页](https://pytorch.org/)。'
- en: '[PyTorch Documentation](https://pytorch.org/docs/stable/index.html)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch 文档](https://pytorch.org/docs/stable/index.html)'
- en: '[PyTorch Installation Guide](https://pytorch.org/get-started/locally/)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch 安装指南](https://pytorch.org/get-started/locally/)'
- en: '[PyTorch, Wikipedia](https://en.wikipedia.org/wiki/PyTorch).'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch，维基百科](https://en.wikipedia.org/wiki/PyTorch)。'
- en: '[PyTorch on GitHub](https://github.com/pytorch/pytorch).'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch 在 GitHub 上](https://github.com/pytorch/pytorch)。'
- en: APIs
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API
- en: '[torch.utils.data API](https://pytorch.org/docs/stable/data.html).'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[torch.utils.data API](https://pytorch.org/docs/stable/data.html)。'
- en: '[torch.nn API](https://pytorch.org/docs/stable/nn.html).'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[torch.nn API](https://pytorch.org/docs/stable/nn.html)。'
- en: '[torch.nn.init API](https://pytorch.org/docs/stable/nn.init.html).'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[torch.nn.init API](https://pytorch.org/docs/stable/nn.init.html)。'
- en: '[torch.optim API](https://pytorch.org/docs/stable/optim.html).'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[torch.optim API](https://pytorch.org/docs/stable/optim.html)。'
- en: '[torch.Tensor API](https://pytorch.org/docs/stable/tensors.html)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[torch.Tensor API](https://pytorch.org/docs/stable/tensors.html)'
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this tutorial, you discovered a step-by-step guide to developing deep learning
    models in PyTorch.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你发现了一个逐步指南，帮助你在PyTorch中开发深度学习模型。
- en: 'Specifically, you learned:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，你学到了：
- en: The difference between Torch and PyTorch and how to install and confirm PyTorch
    is working.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Torch 和 PyTorch 的区别，以及如何安装和确认 PyTorch 是否正常工作。
- en: The five-step life-cycle of PyTorch models and how to define, fit, and evaluate
    models.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch 模型的五步生命周期以及如何定义、拟合和评估模型。
- en: How to develop PyTorch deep learning models for regression, classification,
    and predictive modeling tasks.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何开发用于回归、分类和预测建模任务的 PyTorch 深度学习模型。
- en: Do you have any questions?
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你有什么问题吗？
- en: Ask your questions in the comments below and I will do my best to answer.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下方评论中提出你的问题，我会尽力回答。
