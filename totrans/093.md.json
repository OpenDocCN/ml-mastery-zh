["```py\nimport pandas as pd\n\nURL = \"https://www.epa.gov/sites/default/files/2021-03/state_tier1_caps.xlsx\"\n\ndf = pd.read_excel(URL, sheet_name=\"State_Trends\", header=1)\nprint(df)\n```", "```py\n      State FIPS State  Tier 1 Code      Tier 1 Description  ... emissions18  emissions19  emissions20  emissions21\n0              1    AL            1  FUEL COMB. ELEC. UTIL.  ...   10.050146     8.243679     8.243679     8.243679\n1              1    AL            1  FUEL COMB. ELEC. UTIL.  ...    0.455760     0.417551     0.417551     0.417551\n2              1    AL            1  FUEL COMB. ELEC. UTIL.  ...   26.233104    19.592480    13.752790    11.162100\n3              1    AL            1  FUEL COMB. ELEC. UTIL.  ...    2.601011     2.868642     2.868642     2.868642\n4              1    AL            1  FUEL COMB. ELEC. UTIL.  ...    1.941267     2.659792     2.659792     2.659792\n...          ...   ...          ...                     ...  ...         ...          ...          ...          ...\n5314          56    WY           16        PRESCRIBED FIRES  ...    0.893848     0.374873     0.374873     0.374873\n5315          56    WY           16        PRESCRIBED FIRES  ...    7.118097     2.857886     2.857886     2.857886\n5316          56    WY           16        PRESCRIBED FIRES  ...    6.032286     2.421937     2.421937     2.421937\n5317          56    WY           16        PRESCRIBED FIRES  ...    0.509242     0.208817     0.208817     0.208817\n5318          56    WY           16        PRESCRIBED FIRES  ...   16.632343     6.645249     6.645249     6.645249\n\n[5319 rows x 32 columns]\n```", "```py\n...\ndf.info() # print info to screen\n```", "```py\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5319 entries, 0 to 5318\nData columns (total 32 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   State FIPS          5319 non-null   int64  \n 1   State               5319 non-null   object \n 2   Tier 1 Code         5319 non-null   int64  \n 3   Tier 1 Description  5319 non-null   object \n 4   Pollutant           5319 non-null   object \n 5   emissions90         3926 non-null   float64\n 6   emissions96         4163 non-null   float64\n 7   emissions97         4163 non-null   float64\n...\n 29  emissions19         5052 non-null   float64\n 30  emissions20         5052 non-null   float64\n 31  emissions21         5052 non-null   float64\ndtypes: float64(27), int64(2), object(3)\nmemory usage: 1.3+ MB\n```", "```py\n...\ncoltypes = df.dtypes\nprint(coltypes)\n```", "```py\nState FIPS              int64\nState                  object\nTier 1 Code             int64\nTier 1 Description     object\nPollutant              object\nemissions90           float64\nemissions96           float64\nemissions97           float64\n...\nemissions19           float64\nemissions20           float64\nemissions21           float64\ndtype: object\n```", "```py\n...\ncols = [\"State\", \"Pollutant\", \"emissions19\", \"emissions20\", \"emissions21\"]\nlast3years = df[cols]\nprint(last3years)\n```", "```py\n     State Pollutant  emissions19  emissions20  emissions21\n0       AL        CO     8.243679     8.243679     8.243679\n1       AL       NH3     0.417551     0.417551     0.417551\n2       AL       NOX    19.592480    13.752790    11.162100\n3       AL  PM10-PRI     2.868642     2.868642     2.868642\n4       AL  PM25-PRI     2.659792     2.659792     2.659792\n...    ...       ...          ...          ...          ...\n5314    WY       NOX     0.374873     0.374873     0.374873\n5315    WY  PM10-PRI     2.857886     2.857886     2.857886\n5316    WY  PM25-PRI     2.421937     2.421937     2.421937\n5317    WY       SO2     0.208817     0.208817     0.208817\n5318    WY       VOC     6.645249     6.645249     6.645249\n\n[5319 rows x 5 columns]\n```", "```py\n...\ndata2021 = df[\"emissions21\"]\nprint(data2021)\n```", "```py\n0        8.243679\n1        0.417551\n2       11.162100\n3        2.868642\n4        2.659792\n          ...    \n5314     0.374873\n5315     2.857886\n5316     2.421937\n5317     0.208817\n5318     6.645249\nName: emissions21, Length: 5319, dtype: float64\n```", "```py\n...\nprint(df[\"Pollutant\"].unique())\n```", "```py\n['CO' 'NH3' 'NOX' 'PM10-PRI' 'PM25-PRI' 'SO2' 'VOC']\n```", "```py\n...\nprint(df[\"emissions21\"].mean())\n```", "```py\n...\nprint(df.describe().T)\n```", "```py\n              count       mean         std      min        25%        50%        75%           max\nState FIPS   5319.0  29.039481   15.667352  1.00000  16.000000  29.000000  42.000000     56.000000\nTier 1 Code  5319.0   8.213198    4.610970  1.00000   4.000000   8.000000  12.000000     16.000000\nemissions90  3926.0  67.885173  373.308888  0.00000   0.474330   4.042665  20.610050  11893.764890\nemissions96  4163.0  54.576353  264.951584  0.00001   0.338420   3.351860  16.804540   6890.969060\nemissions97  4163.0  51.635867  249.057529  0.00001   0.335830   3.339820  16.679675   6547.791030\n...\nemissions19  5052.0  19.846244   98.392126  0.00000   0.125881   1.180123   7.906181   4562.151689\nemissions20  5052.0  19.507828   97.515187  0.00000   0.125066   1.165284   7.737705   4562.151689\nemissions21  5052.0  19.264532   96.702411  0.00000   0.125066   1.151917   7.754584   4562.151689\n```", "```py\n...\ndf_CO = df[df[\"Pollutant\"] == \"CO\"]\nprint(df_CO)\n```", "```py\n      State FIPS State  Tier 1 Code             Tier 1 Description  ... emissions18  emissions19  emissions20  emissions21\n0              1    AL            1         FUEL COMB. ELEC. UTIL.  ...   10.050146     8.243679     8.243679     8.243679\n7              1    AL            2          FUEL COMB. INDUSTRIAL  ...   19.148024    17.291741    17.291741    17.291741\n14             1    AL            3               FUEL COMB. OTHER  ...   29.207209    29.201838    29.201838    29.201838\n21             1    AL            4  CHEMICAL & ALLIED PRODUCT MFG  ...    2.774257     2.626484     2.626484     2.626484\n28             1    AL            5              METALS PROCESSING  ...   12.534726    12.167189    12.167189    12.167189\n...          ...   ...          ...                            ...  ...         ...          ...          ...          ...\n5284          56    WY           11               HIGHWAY VEHICLES  ...   70.776546    69.268149    64.493724    59.719298\n5291          56    WY           12                    OFF-HIGHWAY  ...   31.092228    30.594383    30.603392    30.612400\n5298          56    WY           14                  MISCELLANEOUS  ...    3.269705     3.828401     3.828401     3.828401\n5305          56    WY           15                      WILDFIRES  ...  302.235376    89.399972    89.399972    89.399972\n5312          56    WY           16               PRESCRIBED FIRES  ...   70.578540    28.177445    28.177445    28.177445\n\n[760 rows x 32 columns]\n```", "```py\n...\ndf_CO_HW = df[(df[\"Pollutant\"] == \"CO\") & (df[\"Tier 1 Description\"] == \"HIGHWAY VEHICLES\")]\nprint(df_CO_HW)\n```", "```py\n      State FIPS State  Tier 1 Code Tier 1 Description  ...  emissions18  emissions19  emissions20  emissions21\n70             1    AL           11   HIGHWAY VEHICLES  ...   532.140445   518.259811   492.182583   466.105354\n171            2    AK           11   HIGHWAY VEHICLES  ...    70.674008    70.674008    63.883471    57.092934\n276            4    AZ           11   HIGHWAY VEHICLES  ...   433.685363   413.347655   398.958109   384.568563\n381            5    AR           11   HIGHWAY VEHICLES  ...   228.213685   227.902883   215.937225   203.971567\n...\n5074          54    WV           11   HIGHWAY VEHICLES  ...   133.628312   126.836047   118.621857   110.407667\n5179          55    WI           11   HIGHWAY VEHICLES  ...   344.340392   374.804865   342.392977   309.981089\n5284          56    WY           11   HIGHWAY VEHICLES  ...    70.776546    69.268149    64.493724    59.719298\n\n[51 rows x 32 columns]\n```", "```py\n...\ndf_r5 = df.iloc[5:11]\ndf_c1_r5 = df.iloc[5:11, 1:7]\n```", "```py\n...\ndf_all_co = df[df[\"Pollutant\"]==\"CO\"][[\"State\", \"Tier 1 Description\", \"emissions21\"]]\nprint(df_all_co)\n```", "```py\n      State FIPS State  Tier 1 Code             Tier 1 Description  ... emissions18  emissions19  emissions20  emissions21\n0              1    AL            1         FUEL COMB. ELEC. UTIL.  ...   10.050146     8.243679     8.243679     8.243679\n7              1    AL            2          FUEL COMB. INDUSTRIAL  ...   19.148024    17.291741    17.291741    17.291741\n14             1    AL            3               FUEL COMB. OTHER  ...   29.207209    29.201838    29.201838    29.201838\n21             1    AL            4  CHEMICAL & ALLIED PRODUCT MFG  ...    2.774257     2.626484     2.626484     2.626484\n28             1    AL            5              METALS PROCESSING  ...   12.534726    12.167189    12.167189    12.167189\n...          ...   ...          ...                            ...  ...         ...          ...          ...          ...\n5284          56    WY           11               HIGHWAY VEHICLES  ...   70.776546    69.268149    64.493724    59.719298\n5291          56    WY           12                    OFF-HIGHWAY  ...   31.092228    30.594383    30.603392    30.612400\n5298          56    WY           14                  MISCELLANEOUS  ...    3.269705     3.828401     3.828401     3.828401\n5305          56    WY           15                      WILDFIRES  ...  302.235376    89.399972    89.399972    89.399972\n5312          56    WY           16               PRESCRIBED FIRES  ...   70.578540    28.177445    28.177445    28.177445\n\n[760 rows x 32 columns]\n```", "```py\n...\ndf_pivot = df_all_co.pivot_table(index=\"State\", columns=\"Tier 1 Description\", values=\"emissions21\")\nprint(df_pivot)\n```", "```py\nTier 1 Description  CHEMICAL & ALLIED PRODUCT MFG  FUEL COMB. ELEC. UTIL.  ...  WASTE DISPOSAL & RECYCLING    WILDFIRES\nState                                                                      ...\nAK                                            NaN                4.679098  ...                    0.146018  4562.151689\nAL                                       2.626484                8.243679  ...                   47.241253    38.780562\nAR                                       0.307811                5.027354  ...                   26.234267     3.125529\nAZ                                       0.000000                4.483514  ...                    6.438484   248.713896\n...\nWA                                       0.116416                4.831139  ...                    2.334996   160.284327\nWI                                       0.023691                7.422521  ...                   35.670128     0.911783\nWV                                       0.206324                7.836174  ...                   16.012414     5.086241\nWY                                      14.296860               14.617882  ...                    1.952702    89.399972\n\n[51 rows x 15 columns]\n```", "```py\n...\ndf_melt = df_pivot.melt(value_name=\"emissions 2021\", var_name=\"Tier 1 Description\", ignore_index=False)\nprint(df_melt)\n```", "```py\n                  Tier 1 Description  emissions 2021\nState\nAK     CHEMICAL & ALLIED PRODUCT MFG             NaN\nAL     CHEMICAL & ALLIED PRODUCT MFG        2.626484\nAR     CHEMICAL & ALLIED PRODUCT MFG        0.307811\nAZ     CHEMICAL & ALLIED PRODUCT MFG        0.000000\nCA     CHEMICAL & ALLIED PRODUCT MFG        0.876666\n...                              ...             ...\nVT                         WILDFIRES        0.000000\nWA                         WILDFIRES      160.284327\nWI                         WILDFIRES        0.911783\nWV                         WILDFIRES        5.086241\nWY                         WILDFIRES       89.399972\n\n[765 rows x 2 columns]\n```", "```py\ndf_pivot.fillna(0)\ndf_pivot.where(df_pivot.notna(), 0)\ndf_pivot.mask(df_pivot.isna(), 0)\n```", "```py\n...\ndf_sum = df[df[\"Pollutant\"]==\"CO\"].groupby(\"State\").sum()\nprint(df_sum)\n```", "```py\n       State FIPS  Tier 1 Code  emissions90  emissions96  ...  emissions18  emissions19  emissions20  emissions21\nState                                                     ...\nAK             28          115   4502.12238    883.50805  ...  5216.369575  5218.919502  5211.711803  5204.504105\nAL             15          123   3404.01163   2440.95216  ...  1574.068371  1350.711872  1324.945132  1299.178392\nAR             75          123   1706.69006   1356.08524  ...  1168.110471  1055.635824  1043.724418  1031.813011\nAZ             60          123   2563.04249   1876.55422  ...  1000.976184   977.916197   964.504353   951.092509\n...\nWA            795          123   3604.39515   2852.52146  ...  1703.948955  1286.715920  1266.983767  1247.251614\nWI            825          123   2849.49820   2679.75457  ...   922.375165   872.231181   838.232783   804.234385\nWV            810          123   1270.81719    941.39753  ...   424.120829   395.720171   387.565561   379.410950\nWY            840          123    467.80484   1598.56712  ...   549.270377   306.461296   301.695879   296.930461\n\n[51 rows x 29 columns]\n```", "```py\n...\ndf_2021 = ( df.groupby([\"State\", \"Pollutant\"])\n              .sum()              # get total emissions of each year\n              [[\"emissions21\"]]   # select only year 2021\n              .reset_index()\n              .pivot(index=\"State\", columns=\"Pollutant\", values=\"emissions21\")\n              .filter([\"CO\",\"SO2\"])\n          )\nprint(df_2021)\n```", "```py\nPollutant           CO         SO2\nState\nAK         5204.504105   32.748621\nAL         1299.178392   52.698696\nAR         1031.813011   55.288823\nAZ          951.092509   15.281760\n...\nWA         1247.251614   13.178053\nWI          804.234385   21.141688\nWV          379.410950   49.159621\nWY          296.930461   37.056612\n```", "```py\n...\ndf_co = df[df[\"Pollutant\"]==\"CO\"].groupby(\"State\").sum()[[\"emissions21\"]].rename(columns={\"emissions21\":\"CO\"})\ndf_so2 = df[df[\"Pollutant\"]==\"SO2\"].groupby(\"State\").sum()[[\"emissions21\"]].rename(columns={\"emissions21\":\"SO2\"})\ndf_joined = df_co.join(df_so2)\n```", "```py\ndf_co = df[df[\"Pollutant\"]==\"CO\"].groupby(\"State\").sum()[[\"emissions21\"]].rename(columns={\"emissions21\":\"CO\"}).reset_index()\ndf_so2 = df[df[\"Pollutant\"]==\"SO2\"].groupby(\"State\").sum()[[\"emissions21\"]].rename(columns={\"emissions21\":\"SO2\"}).reset_index()\ndf_merged = df_co.merge(df_so2, on=\"State\", how=\"outer\")\n```", "```py\n...\ndef minmaxyear(subdf):\n    sum_series = subdf.sum()\n    year_indices = [x for x in sum_series if x.startswith(\"emissions\")]\n    minyear = sum_series[year_indices].astype(float).idxmin()\n    maxyear = sum_series[year_indices].astype(float).idxmax()\n    return pd.Series({\"min year\": minyear[-2:], \"max year\": maxyear[-2:]})\n\ndf_years = df[df[\"Pollutant\"]==\"CO\"].groupby(\"State\").apply(minmaxyear)\n```", "```py\nimport pandas as pd\n\n# Pollutants data from Environmental Protection Agency\nURL = \"https://www.epa.gov/sites/default/files/2021-03/state_tier1_caps.xlsx\"\n\n# Read the Excel file and print\ndf = pd.read_excel(URL, sheet_name=\"State_Trends\", header=1)\nprint(\"US air pollutant emission data:\")\nprint(df)\n\n# Show info\nprint(\"\\nInformation about the DataFrame:\")\ndf.info()\n\n# print dtyes\ncoltypes = df.dtypes\nprint(\"\\nColumn data types of the DataFrame:\")\nprint(coltypes)\n\n# Get last 3 columns\ncols = [\"State\", \"Pollutant\", \"emissions19\", \"emissions20\", \"emissions21\"]\nlast3years = df[cols]\nprint(\"\\nDataFrame of last 3 years data:\")\nprint(last3years)\n\n# Get a series\ndata2021 = df[\"emissions21\"]\nprint(\"\\nSeries of 2021 data:\")\nprint(data2021)\n\n# Print unique pollutants\nprint(\"\\nUnique pollutants:\")\nprint(df[\"Pollutant\"].unique())\n\n# print mean emission\nprint(\"\\nMean on the 2021 series:\")\nprint(df[\"emissions21\"].mean())\n\n# Describe\nprint(\"\\nBasic statistics about each column in the DataFrame:\")\nprint(df.describe().T)\n\n# Get CO only\ndf_CO = df[df[\"Pollutant\"] == \"CO\"]\nprint(\"\\nDataFrame of only CO pollutant:\")\nprint(df_CO)\n\n# Get CO and Highway only\ndf_CO_HW = df[(df[\"Pollutant\"] == \"CO\") & (df[\"Tier 1 Description\"] == \"HIGHWAY VEHICLES\")]\nprint(\"\\nDataFrame of only CO pollutant from Highway vehicles:\")\nprint(df_CO_HW)\n\n# Get DF of all CO\ndf_all_co = df[df[\"Pollutant\"]==\"CO\"][[\"State\", \"Tier 1 Description\", \"emissions21\"]]\nprint(\"\\nDataFrame of only CO pollutant, keep only essential columns:\")\nprint(df_all_co)\n\n# Pivot\ndf_pivot = df_all_co.pivot_table(index=\"State\", columns=\"Tier 1 Description\", values=\"emissions21\")\nprint(\"\\nPivot table of state vs CO emission source:\")\nprint(df_pivot)\n\n# melt\ndf_melt = df_pivot.melt(value_name=\"emissions 2021\", var_name=\"Tier 1 Description\", ignore_index=False)\nprint(\"\\nMelting the pivot table:\")\nprint(df_melt)\n\n# all three are the same\ndf_filled = df_pivot.fillna(0)\ndf_filled = df_pivot.where(df_pivot.notna(), 0)\ndf_filled = df_pivot.mask(df_pivot.isna(), 0)\nprint(\"\\nFilled missing value as zero:\")\nprint(df_filled)\n\n# aggregation\ndf_sum = df[df[\"Pollutant\"]==\"CO\"].groupby(\"State\").sum()\nprint(\"\\nTotal CO emission by state:\")\nprint(df_sum)\n\n# group by\ndf_2021 = ( df.groupby([\"State\", \"Pollutant\"])\n              .sum()              # get total emissions of each year\n              [[\"emissions21\"]]   # select only year 2021\n              .reset_index()\n              .pivot(index=\"State\", columns=\"Pollutant\", values=\"emissions21\")\n              .filter([\"CO\",\"SO2\"])\n          )\nprint(\"\\nComparing CO and SO2 emission:\")\nprint(df_2021)\n\n# join\ndf_co = df[df[\"Pollutant\"]==\"CO\"].groupby(\"State\").sum()[[\"emissions21\"]].rename(columns={\"emissions21\":\"CO\"})\ndf_so2 = df[df[\"Pollutant\"]==\"SO2\"].groupby(\"State\").sum()[[\"emissions21\"]].rename(columns={\"emissions21\":\"SO2\"})\ndf_joined = df_co.join(df_so2)\nprint(\"\\nComparing CO and SO2 emission:\")\nprint(df_joined)\n\n# merge\ndf_co = df[df[\"Pollutant\"]==\"CO\"].groupby(\"State\").sum()[[\"emissions21\"]].rename(columns={\"emissions21\":\"CO\"}).reset_index()\ndf_so2 = df[df[\"Pollutant\"]==\"SO2\"].groupby(\"State\").sum()[[\"emissions21\"]].rename(columns={\"emissions21\":\"SO2\"}).reset_index()\ndf_merged = df_co.merge(df_so2, on=\"State\", how=\"outer\")\nprint(\"\\nComparing CO and SO2 emission:\")\nprint(df_merged)\n\ndef minmaxyear(subdf):\n    sum_series = subdf.sum()\n    year_indices = [x for x in sum_series if x.startswith(\"emissions\")]\n    minyear = sum_series[year_indices].astype(float).idxmin()\n    maxyear = sum_series[year_indices].astype(float).idxmax()\n    return pd.Series({\"min year\": minyear[-2:], \"max year\": maxyear[-2:]})\n\ndf_years = df[df[\"Pollutant\"]==\"CO\"].groupby(\"State\").apply(minmaxyear)\nprint(\"\\nYears of minimum and maximum emissions:\")\nprint(df_years)\n```", "```py\ndf = pd.read_csv(\"ad_viz_plotval_data.csv\", parse_dates=[0])\nprint(df)\n```", "```py\n           Date Source    Site ID  POC  ...  COUNTY_CODE    COUNTY  SITE_LATITUDE SITE_LONGITUDE\n0     2021-01-01    AQS  480131090    1  ...           13  Atascosa      29.162997     -98.589158\n1     2021-01-02    AQS  480131090    1  ...           13  Atascosa      29.162997     -98.589158\n2     2021-01-03    AQS  480131090    1  ...           13  Atascosa      29.162997     -98.589158\n3     2021-01-04    AQS  480131090    1  ...           13  Atascosa      29.162997     -98.589158\n4     2021-01-05    AQS  480131090    1  ...           13  Atascosa      29.162997     -98.589158\n...          ...    ...        ...  ...  ...          ...       ...            ...            ...\n19695 2021-12-27    AQS  484790313    1  ...          479      Webb      27.599444     -99.533333\n19696 2021-12-28    AQS  484790313    1  ...          479      Webb      27.599444     -99.533333\n19697 2021-12-29    AQS  484790313    1  ...          479      Webb      27.599444     -99.533333\n19698 2021-12-30    AQS  484790313    1  ...          479      Webb      27.599444     -99.533333\n19699 2021-12-31    AQS  484790313    1  ...          479      Webb      27.599444     -99.533333\n\n[19700 rows x 20 columns]\n```", "```py\n...\ndf_pm25 = df.set_index(\"Date\")\nprint(df_pm25)\n```", "```py\n           Source    Site ID  POC  Daily Mean PM2.5 Concentration  ... COUNTY_CODE    COUNTY SITE_LATITUDE  SITE_LONGITUDE\nDate                                                               ...\n2021-01-01    AQS  480131090    1                             4.6  ...          13  Atascosa     29.162997      -98.589158\n2021-01-02    AQS  480131090    1                             3.7  ...          13  Atascosa     29.162997      -98.589158\n2021-01-03    AQS  480131090    1                             6.3  ...          13  Atascosa     29.162997      -98.589158\n2021-01-04    AQS  480131090    1                             6.4  ...          13  Atascosa     29.162997      -98.589158\n2021-01-05    AQS  480131090    1                             7.7  ...          13  Atascosa     29.162997      -98.589158\n...           ...        ...  ...                             ...  ...         ...       ...           ...             ...\n2021-12-27    AQS  484790313    1                            15.7  ...         479      Webb     27.599444      -99.533333\n2021-12-28    AQS  484790313    1                            17.6  ...         479      Webb     27.599444      -99.533333\n2021-12-29    AQS  484790313    1                            14.1  ...         479      Webb     27.599444      -99.533333\n2021-12-30    AQS  484790313    1                            18.5  ...         479      Webb     27.599444      -99.533333\n2021-12-31    AQS  484790313    1                            21.5  ...         479      Webb     27.599444      -99.533333\n\n[19700 rows x 19 columns]\n```", "```py\n...\nprint(df_pm25.index)\n```", "```py\nDatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04',\n               '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08',\n               '2021-01-09', '2021-01-10',\n               ...\n               '2021-12-22', '2021-12-23', '2021-12-24', '2021-12-25',\n               '2021-12-26', '2021-12-27', '2021-12-28', '2021-12-29',\n               '2021-12-30', '2021-12-31'],\n              dtype='datetime64[ns]', name='Date', length=19700, freq=None)\n```", "```py\ndf_2021 = ( df[[\"Date\", \"Daily Mean PM2.5 Concentration\", \"Site Name\"]]\n            .pivot_table(index=\"Date\",\n                         columns=\"Site Name\",\n                         values=\"Daily Mean PM2.5 Concentration\")\n          )\nprint(df_2021)\n```", "```py\nSite Name   Amarillo A&M  Ascarate Park SE  Austin North Hills Drive  ...  Von Ormy Highway 16  Waco Mazanec  World Trade Bridge\nDate                                                                  ...\n2021-01-01           1.7              11.9                       3.0  ...                  4.6           2.7                 4.4\n2021-01-02           2.2               7.8                       6.1  ...                  3.7           2.2                 6.1\n2021-01-03           2.5               4.2                       4.3  ...                  6.3           4.2                 8.5\n2021-01-04           3.7               8.1                       3.7  ...                  6.4           4.2                 5.7\n2021-01-05           4.5              10.0                       5.2  ...                  7.7           6.1                 7.1\n...                  ...               ...                       ...  ...                  ...           ...                 ...\n2021-12-27           1.9               5.8                      11.0  ...                 13.8          10.5                15.7\n2021-12-28           1.8               6.6                      14.1  ...                 17.7           9.7                17.6\n2021-12-29           NaN               8.1                      21.8  ...                 28.6          12.5                14.1\n2021-12-30           4.0               9.5                      13.1  ...                 20.4          13.4                18.5\n2021-12-31           3.6               3.7                      16.3  ...                 18.3          11.8                21.5\n\n[365 rows x 53 columns]\n```", "```py\ndf_2021.index.is_unique\n```", "```py\ndf_3month = df_2021[\"2021-04-01\":\"2021-07-01\"]\n```", "```py\n...\ndf_resample = df_2021.resample(\"W-SUN\").first()\nprint(df_resample)\n```", "```py\nSite Name   Amarillo A&M  Ascarate Park SE  Austin North Hills Drive  ...  Von Ormy Highway 16  Waco Mazanec  World Trade Bridge\nDate                                                                  ...\n2021-01-03           1.7              11.9                       3.0  ...                  4.6           2.7                 4.4\n2021-01-10           3.7               8.1                       3.7  ...                  6.4           4.2                 5.7\n2021-01-17           5.8               5.3                       7.0  ...                  5.4           6.9                 4.8\n...\n2021-12-19           3.6              13.0                       6.3  ...                  6.9           5.9                 5.5\n2021-12-26           5.3              10.4                       5.7  ...                  5.5           5.4                 3.9\n2022-01-02           1.9               5.8                      11.0  ...                 13.8          10.5                15.7\n\n[53 rows x 53 columns]\n```", "```py\ndf_ohlc = df_2021[\"San Antonio Interstate 35\"].resample(\"W-SUN\").ohlc()\nprint(df_ohlc)\n```", "```py\n            open  high   low  close\nDate\n2021-01-03   4.2  12.6   4.2   12.6\n2021-01-10   9.7   9.7   3.0    5.7\n2021-01-17   5.4  13.8   3.0   13.8\n2021-01-24   9.5  11.5   5.7    9.0\n...\n2021-12-12   5.7  20.0   5.7   20.0\n2021-12-19   9.7   9.7   3.9    3.9\n2021-12-26   6.1  14.7   6.0   14.7\n2022-01-02  10.9  23.7  10.9   16.3\n```", "```py\n...\nseries_ffill = df_2021[\"San Antonio Interstate 35\"].resample(\"H\").ffill()\nprint(series_ffill)\n```", "```py\nDate\n2021-01-01 00:00:00     4.2\n2021-01-01 01:00:00     4.2\n2021-01-01 02:00:00     4.2\n2021-01-01 03:00:00     4.2\n2021-01-01 04:00:00     4.2\n                       ...\n2021-12-30 20:00:00    18.2\n2021-12-30 21:00:00    18.2\n2021-12-30 22:00:00    18.2\n2021-12-30 23:00:00    18.2\n2021-12-31 00:00:00    16.3\nFreq: H, Name: San Antonio Interstate 35, Length: 8737, dtype: float64\n```", "```py\n...\ndf_mean = df_2021[\"San Antonio Interstate 35\"].rolling(10).mean()\nprint(df_mean)\n```", "```py\nDate\n2021-01-01      NaN\n2021-01-02      NaN\n2021-01-03      NaN\n2021-01-04      NaN\n2021-01-05      NaN\n              ...\n2021-12-27     8.30\n2021-12-28     9.59\n2021-12-29    11.57\n2021-12-30    12.78\n2021-12-31    13.24\nName: San Antonio Interstate 35, Length: 365, dtype: float64\n```", "```py\n...\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(12,6))\nplt.plot(df_2021[\"San Antonio Interstate 35\"], label=\"daily\")\nplt.plot(df_2021[\"San Antonio Interstate 35\"].rolling(10, min_periods=5).mean(), label=\"10-day MA\")\nplt.legend()\nplt.ylabel(\"PM 2.5\")\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load time series\ndf = pd.read_csv(\"ad_viz_plotval_data.csv\", parse_dates=[0])\nprint(\"Input data:\")\nprint(df)\n\n# Set date index\ndf_pm25 = df.set_index(\"Date\")\nprint(\"\\nUsing date index:\")\nprint(df_pm25)\nprint(df_pm25.index)\n\n# 2021 daily\ndf_2021 = ( df[[\"Date\", \"Daily Mean PM2.5 Concentration\", \"Site Name\"]]\n            .pivot_table(index=\"Date\",\n                         columns=\"Site Name\",\n                         values=\"Daily Mean PM2.5 Concentration\")\n          )\nprint(\"\\nUsing date index:\")\nprint(df_2021)\nprint(df_2021.index.is_unique)\n\n# Time interval\ndf_3mon = df_2021[\"2021-04-01\":\"2021-07-01\"]\nprint(\"\\nInterval selection:\")\nprint(df_3mon)\n\n# Resample\nprint(\"\\nResampling dataframe:\")\ndf_resample = df_2021.resample(\"W-SUN\").first()\nprint(df_resample)\nprint(\"\\nResampling series for OHLC:\")\ndf_ohlc = df_2021[\"San Antonio Interstate 35\"].resample(\"W-SUN\").ohlc()\nprint(df_ohlc)\nprint(\"\\nResampling series with forward fill:\")\nseries_ffill = df_2021[\"San Antonio Interstate 35\"].resample(\"H\").ffill()\nprint(series_ffill)\n\n# rolling\nprint(\"\\nRolling mean:\")\ndf_mean = df_2021[\"San Antonio Interstate 35\"].rolling(10).mean()\nprint(df_mean)\n\n# Plot moving average\nfig = plt.figure(figsize=(12,6))\nplt.plot(df_2021[\"San Antonio Interstate 35\"], label=\"daily\")\nplt.plot(df_2021[\"San Antonio Interstate 35\"].rolling(10, min_periods=5).mean(), label=\"10-day MA\")\nplt.legend()\nplt.ylabel(\"PM 2.5\")\nplt.show()\n```"]