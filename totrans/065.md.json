["```py\n# Generate a dataset of 2D data points and their ground truth labels\nx, y_true = make_blobs(n_samples=100, centers=2, cluster_std=1.5, random_state=15)\n\n# Plot the dataset\nscatter(x[:, 0], x[:, 1], c=y_true)\nshow()\n```", "```py\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = ms.train_test_split(x, y_true, test_size=0.2, random_state=10)\n\n# Plot the training and testing datasets\nfig, (ax1, ax2) = subplots(1, 2)\nax1.scatter(x_train[:, 0], x_train[:, 1], c=y_train)\nax1.set_title('Training data')\nax2.scatter(x_test[:, 0], x_test[:, 1], c=y_test)\nax2.set_title('Testing data')\nshow()\n```", "```py\n# Create a new SVM\nsvm = ml.SVM_create()\n\n# Set the SVM kernel to linear\nsvm.setKernel(ml.SVM_LINEAR)\n\n# Train the SVM on the set of training data\nsvm.train(x_train.astype(float32), ml.ROW_SAMPLE, y_train)\n```", "```py\n# Predict the target labels of the testing data\n_, y_pred = svm.predict(x_test.astype(float32))\n\n# Compute and print the achieved accuracy\naccuracy = (sum(y_pred[:, 0].astype(int) == y_test) / y_test.size) * 100\nprint('Accuracy:', accuracy, â€˜%')\n```", "```py\nAccuracy: 100.0 %\n```", "```py\nfrom sklearn.datasets import make_blobs\nfrom sklearn import model_selection as ms\nfrom numpy import float32\nfrom matplotlib.pyplot import scatter, show, subplots\n\n# Generate a dataset of 2D data points and their ground truth labels\nx, y_true = make_blobs(n_samples=100, centers=2, cluster_std=1.5, random_state=15)\n\n# Plot the dataset\nscatter(x[:, 0], x[:, 1], c=y_true)\nshow()\n\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = ms.train_test_split(x, y_true, test_size=0.2, random_state=10)\n\n# Plot the training and testing datasets\nfig, (ax1, ax2) = subplots(1, 2)\nax1.scatter(x_train[:, 0], x_train[:, 1], c=y_train)\nax1.set_title('Training data')\nax2.scatter(x_test[:, 0], x_test[:, 1], c=y_test)\nax2.set_title('Testing data')\nshow()\n\n# Create a new SVM\nsvm = ml.SVM_create()\n\n# Set the SVM kernel to linear\nsvm.setKernel(ml.SVM_LINEAR)\n\n# Train the SVM on the set of training data\nsvm.train(x_train.astype(float32), ml.ROW_SAMPLE, y_train)\n\n# Predict the target labels of the testing data\n_, y_pred = svm.predict(x_test.astype(float32))\n\n# Compute and print the achieved accuracy\naccuracy = (sum(y_pred[:, 0].astype(int) == y_test) / y_test.size) * 100\nprint('Accuracy:', accuracy, '%')\n```", "```py\nx_bound, y_bound = meshgrid(arange(x_test[:, 0].min() - 1, x_test[:, 0].max() + 1, 0.05),\n                            arange(x_test[:, 1].min() - 1, x_test[:, 1].max() + 1, 0.05))\n```", "```py\nbound_points = column_stack((x_bound.reshape(-1, 1), y_bound.reshape(-1, 1))).astype(float32)\n_, bound_pred = svm.predict(bound_points)\n```", "```py\ncontourf(x_bound, y_bound, bound_pred.reshape(x_bound.shape), cmap=cm.coolwarm)\nscatter(x_test[:, 0], x_test[:, 1], c=y_test)\nshow()\n```", "```py\nsupport_vect = svm.getUncompressedSupportVectors()\n\nscatter(x[:, 0], x[:, 1], c=y_true)\nscatter(support_vect[:, 0], support_vect[:, 1], c='red')\nshow()\n```", "```py\nfrom numpy import float32, meshgrid, arange, column_stack\nfrom matplotlib.pyplot import scatter, show, contourf, cm\n\nx_bound, y_bound = meshgrid(arange(x_test[:, 0].min() - 1, x_test[:, 0].max() + 1, 0.05),\n                            arange(x_test[:, 1].min() - 1, x_test[:, 1].max() + 1, 0.05))\n\nbound_points = column_stack((x_bound.reshape(-1, 1), y_bound.reshape(-1, 1))).astype(float32)\n_, bound_pred = svm.predict(bound_points)\n\n# Plot the testing set\ncontourf(x_bound, y_bound, bound_pred.reshape(x_bound.shape), cmap=cm.coolwarm)\nscatter(x_test[:, 0], x_test[:, 1], c=y_test)\nshow()\n\nsupport_vect = svm.getUncompressedSupportVectors()\n\nscatter(x[:, 0], x[:, 1], c=y_true)\nscatter(support_vect[:, 0], support_vect[:, 1], c='red')\nshow()\n```", "```py\n# Generate a dataset of 2D data points and their ground truth labels\nx, y_true = make_blobs(n_samples=100, centers=2, cluster_std=8, random_state=15)\n```", "```py\nsvm.setKernel(ml.SVM_LINEAR)\nsvm.setType(ml.SVM_C_SVC)\nsvm.setC(10)\n```", "```py\nsvm.setKernel(ml.SVM_RBF)\nsvm.setType(ml.SVM_C_SVC)\nsvm.setC(10)\nsvm.setGamma(0.1)\n```"]