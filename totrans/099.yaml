- en: Exploring the Python Ecosystem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Python 生态系统
- en: 原文：[https://machinelearningmastery.com/exploring-the-python-ecosystem/](https://machinelearningmastery.com/exploring-the-python-ecosystem/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/exploring-the-python-ecosystem/](https://machinelearningmastery.com/exploring-the-python-ecosystem/)
- en: Python is a neat programming language because its syntax is simple, clear, and
    concise. But Python would not be so successful without its rich third-party libraries.
    Python is so famous for data science and machine learning that it has become a
    de facto lingua franca just because we have so many libraries for those tasks.
    Without those libraries, Python is not too powerful.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种优雅的编程语言，因为其语法简单、清晰且简洁。但是，Python 如果没有其丰富的第三方库支持，将不会如此成功。Python 因数据科学和机器学习而闻名，因此它已经成为事实上的通用语言，仅仅是因为我们为这些任务提供了如此多的库。如果没有这些库，Python
    就不会如此强大。
- en: 'After finishing this tutorial, you will learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本教程后，您将学到：
- en: Where the Python libraries are installed in your system
  id: totrans-4
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 库安装在您的系统中的位置
- en: What is PyPI, and how a library repository can help your project
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 PyPI，以及库代码库如何帮助您的项目
- en: How to use the `pip` command to use a library from the repository
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`pip`命令从代码库使用库
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用我的新书 [Python 机器学习](https://machinelearningmastery.com/python-for-machine-learning/)
    **启动您的项目**，包括*逐步教程*和所有示例的*Python 源代码*文件。
- en: Let’s get started.![](../Images/2cd46909a505ce6aabb535db23a2c254.png)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！![](../Images/2cd46909a505ce6aabb535db23a2c254.png)
- en: Exploring the Python Ecosystem
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 Python 生态系统
- en: Photo by [Vinit Srivastava](https://unsplash.com/photos/ETTY3Q_ukmk). Some rights
    reserved.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Vinit Srivastava](https://unsplash.com/photos/ETTY3Q_ukmk) 拍摄。部分权利保留。
- en: Overview
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'This tutorial is in five parts; they are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为五部分，它们是：
- en: The Python ecosystem
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 生态系统
- en: Python libraries location
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 库位置
- en: The pip command
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip` 命令'
- en: Search for a package
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索包
- en: Host your own repository
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管您自己的代码库
- en: The Python Ecosystem
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 生态系统
- en: In the old days before the Internet, the language and the libraries are separated.
    When you learn C from a textbook, you will not see anything to help you read a
    CSV file or open a PNG image. Same in the old days of Java. If you need anything
    not included in the official libraries, you need to search for it from various
    places. How to download or install the libraries would be specific to the vendor
    of the library.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有互联网的旧时代，语言和库是分开的。当你从教科书学习 C 时，你看不到任何帮助你读取 CSV 文件或打开 PNG 图像的内容。Java 的旧时代也是如此。如果你需要任何官方库中不包括的东西，你需要从各种地方搜索。如何下载或安装库将取决于库的供应商。
- en: It would be way more convenient if we had a **central repository** to host many
    libraries and let us install the library with a unified interface, which allows
    us to check for new versions from time to time. Even better, we may also search
    on the repository with keywords to discover the library that can help our project.
    The CPAN is an example of libraries repository for Perl. Similarly, we have CRAN
    for R, RubyGems for Ruby, npm for Node.js, and maven for Java. For Python, we
    have PyPI (Python Package Index), [https://pypi.org/](https://pypi.org/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个**中央代码库**来托管许多库，并让我们使用统一接口安装库，那会更加方便。这样一来，我们可以不时地检查新版本。更好的是，我们还可以通过关键词在代码库中搜索，以发现可以帮助我们项目的库。CPAN
    是 Perl 的库示例。类似地，R 有 CRAN，Ruby 有 RubyGems，Node.js 有 npm，Java 有 Maven。对于 Python，我们有
    PyPI（Python 包索引），[https://pypi.org/](https://pypi.org/)。
- en: The PyPI is platform agnostic. If you installed your Python in Windows by downloading
    the installer from python.org, you have the `pip` command to access PyPI. If you
    used homebrew on Mac to install Python, you also have the same `pip` command.
    It is the same even if you use the built-in Python from Ubuntu Linux.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: PyPI 是平台无关的。如果您通过从 python.org 下载安装程序在 Windows 上安装 Python，则可以使用 `pip` 命令访问 PyPI。如果您在
    Mac 上使用 homebrew 安装 Python，则同样可以使用 `pip` 命令。即使您使用 Ubuntu Linux 的内置 Python，情况也是相同的。
- en: As a repository, you can find almost anything on PyPI. From large libraries
    like Tensorflow and PyTorch to small things like [minimal](https://pypi.org/project/minimal/).
    Because of the vast amount of libraries available on PyPI, you can easily find
    tools that implement some important components of your projects. Therefore, we
    have a strong and growing ecosystem of libraries in Python that makes it more
    powerful.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个仓库，你几乎可以在 PyPI 上找到任何东西。从大型库如 Tensorflow 和 PyTorch 到小型库如 [minimal](https://pypi.org/project/minimal/)。由于
    PyPI 上可用的库数量庞大，你可以轻松找到实现你项目中某些重要组件的工具。因此，我们拥有一个强大且不断增长的 Python 库生态系统，使其更加强大。
- en: Want to Get Started With Python for Machine Learning?
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想开始使用 Python 进行机器学习吗？
- en: Take my free 7-day email crash course now (with sample code).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在立即领取我的免费 7 天电子邮件速成课程（附示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注册并同时获取课程的免费 PDF 电子书版本。
- en: Python Libraries Location
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 库位置
- en: 'When we need a library in our Python scripts, we use:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 Python 脚本中需要一个库时，我们使用：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'But how can Python know where to read the content of the module and load it
    for our scripts? Like how the bash shell in Linux or command prompt in Windows
    looks for the command to execute, Python depends on a list of **paths** to locate
    the module to load. At any time, we can check the path by printing the list `sys.path` (after
    importing the `sys` module). For example, in a Mac installation of Python via
    homebrew:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Python 如何知道在哪里读取模块的内容并将其加载到我们的脚本中？就像 Linux 的 bash shell 或 Windows 的命令提示符寻找要执行的命令一样，Python
    依赖于一系列 **路径** 来定位要加载的模块。随时，我们可以通过打印列表 `sys.path` 来检查路径（在导入 `sys` 模块之后）。例如，在通过
    homebrew 安装的 Mac 上的 Python：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It prints the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它打印以下内容：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This means if you run `import my_module`, Python will look for the `my_module` in
    the same directory as your current location first (the first element, empty string).
    If not found, Python will check for the module located inside the zip file in
    the second element above. Then under the directory as the third element, and so
    on. The final path `/usr/local/lib/python3.9/site-packages` is usually where you
    installed your third-party libraries. The second, third, and fourth elements above
    are where the built-in standard libraries are located.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果你运行 `import my_module`，Python 会首先在与你当前位置相同的目录中查找 `my_module`（第一个元素，空字符串）。如果未找到，Python
    将检查第二个元素中 zip 文件内的模块。然后是在第三个元素下的目录中，依此类推。最终路径 `/usr/local/lib/python3.9/site-packages`
    通常是你安装第三方库的地方。上面的第二、第三和第四元素是内置标准库的位置。
- en: 'If you have some extra libraries installed elsewhere, you can set up your environment
    variable `PYTHONPATH` and point to it. In Linux and Mac, for example, we can run
    the command in the shell as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在其他地方安装了一些额外的库，你可以设置环境变量 `PYTHONPATH` 并指向它。例如，在 Linux 和 Mac 上，我们可以在终端中运行如下命令：
- en: Shell
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'where `print_path.py` is the two-line code above. Running this command will
    print the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `print_path.py` 是上面的两行代码。运行此命令将打印以下内容：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We see Python will search from `/tmp`, then `/var/tmp`, before checking the
    built-in libraries and installed third-party libraries. When we set up the `PYTHONPATH`
    environment variable, we use a colon “`:`” to separate multiple paths to search
    for our `import`. In case you are not familiar with the shell syntax, the above
    command line that defines the environment variable and runs the Python script
    can be broken into two commands:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到 Python 会从 `/tmp` 开始搜索，然后是 `/var/tmp`，最后检查内置库和已安装的第三方库。当我们设置 `PYTHONPATH`
    环境变量时，我们使用冒号 “`:`” 来分隔多个路径以搜索我们的 `import`。如果你不熟悉终端语法，上面的命令行定义了环境变量并运行 Python 脚本，可以分成两条命令：
- en: Shell
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you’re using Windows, you need to do this instead:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows，你需要改为这样做：
- en: Shell
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That is, we need to use a semicolon “`;`” to separate the paths.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 即，我们需要使用分号 “`;`” 来分隔路径。
- en: '**Note:** It is not recommended, but you can modify `sys.path` in your script
    before the `import` statement. Python will search the new locations for the `import`
    afterward, but it means to tie your script to a particular path. In other words,
    your script may not run on another computer.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 不推荐这样做，但你可以在 `import` 语句之前修改 `sys.path`。Python 将在之后搜索新的位置，但这意味着将你的脚本绑定到特定路径。换句话说，你的脚本可能无法在另一台计算机上运行。'
- en: The Pip Command
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pip 命令
- en: 'The last path in the `sys.path` printed above is where your third-party libraries
    are normally installed. The `pip` command is how you get the library from the
    Internet and install it to that location. The simplest syntax is:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`sys.path`中打印的最后一个路径是通常安装第三方库的位置。`pip`命令是从互联网获取库并将其安装到该位置的方法。最简单的语法是：
- en: Shell
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will install two packages: scikit-learn and pandas. Later, you may want
    to upgrade the packages when a new version is released. The syntax is:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装两个包：scikit-learn和pandas。稍后，您可能需要在新版本发布时升级包。语法是：
- en: Shell
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'where `-U` means to upgrade. To know which packages are outdated, we can use
    the command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`-U`表示升级。要知道哪些包已过时，我们可以使用以下命令：
- en: Shell
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It will print the list of all packages with a newer version in PyPI than your
    system, such as the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它将打印所有在PyPI中比您的系统新的包的列表，例如以下内容：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Without the `--outdated`, the `pip` command will show you all the installed
    packages and their versions. You can optionally show the location that each package
    is installed with the `-V` option, such as the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不加`--outdated`参数，`pip`命令会显示所有已安装的包及其版本。你可以选择使用`-V`选项显示每个包的安装位置，例如以下内容：
- en: Shell
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In case you need to check the summary of a package, you can use the `pip show` command,
    e.g.,
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要检查包的摘要，可以使用`pip show`命令，例如，
- en: Shell
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This gives you some information such as the home page, where you installed it,
    as well as what other packages it depends on and the packages depending on it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这会为您提供一些信息，例如主页、安装位置以及它依赖的其他包以及依赖它的包。
- en: 'When you need to remove a package (e.g., to free up the disk space), you can
    simply run:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要移除一个包（例如为了释放磁盘空间），您可以简单地运行：
- en: Shell
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'One final note to use the `pip` command: There are two types of packages from
    pip. The packages distributed as source code and the packages distributed as binary.
    They are different only when part of the module is not written in Python but in
    some other language (e.g., C or Cython) and needs to compile before use. The source
    packages will be compiled on your machine, but the binary distribution is already
    compiled, specific to the platform (e.g., 64-bit Windows). Usually the latter
    is distributed as “wheel” packages, and you need to have `wheel` installed first
    to enjoy the full benefit:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`命令的最后一点提示：pip有两种类型的包。一种是作为源代码分发的包，另一种是作为二进制分发的包。它们仅在模块的某些部分不是用Python编写（例如C或Cython）并且需要在使用前编译时才有所不同。源包将在您的机器上编译，而二进制分发已经编译，特定于平台（例如64位Windows）。通常后者作为“wheel”包分发，您需要先安装`wheel`以享受全部好处：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A large package such as Tensorflow will take many hours to compile from scratch.
    Therefore, it is advisable to have `wheel` installed and use the wheel packages
    whenever they are available.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个像Tensorflow这样的大型包将需要很多小时才能从头编译。因此，建议先安装`wheel`并在可能时使用wheel包。
- en: Search for a Package
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索包
- en: The newer version of `pip` command disabled the search function because it imposed
    too much workload to the PyPI system.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 较新版本的`pip`命令已禁用了搜索功能，因为它给PyPI系统带来了太大的工作负担。
- en: The way we can look for a package on PyPI is to use the search box on its webpage.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过PyPI网页上的搜索框来查找包。
- en: '![](../Images/b26f1d6795ec71a13ba9876bfd4346dc.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b26f1d6795ec71a13ba9876bfd4346dc.png)'
- en: 'When you type in a keyword, such as “gradient boosting,” it will show you many
    packages that contain the keyword somewhere:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当您输入关键字，例如“梯度提升”，它将显示包含该关键字的许多包：
- en: '![](../Images/5cc3d26b661148b10088ddf05054128b.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5cc3d26b661148b10088ddf05054128b.png)'
- en: You can click on each one for more details (usually including code examples)
    to determine which one fits your needs.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击每个包以获取更多详情（通常包括代码示例），以确定哪一个符合您的需求。
- en: 'If you prefer the command line, you can install the `pip-search` package:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢命令行，可以安装`pip-search`包：
- en: Shell
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then you can run the `pip_search` command to search with a keyword:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以运行`pip_search`命令来使用关键字搜索：
- en: Shell
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It will not give you everything on PyPI because there would be thousands of
    them. But it will give you the most relevant results. Below is the result from
    a Mac terminal:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会提供PyPI上的所有内容，因为那将有数千个。但它会提供最相关的结果。以下是来自Mac终端的结果：
- en: '[![](../Images/c17f68b6bb42a2fa346740c66e43c990.png)](https://machinelearningmastery.com/wp-content/uploads/2022/03/pip-search.png)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/c17f68b6bb42a2fa346740c66e43c990.png)](https://machinelearningmastery.com/wp-content/uploads/2022/03/pip-search.png)'
- en: Host Your Own Repository
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管自己的仓库
- en: 'PyPI is a repository on the Internet. But the `pip` command does not use it
    exclusively. If you have some reason to want your own PyPI server (for example,
    hosting internally in your corporate network so your `pip` does not goes beyond
    your firewall), you can try out the `pypiserver` package:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: PyPI 是互联网上的一个仓库。但`pip`命令并不只使用它。如果你有某些原因需要自己的 PyPI 服务器（例如，在你的公司网络内部托管，以便你的`pip`不会超出你的防火墙），你可以尝试`pypiserver`包：
- en: Shell
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Following the package’s documentation, you can set up your server using the
    `pypi-server` command. Then, you can upload the package and start serving. The
    details on how to configure and set up your own server would be too long to describe
    in detail here. But what it does is provide an index of available packages in
    the format that `pip` command can understand and provides the package for downloading
    when `pip` requests a particular one.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 根据包的文档，你可以使用`pypi-server`命令设置你的服务器。然后，你可以上传包并开始提供服务。如何配置和设置自己的服务器的细节在这里描述起来太长了。但它的作用是提供一个`pip`命令可以理解的可用包的索引，并在`pip`请求某个特定包时提供下载。
- en: 'If you have your own server, you can install a package in `pip` by:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有自己的服务器，你可以通过以下步骤在`pip`中安装包：
- en: Shell
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Shell
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, the address after the `--index-url` is the host and port number of your
    own server.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`--index-url`后的地址是你自己服务器的主机和端口号。
- en: PyPI is not the only repository. If you installed Python with Anaconda, you
    have an alternative system, `conda`, to install packages. The syntax is similar
    (almost always replacing `pip` with `conda` will work as expected). However, you
    should be reminded that they are two different systems that work independently.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: PyPI 不是唯一的仓库。如果你用 Anaconda 安装了 Python，你还有一个替代系统，`conda`，来安装包。语法类似（几乎总是将`pip`替换为`conda`会按预期工作）。但你应该记住，它们是两个独立工作的不同系统。
- en: Further Reading
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This section provides more resources on the topic if you are looking to go deeper.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了更多关于该主题的资源，如果你希望深入了解。
- en: pip documentation, [https://pip.pypa.io/en/stable/](https://pip.pypa.io/en/stable/)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pip 文档，[https://pip.pypa.io/en/stable/](https://pip.pypa.io/en/stable/)
- en: Python package index, [https://pypi.org/](https://pypi.org/)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 包索引，[https://pypi.org/](https://pypi.org/)
- en: pypiserver package, [https://pypi.org/project/pypiserver/](https://pypi.org/project/pypiserver/)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pypiserver 包， [https://pypi.org/project/pypiserver/](https://pypi.org/project/pypiserver/)
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this tutorial, you’ve discovered the command `pip` and how it brings you
    the abundant packages from the Python ecosystem to help your project. Specifically,
    you learned:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你已经了解了`pip`命令及其如何从 Python 生态系统中为你的项目提供丰富的包。具体来说，你学到了：
- en: How to look for a package from PyPI
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从 PyPI 查找包
- en: How Python manages its libraries in your system
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 如何在你的系统中管理其库
- en: How to install, upgrade, and remove a package from your system
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装、升级和移除系统中的包
- en: How we can host our own version of PyPI in our network
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在我们的网络中托管自己的 PyPI 版本
