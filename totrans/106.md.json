["```py\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n```", "```py\noriginal_list = [1, 2, 3, 4]\ntimes3_list = []\n\nfor i in original_list:\n        times3_list.append(i*3)\nprint(times3_list)\n```", "```py\n[3, 6, 9, 12]\n```", "```py\ntime3_list_awesome_method = [i*3 for i in original_list]\nprint(time3_list_awesome_method)\n```", "```py\n[3, 6, 9, 12]\n```", "```py\neven_list_awesome_method = [i for i in original_list if i%2==0]\nprint(even_list_awesome_method)\n```", "```py\n[2, 4]\n```", "```py\nnew_list_awesome_method = [i if i%2==0 else 0 for i in original_list]\nprint(new_list_awesome_method)\n```", "```py\n[0, 2, 0, 4]\n```", "```py\ncolors = [\"red\", \"green\", \"blue\"]\nanimals = [\"cat\", \"dog\", \"bird\"]\nnewlist = []\nfor c in colors:\n    for a in animals:\n        newlist.append(c + \" \" + a)\nprint(newlist)\n```", "```py\n['red cat', 'red dog', 'red bird', 'green cat', 'green dog', 'green bird', 'blue cat', 'blue dog', 'blue bird']\n```", "```py\ncolors = [\"red\", \"green\", \"blue\"]\nanimals = [\"cat\", \"dog\", \"bird\"]\n\nnewlist = [c+\" \"+a for c in colors for a in animals]\nprint(newlist)\n```", "```py\noriginal_dict = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nnew_dict = {key:'number ' + value for (key, value) in original_dict.items()}\nprint(new_dict)\n```", "```py\n{1: 'number one', 2: 'number two', 3: 'number three', 4: 'number four'}\n```", "```py\n#Only add keys which are greater than 2\nnew_dict_high_keys = {key:'number ' + value for (key, value) in original_dict.items() if key>2}\nprint(new_dict_high_keys)\n\n# Only change values with key>2\nnew_dict_2 = {key:('number ' + value if key>2 else value) for (key, value) in original_dict.items() }\nprint(new_dict_2)\n```", "```py\n{3: 'number three', 4: 'number four'}\n{1: 'one', 2: 'two', 3: 'number three', 4: 'number four'}\n```", "```py\nname = ['Triangle', 'Square', 'Hexagon', 'Pentagon']\n\n# enumerate returns two iterables\nfor i, n in enumerate(name):\n    print(i, 'name: ', n)\n```", "```py\n0 name:  Triangle\n1 name:  Square\n2 name:  Hexagon\n3 name:  Pentagon\n```", "```py\ndata = [1,4,1,5,9,2,6,5,3,5,8,9,7,9,3]\nfor n, digit in enumerate(data[5:], 6):\n    print(\"The %d-th digit is %d\" % (n, digit))\n```", "```py\nThe 6-th digit is 2\nThe 7-th digit is 6\nThe 8-th digit is 5\nThe 9-th digit is 3\nThe 10-th digit is 5\nThe 11-th digit is 8\nThe 12-th digit is 9\nThe 13-th digit is 7\nThe 14-th digit is 9\nThe 15-th digit is 3\n```", "```py\nsides = [3, 4, 6, 5]\ncolors = ['red', 'green', 'yellow', 'blue']\nshapes = zip(name, sides, colors)\n\n# Tuples are created from one item from each list\nprint(set(shapes))\n\n# Easy to use enumerate and zip together for iterating through multiple lists in one go\nfor i, (n, s, c) in enumerate(zip(name, sides, colors)):\n    print(i, 'Shape- ', n, '; Sides ', s)\n```", "```py\n{('Triangle', 3, 'red'), ('Square', 4, 'green'), ('Hexagon', 6, 'yellow'), ('Pentagon', 5, 'blue')}\n0 Shape-  Triangle ; Sides  3\n1 Shape-  Square ; Sides  4\n2 Shape-  Hexagon ; Sides  6\n3 Shape-  Pentagon ; Sides  5\n```", "```py\ndef circle(r):\n    area = 0\n    def area_obj():\n        nonlocal area\n        area = math.pi * r * r\n        print(\"area_obj\")\n    return area_obj    \n\ndef circle(r):\n    area_val = math.pi * r * r\n    def area():\n        print(area_val)\n    return area    \n\n# returns area_obj(). The value of r passed is retained\ncircle_1 = circle(1)\ncircle_2 = circle(2)\n\n# Calling area_obj() with radius = 1\ncircle_1()\n# Calling area_obj() with radius = 2\ncircle_2()\n```", "```py\n3.141592653589793\n12.566370614359172\n```", "```py\ndef square_decorator(function):\n    def square_it(arg):\n        x = function(arg)\n        return x*x\n    return square_it\n\nsize_sq = square_decorator(len)\nprint(size_sq([1,2,3]))\n\nsin_sq = square_decorator(math.sin)\nprint(sin_sq(math.pi/4))\n\n@square_decorator\ndef plus_one(a):\n    return a+1\n\na = plus_one(3)\nprint(a)\n```", "```py\n9\n0.4999999999999999\n16\n```", "```py\ndef get_fibonacci(x):\n    x0 = 0\n    x1 = 1\n    for i in range(x):\n        yield x0\n        temp = x0 + x1\n        x0 = x1\n        x1 = temp\n\nf = get_fibonacci(6)\nfor i in range(6):\n    print(next(f))\n```", "```py\n0\n1\n1\n2\n3\n5\n```", "```py\ndef datagen(data, seq_len, batch_size, targetcol, kind):\n    \"As a generator to produce samples for Keras model\"\n    batch = []\n    while True:\n        # Pick one dataframe from the pool\n        key = random.choice(list(data.keys()))\n        df = data[key]\n        input_cols = [c for c in df.columns if c != targetcol]\n        index = df.index[df.index < TRAIN_TEST_CUTOFF]\n        split = int(len(index) * TRAIN_VALID_RATIO)\n        if kind == 'train':\n            index = index[:split]   # range for the training set\n        elif kind == 'valid':\n            index = index[split:]   # range for the validation set\n        # Pick one position, then clip a sequence length\n        while True:\n            t = random.choice(index)      # pick one time step\n            n = (df.index == t).argmax()  # find its position in the dataframe\n            if n-seq_len+1 < 0:\n                continue # can't get enough data for one sequence length\n            frame = df.iloc[n-seq_len+1:n+1]\n            batch.append([frame[input_cols].values, df.loc[t, targetcol]])\n            break\n        # if we get enough for a batch, dispatch\n        if len(batch) == batch_size:\n            X, y = zip(*batch)\n            X, y = np.expand_dims(np.array(X), 3), np.array(y)\n            yield X, y\n            batch = []\n```", "```py\n(x_train, y_train), _ = keras.datasets.cifar10.load_data()\ndatagen = ImageDataGenerator()\ndata_iterator = datagen.flow(x_train, y_train, batch_size=8)\n\nfig,ax = plt.subplots(nrows=4, ncols=8,figsize=(18,6),subplot_kw=dict(xticks=[], yticks=[]))\n\nfor i in range(4):\n    # The next() function will load 8 images from CIFAR\n    X, Y = data_iterator.next()\n    for j, img in enumerate(X):\n        ax[i, j].imshow(img.astype('int'))\n```"]