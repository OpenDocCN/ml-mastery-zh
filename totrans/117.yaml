- en: Deep Learning with PyTorch (9-Day Mini-Course)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/deep-learning-with-pytorch-9-day-mini-course/](https://machinelearningmastery.com/deep-learning-with-pytorch-9-day-mini-course/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deep learning is a fascinating field of study and the techniques are achieving
    world class results in a range of challenging machine learning problems. It can
    be hard to get started in deep learning.
  prefs: []
  type: TYPE_NORMAL
- en: '**Which library should you use and which techniques should you focus on?**'
  prefs: []
  type: TYPE_NORMAL
- en: In this 9-part crash course you will discover applied deep learning in Python
    with the easy to use and powerful PyTorch library. This mini-course is intended
    for practitioners that are already comfortable with programming in Python and
    knows the basic concept of machine learning. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: This is a long and useful post. You might want to print it out.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9471c948e144cb14d6168d40fad1bcbb.png)'
  prefs: []
  type: TYPE_IMG
- en: Deep Learning with PyTorch (9-day Mini-Course)
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Cosmin Georgian](https://unsplash.com/photos/people-near-pagoda-under-white-and-blue-sky-gd3ysFyrsTQ).
    Some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Who Is This Mini-Course For?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get started, let’s make sure you are in the right place. The list
    below provides some general guidelines as to who this course was designed for.
    Don’t panic if you don’t match these points exactly, you might just need to brush
    up in one area or another to keep up.
  prefs: []
  type: TYPE_NORMAL
- en: '**Developers that know how to write a little code**. This means that it is
    not a big deal for you to get things done with Python and know how to setup the
    ecosystem on your workstation (a prerequisite). It does not mean you’re a wizard
    coder, but it does mean you’re not afraid to install packages and write scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developers that know a little machine learning**. This means you know about
    the basics of machine learning like cross-validation, some algorithms and the
    bias-variance trade-off. It does not mean that you are a machine learning PhD,
    just that you know the landmarks or know where to look them up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This mini-course is not a textbook on Deep Learning.
  prefs: []
  type: TYPE_NORMAL
- en: It will take you from a developer that knows a little machine learning in Python
    to a developer who can get results and bring the power of Deep Learning to your
    own projects.
  prefs: []
  type: TYPE_NORMAL
- en: Mini-Course Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This mini-course is divided into 9 parts.
  prefs: []
  type: TYPE_NORMAL
- en: Each lesson was designed to take the average developer about 30 minutes. You
    might finish some much sooner and other you may choose to go deeper and spend
    more time.
  prefs: []
  type: TYPE_NORMAL
- en: You can complete each part as quickly or as slowly as you like. A comfortable
    schedule may be to complete one lesson per day over nine days. Highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics you will cover over the next 9 lessons are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lesson 1**: Introduction to PyTorch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 2**: Build Your First Multilayer Perceptron Model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 3**: Training a PyTorch Model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 4**: Using a PyTorch Model for Inference'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 5**: Loading Data from Torchvision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 6**: Using PyTorch DataLoader'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 7**: Convolutional Neural Network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 8**: Train an Image Classifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 9**: Train with GPU'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is going to be a lot of fun.
  prefs: []
  type: TYPE_NORMAL
- en: You’re going to have to do some work though, a little reading, a little research
    and a little programming. You want to learn deep learning right?
  prefs: []
  type: TYPE_NORMAL
- en: '**Post your results in the comments**; I’ll cheer you on!'
  prefs: []
  type: TYPE_NORMAL
- en: Hang in there; don’t give up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 01: Introduction to PyTorch'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyTorch is a Python library for deep learning computing created and released
    by Facebook. It has its root from an earlier library Torch 7 but completely rewritten.
  prefs: []
  type: TYPE_NORMAL
- en: It is one of the two most popular deep learning libraries. PyTorch is a complete
    library that has the capability to train a deep learning model as well as run
    a model in inference mode, and supports using GPU for faster training and inference.
    It is a platform that we cannot ignore.
  prefs: []
  type: TYPE_NORMAL
- en: In this lesson your goal is to install PyTorch become familiar with the syntax
    of the symbolic expressions used in PyTorch programs.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can install PyTorch using `pip`. The latest version of PyTorch
    at the time of writing is 2.0\. There are PyTorch prebuilt for each platform,
    including Windows, Linux, and macOS. With a working Python environment, `pip`
    should take care of that for you to provide you the latest version in your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Besides PyTorch, there is also the `torchvision` library that is commonly used
    together with PyTorch. It provides a lot of useful functions to help computer
    vision projects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A small example of a PyTorch program that you can use as a starting point is
    listed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Learn more about PyTorch on the [PyTorch homepage](https://www.pytorch.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Repeat the above code to make sure you have PyTorch correctly installed. You
    can also check your PyTorch version by running the following lines of Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the next lesson, you will use PyTorch to build a neural network model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 02: Build Your First Multilayer Perceptron Model'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deep learning is about building large scale neural networks. The simplest form
    of neural network is called multilayer perceptron model. The building block for
    neural networks are artificial neurons or perceptrons. These are simple computational
    units that have weighted input signals and produce an output signal using an activation
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Perceptrons are arranged into networks. A row of perceptrons is called a layer
    and one network can have multiple layers. The architecture of the perceptrons
    in the network is often called the network topology. Once configured, the neural
    network needs to be trained on your dataset. The classical and still preferred
    training algorithm for neural networks is called stochastic gradient descent.
  prefs: []
  type: TYPE_NORMAL
- en: '![Model of a Simple Neuron](../Images/c8f8094f52ec2ce1580e555f70538bf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Model of a Simple Neuron
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch allows you to develop and evaluate deep learning models in very few
    lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: In the following, your goal is to develop your first neural network using PyTorch.
    Use a standard binary (two-class) classification dataset from the UCI Machine
    Learning Repository, like the [Pima Indians dataset](https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv).
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep things simple, the network model is just a few layers of **fully-connected**
    perceptrons. In this particular model, the dataset has 12 inputs or **predictors**
    and the output is a single value of 0 or 1\. Therefore, the network model should
    have 12 inputs (at the first layer) and 1 output (at the last layer). Your first
    model would be built as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is a network with 3 fully-connected layers. Each layer is created in PyTorch
    using the `nn.Linear(x, y)` syntax which the first argument is the number of input
    to the layer and the second is the number of output. Between each layer, a rectified
    linear activation is used, but at the output, sigmoid activation is applied such
    that the output value is between 0 and 1\. This is a typical network. A deep learning
    model is to have a lot of such layers in a model.
  prefs: []
  type: TYPE_NORMAL
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Repeat the above code and observe the printed model output. Try to add another
    layer that outputs 20 values after the first `Linear` layer above. What should
    you change to the line of `nn.Linear(12, 8)` to accommodate this addition?
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, you will see how to train this model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 03: Training a PyTorch Model'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building a neural network in PyTorch does not tell how you should train the
    model for a particular job. In fact, there are many variations in this aspect
    as described by the **hyperparameters**. In PyTorch, or all deep learning models
    in general, you need to decide the following on how to train a model:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the dataset, specifically how the input and target looks like
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the loss function to evaluate the goodness of fit of the model to the
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the optimization algorithm to train the model, and the parameters to
    the optimization algorithm such as learning rate and number of
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterations to train
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the previous lesson, the Pima Indian dataset is used and all the input are
    numbers. This would be the simplest case as you are not required to do any preprocessing
    of the data since neural networks can readily handle numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Since it is a binary classification problem, the loss function should be binary
    cross entropy. It means that the target of the model output is 0 or 1 for the
    classification result. But in reality the model may output anything in between.
    The closer it is to the target value, the better (i.e., lower **loss**).
  prefs: []
  type: TYPE_NORMAL
- en: Gradient descent is the algorithm to optimize neural networks. There are many
    variations of gradient descent and Adam is one of the most used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing all the above, together with the model built in the previous lesson,
    the following is the code of the training process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The for-loop above is to get a **batch** of data and feed into the model. Then
    observe the model’s output and calculate the loss function. Based on the loss
    function, the optimizer will fine-tune the model for one step, so it can match
    better to the training data. After a number of update steps, the model should
    be close enough to the training data that it can predict the target at a high
    accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the training loop above and observe how the loss decreases as the training
    loop proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, you will see how use the trained model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 04: Using a PyTorch Model for Inference'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A trained neural network model is a model that remembered how the input and
    target related. Then, this model can predict the target given another input.
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyTorch, a trained model can behave just like a function. Assume you have
    the model trained in the previous lesson, you can simply use it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'But in fact, the better way of running inference is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Some model will behave differently between training and inference. The line
    of `model.eval()` is to signal the model that the intention is to run the model
    for inference. The line `with torch.no_grad()`  is to create a context for running
    the model, such that PyTorch knows calculating the gradient is not required. This
    can consume less resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is also how you can evaluate the model. The model outputs a sigmoid value,
    which is between 0 and 1\. You can interpret the value by rounding off the value
    to the closest integer (i.e., Boolean label). Comparing how often the prediction
    after round off match the target, you can assign an accuracy percentage to the
    model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the above code and see what is the accuracy you get. You should achieve
    roughly 75%.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, you will learn about torchvision.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 05: Loading Data from Torchvision'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Torchvision is a sister library to PyTorch. In this library, there are functions
    specialized for image and computer vision. As you can expect, there are functions
    to help you read images or adjust the contrast. But probably most important is
    to provide an easy interface to get some image datasets.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, you will build a deep learning model to classify small images.
    This is a model that allows your computer to see what’s on an image. As you saw
    in the previous lessons, it is important to have the dataset to train the model.
    The dataset you’re going to use is CIFAR-10\. It is a dataset of 10 different
    objects. There is a larger dataset called CIFAR-100, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CIFAR-10 dataset can be downloaded from the Internet. But if you have torchvision
    installed, you just need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `torchvision.datasets.CIFAR10` function helps you to download the CIFAR-10
    dataset to a local directory. The dataset is divided into training set and test
    set. Therefore the two lines above is to get both of them. Then you plot the first
    24 images from the downloaded dataset. Each image in the dataset is 32×32 pixels
    picture of one of the following: airplane, automobile, bird, cat, deer, dog, frog,
    horse, ship, or truck.'
  prefs: []
  type: TYPE_NORMAL
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Based on the code above, can you find a way to count how many images in total
    in the training set and test set, respectively?
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, you will learn how to use PyTorch DataLoader.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 06: Using PyTorch DataLoader'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CIFAR-10 image from the previous lesson is indeed in the format of numpy
    array. But for consumption by a PyTorch model, it needs to be in PyTorch tensors.
    It is not difficult to convert a numpy array into PyTorch tensor but in the training
    loop, you still need to divide the dataset in batches. The PyTorch DataLoader
    can help you make this process smoother.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the CIFAR-10 dataset as loaded in the previous lesson, you can do the
    following for the identical effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this code, `trainset` is created with `transform` argument so that the data
    is converted into PyTorch tensor when it is extracted. This is performed in `DataLoader`
    the lines following it. The `DataLoader` object is a Python iterable, which you
    can extract the input (which are images) and target (which are integer class labels).
    In this case, you set the batch size to 24 and iterate for the first batch. Then
    you show each image in the batch.
  prefs: []
  type: TYPE_NORMAL
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the code above and compare with the matplotlib output you generated in the
    previous lesson. You should see the output are different. Why? There is an argument
    in the `DataLoader` lines caused the difference. Can you identify which one?
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, you will learn how to build a deep learning model to classify
    the images from CIFAR-10 dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 07: Convolutional Neural Network'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images are 2D structures. You can easily convert them into 1D vectors by flattening
    it and build a neural network model to classify them. But it is known that preserving
    the 2D structure would be more appropriate because the classification is about
    what’s in the image, which is **translation invariant**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The standard way for image processing neural network is to use convolutional
    layers. A neural network that uses convolutional layers is called a convolutional
    neural network. An example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the above, we used `Conv2d` layers several times, as well as `ReLU` activation.
    The convolutional layers are to learn and extract **features** from image. More
    convolutional layers you add, the network can learn more high-level features.
    Eventually, you would use a pooling layer (`MaxPool2d` above) to group the extracted
    features, flatten them into a vector, then pass it on to a multilayer perceptron
    network for final classification. This is the usual structure of an image classification
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the above code to make sure you can correctly create a model. You didn’t
    specify the input image size in the model but indeed it is fixed to 32×32 pixels
    in RGB (i.e., 3 color channels). Where is this fixed in the network?
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, you will use the DataLoader in the previous lesson to train
    the model above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 08: Train an Image Classifier'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Together with the DataLoader created for CIFAR-10 dataset, you can train the
    convolutional neural network in the previous lesson with the following training
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will take a while to run, and you should see the model produced can achieve
    no less than 70% accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: This model is a multiclass classification network. The output is not one, but
    many scores, one for each class. We consider the higher score the more confident
    the model thinks the image belongs to a class. The loss function used is therefore
    **cross-entropy**, the multiclass version of binary cross-entropy.
  prefs: []
  type: TYPE_NORMAL
- en: In the training loop above, you should see quite many elements you learned in
    the previous lessons. Including switching between training and inference mode
    in the model, using `torch.no_grad()` context, and calculation of the accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read the code above to make sure you understand what it does. Run this code
    to observe the accuracy increase as the training proceeds. What is the final accuracy
    you achieved?
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, you will learn how to use GPU to speed up the training of
    the same model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 09: Train with GPU'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model training you did in the previous lesson should take a while. If you
    have a supported GPU, you can speed up the training a lot.
  prefs: []
  type: TYPE_NORMAL
- en: The way to use GPU in PyTorch is to send the model and data to GPU before execution.
    Then you have an option to send back the result from GPU, or perform the evaluation
    in GPU directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is not difficult to modify the code from the previous lesson to use GPU.
    Below is what it should be done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The changes made are the following: You check if GPU is available and set the
    `device` accordingly. Then the model is sent to the device. When the input (i.e.,
    a batch of images) is pass on to the model, it should be sent to the corresponding
    device first. Since the model output will also be there, the loss calculation
    or the accuracy calculation should also have the target sent to the GPU first.'
  prefs: []
  type: TYPE_NORMAL
- en: Your Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see the running PyTorch in CPU and in GPU are mostly the same. Try compare
    the two if you can access to a GPU. How much faster you can observe?
  prefs: []
  type: TYPE_NORMAL
- en: This was the final lesson.
  prefs: []
  type: TYPE_NORMAL
- en: The End! (*Look How Far You Have Come*)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You made it. Well done!
  prefs: []
  type: TYPE_NORMAL
- en: Take a moment and look back at how far you have come.
  prefs: []
  type: TYPE_NORMAL
- en: You discovered PyTorch as a deep learning library in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You built your first neural network using PyTorch and learned how to do classification
    with a neural network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You learned key components in deep learning, including loss function, optimizer,
    training loop, and evaluation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you took the next step and learned about and developed convolutional
    neural networks for computer vision tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**How did you do with the mini-course?**'
  prefs: []
  type: TYPE_NORMAL
- en: Did you enjoy this crash course?
  prefs: []
  type: TYPE_NORMAL
- en: '**Do you have any questions? Were there any sticking points?**'
  prefs: []
  type: TYPE_NORMAL
- en: Let me know. Leave a comment below.
  prefs: []
  type: TYPE_NORMAL
