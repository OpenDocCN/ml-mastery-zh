["```py\n# Import the Pandas Library\nimport pandas as pd\n\n# Load the dataset\nAmes = pd.read_csv('Ames.csv')\n\n# Define the quartiles\nquantiles = Ames['SalePrice'].quantile([0.25, 0.5, 0.75])\n\n# Function to categorize each row\ndef categorize_by_price(row):\n    if row['SalePrice'] <= quantiles.iloc[0]:\n        return 'Low'\n    elif row['SalePrice'] <= quantiles.iloc[1]:\n        return 'Medium'\n    elif row['SalePrice'] <= quantiles.iloc[2]:\n        return 'High'\n    else:\n        return 'Premium'\n\n# Apply the function to create a new column\nAmes['Price_Category'] = Ames.apply(categorize_by_price, axis=1)\nprint(Ames[['SalePrice','Price_Category']])\n```", "```py\n      SalePrice Price_Category\n0        126000            Low\n1        139500         Medium\n2        124900            Low\n3        114000            Low\n4        227000        Premium\n...         ...            ...\n2574     121000            Low\n2575     139600         Medium\n2576     145000         Medium\n2577     217500        Premium\n2578     215000        Premium\n\n[2579 rows x 2 columns]\n```", "```py\n# Import Matplotlib & Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Split original dataset into 4 DataFrames by Price Category\nlow_priced_homes = Ames.query('Price_Category == \"Low\"')\nmedium_priced_homes = Ames.query('Price_Category == \"Medium\"')\nhigh_priced_homes = Ames.query('Price_Category == \"High\"')\npremium_priced_homes = Ames.query('Price_Category == \"Premium\"')\n\n# Setting the style for aesthetic looks\nsns.set_style(\"whitegrid\")\n\n# Create a figure\nplt.figure(figsize=(10, 6))\n\n# Plot each ECDF on the same figure\nsns.ecdfplot(data=low_priced_homes, x='YearBuilt', color='skyblue', label='Low')\nsns.ecdfplot(data=medium_priced_homes, x='YearBuilt', color='orange', label='Medium')\nsns.ecdfplot(data=high_priced_homes, x='YearBuilt', color='green', label='High')\nsns.ecdfplot(data=premium_priced_homes, x='YearBuilt', color='red', label='Premium')\n\n# Adding labels and title for clarity\nplt.title('ECDF of Year Built by Price Category', fontsize=16)\nplt.xlabel('Year Built', fontsize=14)\nplt.ylabel('ECDF', fontsize=14)\nplt.legend(title='Price Category', title_fontsize=14, fontsize=14)\n\n# Show the plot\nplt.show()\n```", "```py\n# Stacking Low and Medium categories into an \"affordable_homes\" DataFrame\naffordable_homes = pd.concat([low_priced_homes, medium_priced_homes])\n\n# Stacking High and Premium categories into a \"luxury_homes\" DataFrame\nluxury_homes = pd.concat([high_priced_homes, premium_priced_homes])\n```", "```py\n# Creating pivot tables with both mean living area and home count\npivot_affordable = affordable_homes.pivot_table(index='Fireplaces', \n                                                aggfunc={'GrLivArea': 'mean', 'Fireplaces': 'count'})\npivot_luxury = luxury_homes.pivot_table(index='Fireplaces', \n                                        aggfunc={'GrLivArea': 'mean', 'Fireplaces': 'count'})\n\n# Renaming columns and index labels separately\npivot_affordable.rename(columns={'GrLivArea': 'AvLivArea', 'Fireplaces': 'HmCount'}, inplace=True)\npivot_affordable.index.name = 'Fire'\n\npivot_luxury.rename(columns={'GrLivArea': 'AvLivArea', 'Fireplaces': 'HmCount'}, inplace=True)\npivot_luxury.index.name = 'Fire'  \n\n# View the pivot tables\nprint(pivot_affordable)\nprint(pivot_luxury)\n```", "```py\n      HmCount    AvLivArea\nFire                      \n0         931  1159.050483\n1         323  1296.808050\n2          38  1379.947368\n```", "```py\n      HmCount    AvLivArea\nFire                      \n0         310  1560.987097\n1         808  1805.243812\n2         157  1998.248408\n3          11  2088.090909\n4           1  2646.000000\n```", "```py\npivot = Ames.pivot_table(index=\"Fireplaces\",\n                         columns=\"Price_Category\",\n                         aggfunc={'GrLivArea':'mean', 'Fireplaces':'count'})\nprint(pivot)\n```", "```py\n               Fireplaces                          GrLivArea\nPrice_Category       High    Low Medium Premium         High          Low       Medium      Premium\nFireplaces\n0                   228.0  520.0  411.0    82.0  1511.912281  1081.496154  1257.172749  1697.439024\n1                   357.0  116.0  207.0   451.0  1580.644258  1184.112069  1359.961353  1983.031042\n2                    52.0    9.0   29.0   105.0  1627.384615  1184.888889  1440.482759  2181.914286\n3                     5.0    NaN    NaN     6.0  1834.600000          NaN          NaN  2299.333333\n4                     NaN    NaN    NaN     1.0          NaN          NaN          NaN  2646.000000\n```", "```py\npivot_outer_join = pd.merge(pivot_affordable, pivot_luxury, on='Fire', how='outer', suffixes=('_aff', '_lux')).fillna(0)\nprint(pivot_outer_join)\n```", "```py\n      HmCount_aff  AvLivArea_aff  HmCount_lux  AvLivArea_lux\nFire                                                        \n0           931.0    1159.050483          310    1560.987097\n1           323.0    1296.808050          808    1805.243812\n2            38.0    1379.947368          157    1998.248408\n3             0.0       0.000000           11    2088.090909\n4             0.0       0.000000            1    2646.000000\n```", "```py\npivot_inner_join = pd.merge(pivot_affordable, pivot_luxury, on='Fire', how='inner', suffixes=('_aff', '_lux'))\nprint(pivot_inner_join)\n```", "```py\n      HmCount_aff  AvLivArea_aff  HmCount_lux  AvLivArea_lux\nFire                                                        \n0             931    1159.050483          310    1560.987097\n1             323    1296.808050          808    1805.243812\n2              38    1379.947368          157    1998.248408\n```", "```py\n# Resetting index to display cross join\npivot_affordable.reset_index(inplace=True)\npivot_luxury.reset_index(inplace=True)\n\npivot_cross_join = pd.merge(pivot_affordable, pivot_luxury, how='cross', suffixes=('_aff', '_lux')).round(2)\nprint(pivot_cross_join)\n```", "```py\n    Fire_aff  HmCount_aff  AvLivArea_aff  Fire_lux  HmCount_lux  AvLivArea_lux\n0          0          931        1159.05         0          310        1560.99\n1          0          931        1159.05         1          808        1805.24\n2          0          931        1159.05         2          157        1998.25\n3          0          931        1159.05         3           11        2088.09\n4          0          931        1159.05         4            1        2646.00\n5          1          323        1296.81         0          310        1560.99\n6          1          323        1296.81         1          808        1805.24\n7          1          323        1296.81         2          157        1998.25\n8          1          323        1296.81         3           11        2088.09\n9          1          323        1296.81         4            1        2646.00\n10         2           38        1379.95         0          310        1560.99\n11         2           38        1379.95         1          808        1805.24\n12         2           38        1379.95         2          157        1998.25\n13         2           38        1379.95         3           11        2088.09\n14         2           38        1379.95         4            1        2646.00\n```"]