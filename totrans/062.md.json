["```py\n# Function to load the dataset\ndef load_csv(filename):\n    file = open(filename, \"rt\")\n    lines = reader(file)\n    dataset = list(lines)\n    return dataset\n\n# Function to convert a string column to float\ndef str_column_to_float(dataset, column):\n    for row in dataset:\n        row[column] = float32(row[column].strip())\n\n# Load the dataset from text file\ndata = load_csv('Data/data_banknote_authentication.txt')\n\n# Convert the dataset string numbers to float\nfor i in range(len(data[0])):\n    str_column_to_float(data, i)\n\n# Convert list to array\ndata = array(data)\n\n# Separate the dataset samples from the ground truth\nsamples = data[:, :4]\ntarget = data[:, -1, newaxis].astype(int32)\n\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = ms.train_test_split(samples, target, test_size=0.2, random_state=10)\n```", "```py\n# Create an empty decision tree\nrtree = ml.RTrees_create()\n```", "```py\n# Train the decision tree\nrtree.train(x_train, ml.ROW_SAMPLE, y_train)\n\n# Predict the target labels of the testing data\n_, y_pred = rtree.predict(x_test)\n\n# Compute and print the achieved accuracy\naccuracy = (sum(y_pred.astype(int32) == y_test) / y_test.size) * 100\nprint('Accuracy:', accuracy[0], '%')\n```", "```py\nAccuracy: 96.72727272727273 %\n```", "```py\nfrom csv import reader\nfrom numpy import array, float32, int32, newaxis\nfrom cv2 import ml\nfrom sklearn import model_selection as ms\n\n# Function to load the dataset\ndef load_csv(filename):\n    file = open(filename, \"rt\")\n    lines = reader(file)\n    dataset = list(lines)\n    return dataset\n\n# Function to convert a string column to float\ndef str_column_to_float(dataset, column):\n    for row in dataset:\n        row[column] = float32(row[column].strip())\n\n# Load the dataset from text file\ndata = load_csv('Data/data_banknote_authentication.txt')\n\n# Convert the dataset string numbers to float\nfor i in range(len(data[0])):\n    str_column_to_float(data, i)\n\n# Convert list to array\ndata = array(data)\n\n# Separate the dataset samples from the ground truth\nsamples = data[:, :4]\ntarget = data[:, -1, newaxis].astype(int32)\n\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = ms.train_test_split(samples, target, test_size=0.2, random_state=10)\n\n# Create an empty decision tree\nrtree = ml.RTrees_create()\n\n# Train the decision tree\nrtree.train(x_train, ml.ROW_SAMPLE, y_train)\n\n# Predict the target labels of the testing data\n_, y_pred = rtree.predict(x_test)\n\n# Compute and print the achieved accuracy\naccuracy = (sum(y_pred.astype(int32) == y_test) / y_test.size) * 100\nprint('Accuracy:', accuracy[0], '%')\n```", "```py\nfrom digits_dataset import split_images, split_data\nfrom feature_extraction import hog_descriptors\nfrom numpy import array, float32\nfrom cv2 import ml\n\n# Load the digits image\nimg, sub_imgs = split_images('Images/digits.png', 20)\n\n# Obtain training and testing datasets from the digits image\ndigits_train_imgs, digits_train_labels, digits_test_imgs, digits_test_labels = split_data(20, sub_imgs, 0.8)\n\n# Convert the image data into HOG descriptors\ndigits_train_hog = hog_descriptors(digits_train_imgs)\ndigits_test_hog = hog_descriptors(digits_test_imgs)\n\n# Create an empty decision tree\nrtree_digits = ml.RTrees_create()\n\n# Predict the target labels of the testing data\n_, digits_test_pred = rtree_digits.predict(digits_test_hog)\n\n# Compute and print the achieved accuracy\naccuracy_digits = (sum(digits_test_pred.astype(int) == digits_test_labels) / digits_test_labels.size) * 100\nprint('Accuracy:', accuracy_digits[0], '%')\n```", "```py\nAccuracy: 81.0 %\n```", "```py\nprint('Default tree depth:', rtree_digits.getMaxDepth())\nprint('Default termination criteria:', rtree_digits.getTermCriteria())\n```", "```py\nDefault tree depth: 5\nDefault termination criteria: (3, 50, 0.1)\n```", "```py\nfrom digits_dataset import split_images, split_data\nfrom feature_extraction import hog_descriptors\nfrom numpy import array, float32\nfrom cv2 import ml, TERM_CRITERIA_MAX_ITER, TERM_CRITERIA_EPS\n\n# Load the digits image\nimg, sub_imgs = split_images('Images/digits.png', 20)\n\n# Obtain training and testing datasets from the digits image\ndigits_train_imgs, digits_train_labels, digits_test_imgs, digits_test_labels = split_data(20, sub_imgs, 0.8)\n\n# Convert the image data into HOG descriptors\ndigits_train_hog = hog_descriptors(digits_train_imgs)\ndigits_test_hog = hog_descriptors(digits_test_imgs)\n\n# Create an empty decision tree\nrtree_digits = ml.RTrees_create()\n\n# Read the default parameter values\nprint('Default tree depth:', rtree_digits.getMaxDepth())\nprint('Default termination criteria:', rtree_digits.getTermCriteria())\n\n# Change the default parameter values\nrtree_digits.setMaxDepth(15)\nrtree_digits.setTermCriteria((TERM_CRITERIA_MAX_ITER + TERM_CRITERIA_EPS, 100, 0.01))\n\n# Train the decision tree\nrtree_digits.train(digits_train_hog.astype(float32), ml.ROW_SAMPLE, digits_train_labels)\n\n# Predict the target labels of the testing data\n_, digits_test_pred = rtree_digits.predict(digits_test_hog)\n\n# Compute and print the achieved accuracy\naccuracy_digits = (sum(digits_test_pred.astype(int) == digits_test_labels) / digits_test_labels.size) * 100\nprint('Accuracy:', accuracy_digits[0], â€˜%')\n```", "```py\nAccuracy: 94.1 %\n```"]