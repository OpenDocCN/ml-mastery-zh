- en: Python for Machine Learning (7-day mini-course)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 机器学习（7 天迷你课程）
- en: 原文：[https://machinelearningmastery.com/python-for-machine-learning-7-day-mini-course/](https://machinelearningmastery.com/python-for-machine-learning-7-day-mini-course/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/python-for-machine-learning-7-day-mini-course/](https://machinelearningmastery.com/python-for-machine-learning-7-day-mini-course/)
- en: Python for Machine Learning Crash Course.
  id: totrans-2
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Python 机器学习速成课程。
- en: Learn core Python in 7 days.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 7 天内学习核心 Python。
- en: Python is an amazing programming language. Not only it is widely used in machine
    learning projects, you can also find its presence in system tools, web projects,
    and many others. Having good Python skills can make you work more efficiently
    because it is famous for its simplicity. You can try out your idea faster. You
    can also present your idea in a concise code in Python.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种了不起的编程语言。它不仅在机器学习项目中被广泛使用，你还可以在系统工具、网页项目等许多领域中找到它的身影。拥有良好的 Python
    技能可以让你的工作更加高效，因为它以简洁著称。你可以更快地尝试你的想法。你还可以用简洁的 Python 代码展示你的想法。
- en: As a practitioner, you are not required to know how the language is built, but
    you should know that the language can help you in various tasks. You can see how
    concise a Python code can be, and how much the functions from its libraries can
    do.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作为从业者，你不需要知道语言的构建方式，但你应该知道语言可以帮助你完成各种任务。你可以看到 Python 代码的简洁性，以及其库中的函数可以完成的任务。
- en: In this crash course, you will discover some common Python techniques, from
    doing the exercises in seven days.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本速成课程中，你将发现一些常见的 Python 技巧，通过在七天内完成练习来掌握它们。
- en: This is a big and important post. You might want to bookmark it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要且内容丰富的帖子。你可能想要收藏它。
- en: Let’s get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: '![Python for Machine Learning (7-Day Mini-Course)](../Images/e18684f37e65715779290e414b076135.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Python 机器学习（7 天迷你课程）](../Images/e18684f37e65715779290e414b076135.png)'
- en: Python for Machine Learning (7-Day Mini-Course)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 机器学习（7 天迷你课程）
- en: Photo by [David Clode](https://unsplash.com/photos/vec5yfUvCGs), some rights
    reserved.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [David Clode](https://unsplash.com/photos/vec5yfUvCGs) 提供，版权所有。
- en: Who Is This Crash-Course For?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这个速成课程适合谁？
- en: Before you get started, let’s make sure you are in the right place.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始之前，让我们确保你在正确的地方。
- en: This course is for developers who may know some programming. Maybe you know
    another language, or you may be able to write a few lines of code in Python to
    do something simple.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程适合那些可能了解一些编程的开发者。也许你知道另一种语言，或者你可能能够用 Python 编写几行代码来完成简单的任务。
- en: 'The lessons in this course do assume a few things about you, such as:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程的内容确实对你有一些假设，例如：
- en: You know your way around basic Python.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你对基本的 Python 知识很熟悉。
- en: You understand the basic programming concepts, such as variables, arrays, loops,
    and functions.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你理解基本的编程概念，如变量、数组、循环和函数。
- en: You can work with Python in command line or inside an IDE.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在命令行或 IDE 中使用 Python。
- en: 'You do NOT need to be:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要是：
- en: A star programmer
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一位明星程序员
- en: A Python expert
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Python 专家
- en: This crash course can help you transform from a novice programmer to an expert
    who can code comfortably in Python.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本速成课程可以帮助你从一个新手程序员成长为一个可以自如编写 Python 代码的专家。
- en: 'This crash course assumes you have a working Python 3.7 environment installed.
    If you need help with your environment, you can follow the step-by-step tutorial
    here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本速成课程假设你已经安装了一个正常工作的 Python 3.7 环境。如果你需要环境设置方面的帮助，可以按照这里的逐步教程进行操作：
- en: '[How to Set Up Your Python Environment for Machine Learning With Anaconda](https://machinelearningmastery.com/setup-python-environment-machine-learning-deep-learning-anaconda/)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Anaconda 设置你的 Python 环境以进行机器学习](https://machinelearningmastery.com/setup-python-environment-machine-learning-deep-learning-anaconda/)'
- en: Crash-Course Overview
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速成课程概览
- en: This crash course is broken down into seven lessons.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本速成课程分为七节课。
- en: You could complete one lesson per day (recommended) or complete all of the lessons
    in one day (hardcore). It really depends on the time you have available and your
    level of enthusiasm.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以每天完成一节课（推荐）或在一天内完成所有课程（高强度）。这完全取决于你可用的时间和你的热情程度。
- en: 'Below is a list of the seven lessons that will get you started and productive
    with Python:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将帮助你开始并高效使用 Python 的七节课列表：
- en: '**Lesson 01**: Manipulating lists'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 01 课**：操作列表'
- en: '**Lesson 02**: Dictionaries'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 02 课**：字典'
- en: '**Lesson 03**: Tuples'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 03 课**：元组'
- en: '**Lesson 04**: Strings'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 04 课**：字符串'
- en: '**Lesson 05**: List comprehension'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 05 课**：列表推导式'
- en: '**Lesson 06**: Enumerate and zip'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 06 课**：枚举和压缩'
- en: '**Lesson 07**: Map, filter, and reduce'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 07 课**：映射、过滤和减少'
- en: Each lesson could take you between 5 and up to 30 minutes. Take your time and
    complete the lessons at your own pace. Ask questions, and even post results in
    the comments online.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每节课可能需要你花费5到30分钟。请按自己的节奏完成课程。提问，甚至可以在网上评论区发布结果。
- en: The lessons might expect you to go off and find out how to do things. This guide
    will give you hints, but part of the point of each lesson is to force you to learn
    where to go to look for help with and about the algorithms and the best-of-breed
    tools in Python.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 课程可能会要求你自己去找出如何做。这份指南会给你一些提示，但每节课的部分重点是强迫你学习去哪里寻求有关算法和Python最佳工具的帮助。
- en: '**Post your results in the comments**; I’ll cheer you on!'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**在评论区发布你的结果**；我会为你加油！'
- en: Hang in there; don’t give up.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 坚持下去，别放弃。
- en: 'Lesson 01: Manipulating lists'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 课程01：操作列表
- en: In this lesson, you will discover a basic data structures in Python, the list.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节课中，你将了解Python中的基础数据结构——列表。
- en: In other programming languages, there are arrays. The counterpart in Python
    is **list**. A Python list does not limit the number of elements it stores. You
    can always append elements into it, and it will automatically expand its size.
    Python list also does not require its elements to be in the same type. You can
    mix and match different elements into a list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他编程语言中，有数组。Python中的对应物是**列表**。Python列表没有限制它存储的元素数量。你可以随时向其中添加元素，它会自动扩展大小。Python列表也不要求其元素类型相同。你可以在一个列表中混合不同的元素。
- en: 'In the following, we create a list of some integers, and then append a string
    into it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个整数列表，然后向其中添加一个字符串：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Python lists are zero-indexed. Namely, to get the first element in the above
    list, we do:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python列表是零索引的。也就是说，要获取上面列表中的第一个元素，我们可以这样做：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will print `1` to the screen.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印`1`到屏幕上。
- en: 'Python lists allow negative indices to mean counting elements from the back.
    So the way to print the last element from the above list is:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python列表允许负索引表示从后往前计数。因此，打印上述列表的最后一个元素的方式是：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Python also has a handy syntax to find a slice of a list. To print the last
    two elements, we do:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Python还具有一个方便的语法来查找列表的切片。要打印最后两个元素，我们可以这样做：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Usually, the slice syntax is `start:end` where the end is not included in the
    result. If omitted, the default will be the first element as the start and the
    one beyond the end of the entire list as the end. We can also use the slice syntax
    to make a `step.” For example, this is how we can extract even and odd numbers:`
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，切片语法是`start:end`，其中end不包括在结果中。如果省略，默认起始元素为第一个元素，结束元素为整个列表的最后一个元素之后的元素。我们还可以使用切片语法来设置`step`。例如，这样我们可以提取偶数和奇数：
- en: '[PRE4] x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  odd = x[::2]  even = x[1::2]  print(odd)  print(even)
    [PRE5] price = {      "apple": 1.5,      "orange": 1.25,      "banana": 0.5  }  print("apple
    costs $", price["apple"]) [PRE6] price["lemon"] = 0.6  print("lemon costs $",
    price["lemon"]) [PRE7] if "strawberry" in price:      print("strawberry costs
    $", price["strawberry"])  else:      # if price is not found, assume $1      print("strawberry
    costs $1") [PRE8] print("strawberry costs $", price.get("strawberry", 1)) [PRE9]
    print("strawberry costs $", price.get("strawberry")) [PRE10] strawberry costs
    $ None [PRE11] fruits = list(price.keys())  numbers = list(price.values())  print(fruits)  print(numbers)
    [PRE12] pairs = list(price.items())  print(pairs) [PRE13] [(''apple'', 1.5), (''orange'',
    1.25), (''banana'', 0.5), (''lemon'', 0.6)] [PRE14] price1 = {      "apple": 1.5,      "orange":
    1.25,      "strawberry": 1.0  }  price2 = {      "banana": 0.5  }  pairs1 = list(price1.items())  pairs2
    = list(price2.items())  price = dict(pairs1 + pairs2)  print(price) [PRE15] {''apple'':
    1.5, ''orange'': 1.25, ''strawberry'': 1.0, ''banana'': 0.5} [PRE16] price = price1
    | price2  price = {**price1, **price2} [PRE17] x = (1, 2, 3) [PRE18] def powers(n):      return
    n, n**2, n**3  x = powers(2)  print(x) [PRE19] (2, 4, 8) [PRE20] itself, squared,
    cubed = powers(2) [PRE21] count, elements = 0, [] [PRE22] a, b = b, a [PRE23]
    x = [("alpha", 0.5), ("gamma", 0.1), ("beta", 1.1), ("alpha", -3)] [PRE24] x =
    "Hello ????"  print(x) [PRE25] if x.startswith("Hello"):      print("x starts
    with Hello")  if not x.endswith("World"):      print("x does not end with World")
    [PRE26] if "ll" in x:      print("x contains double-l") [PRE27] x = "hel" \    "lo
    world"  x = "hello" " world"  x = ("hello "      "world") [PRE28] x = "world"  y
    = "hello %s" % x  y = "hello {}".format(x)  y = f"hello {x}" [PRE29] coord = {"lat":
    51.5072, "lon": -0.1276}  print("latitude %(lat)f, longitude %(lon)f" % coord)  print("latitude
    {lat}, longitude {lon}".format(**coord)) [PRE30] numbers = ["fizzbuzz" if n%15==0
    else "fizz" if n%3==0 else "buzz" if n%5==0 else str(n)            for n in range(1,101)]  print("\n".join(numbers))
    [PRE31] mul3 = [n for n in range(1,101) if n%3 == 0] [PRE32] table = [[m*n for
    n in range(1,11)] for m in range(1,11)]  for row in table:      print(row) [PRE33]
    directions = [a+b for a in ["north", "south", ""] for b in ["east", "west", ""]
    if not (a=="" and b=="")]  print(directions) [PRE34] [''northeast'', ''northwest'',
    ''north'', ''southeast'', ''southwest'', ''south'', ''east'', ''west''] [PRE35]
    double = {n: 2*n for n in range(1,11)} [PRE36] keys = ["one", "two", "three",
    "four", "five", "six", "seven", "eight", "nine", "ten"]  mapping = {...} [PRE37]
    x = ["alpha", "beta", "gamma", "delta"]  for n in range(len(x)):      print("{}:
    {}".format(n, x[n])) [PRE38] x = ["alpha", "beta", "gamma", "delta"]  for n,string
    in enumerate(x):      print("{}: {}".format(n, string)) [PRE39] x = ["blue", "red",
    "green", "yellow"]  y = ["cheese", "apple", "pea", "mustard"]  for n in range(len(x)):      print("{}
    {}".format(x[n], y[n])) [PRE40] x = ["blue", "red", "green", "yellow"]  y = ["cheese",
    "apple", "pea", "mustard"]  for a, b in zip(x, y):      print("{} {}".format(a,
    b)) [PRE41] results = []  for n in range(1, 11):      squared, cubed = n**2, n**3      results.append([n,
    squared, cubed]) [PRE42] numbers, squares, cubes = zip(*results) [PRE43] def fizzbuzz(n):      if
    n%15 == 0:          return "fizzbuzz"      if n%3 == 0:          return "fizz"      if
    n%5 == 0:          return "buzz"      return str(n)    numbers = map(fizzbuzz,
    range(1,101))  print("\n".join(numbers)) [PRE44] def multiple3(n):      return
    n % 3 == 0    mul3 = filter(multiple3, range(1,101))  print(list(mul3)) [PRE45]
    from functools import reduce  def maximum(a,b):      if a > b:          return
    a      else:          return b    x = [-3, 10, 2, 5, -6, 12, 0, 1]  max_x = reduce(maximum,
    x)  print(max_x) [PRE46] x = [-3, 10, 2, 5, -6, 12, 0, 1]  max_x = reduce(maximum,
    x, -float("inf"))  print(max_x) [PRE47] def setbit(bitmap, bit):      return bitmap
    | (2**bit)    assertbits = [6, 2, 0, 3]  bitmap = reduce(setbit, assertbits, ???)  print(bitmap)
    [PRE48]`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4] x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  odd = x[::2]  even = x[1::2]  print(odd)  print(even)
    [PRE5] price = {      "apple": 1.5,      "orange": 1.25,      "banana": 0.5  }  print("apple
    costs $", price["apple"]) [PRE6] price["lemon"] = 0.6  print("lemon costs $",
    price["lemon"]) [PRE7] if "strawberry" in price:      print("strawberry costs
    $", price["strawberry"])  else:      # if price is not found, assume $1      print("strawberry
    costs $1") [PRE8] print("strawberry costs $", price.get("strawberry", 1)) [PRE9]
    print("strawberry costs $", price.get("strawberry")) [PRE10] strawberry costs
    $ None [PRE11] fruits = list(price.keys())  numbers = list(price.values())  print(fruits)  print(numbers)
    [PRE12] pairs = list(price.items())  print(pairs) [PRE13] [(''apple'', 1.5), (''orange'',
    1.25), (''banana'', 0.5), (''lemon'', 0.6)] [PRE14] price1 = {      "apple": 1.5,      "orange":
    1.25,      "strawberry": 1.0  }  price2 = {      "banana": 0.5  }  pairs1 = list(price1.items())  pairs2
    = list(price2.items())  price = dict(pairs1 + pairs2)  print(price) [PRE15] {''apple'':
    1.5, ''orange'': 1.25, ''strawberry'': 1.0, ''banana'': 0.5} [PRE16] price = price1
    | price2  price = {**price1, **price2} [PRE17] x = (1, 2, 3) [PRE18] def powers(n):      return
    n, n**2, n**3  x = powers(2)  print(x) [PRE19] (2, 4, 8) [PRE20] itself, squared,
    cubed = powers(2) [PRE21] count, elements = 0, [] [PRE22] a, b = b, a [PRE23]
    x = [("alpha", 0.5), ("gamma", 0.1), ("beta", 1.1), ("alpha", -3)] [PRE24] x =
    "Hello ????"  print(x) [PRE25] if x.startswith("Hello"):      print("x starts
    with Hello")  if not x.endswith("World"):      print("x does not end with World")
    [PRE26] if "ll" in x:      print("x contains double-l") [PRE27] x = "hel" \    "lo
    world"  x = "hello" " world"  x = ("hello "      "world") [PRE28] x = "world"  y
    = "hello %s" % x  y = "hello {}".format(x)  y = f"hello {x}" [PRE29] coord = {"lat":
    51.5072, "lon": -0.1276}  print("latitude %(lat)f, longitude %(lon)f" % coord)  print("latitude
    {lat}, longitude {lon}".format(**coord)) [PRE30] numbers = ["fizzbuzz" if n%15==0
    else "fizz" if n%3==0 else "buzz" if n%5==0 else str(n)            for n in range(1,101)]  print("\n".join(numbers))
    [PRE31] mul3 = [n for n in range(1,101) if n%3 == 0] [PRE32] table = [[m*n for
    n in range(1,11)] for m in range(1,11)]  for row in table:      print(row) [PRE33]
    directions = [a+b for a in ["north", "south", ""] for b in ["east", "west", ""]
    if not (a=="" and b=="")]  print(directions) [PRE34] [''northeast'', ''northwest'',
    ''north'', ''southeast'', ''southwest'', ''south'', ''east'', ''west''] [PRE35]
    double = {n: 2*n for n in range(1,11)} [PRE36] keys = ["one", "two", "three",
    "four", "five", "six", "seven", "eight", "nine", "ten"]  mapping = {...} [PRE37]
    x = ["alpha", "beta", "gamma", "delta"]  for n in range(len(x)):      print("{}:
    {}".format(n, x[n])) [PRE38] x = ["alpha", "beta", "gamma", "delta"]  for n,string
    in enumerate(x):      print("{}: {}".format(n, string)) [PRE39] x = ["blue", "red",
    "green", "yellow"]  y = ["cheese", "apple", "pea", "mustard"]  for n in range(len(x)):      print("{}
    {}".format(x[n], y[n])) [PRE40] x = ["blue", "red", "green", "yellow"]  y = ["cheese",
    "apple", "pea", "mustard"]  for a, b in zip(x, y):      print("{} {}".format(a,
    b)) [PRE41] results = []  for n in range(1, 11):      squared, cubed = n**2, n**3      results.append([n,
    squared, cubed]) [PRE42] numbers, squares, cubes = zip(*results) [PRE43] def fizzbuzz(n):      if
    n%15 == 0:          return "fizzbuzz"      if n%3 == 0:          return "fizz"      if
    n%5 == 0:          return "buzz"      return str(n)    numbers = map(fizzbuzz,
    range(1,101))  print("\n".join(numbers)) [PRE44] def multiple3(n):      return
    n % 3 == 0    mul3 = filter(multiple3, range(1,101))  print(list(mul3)) [PRE45]
    from functools import reduce  def maximum(a,b):      if a > b:          return
    a      else:          return b    x = [-3, 10, 2, 5, -6, 12, 0, 1]  max_x = reduce(maximum,
    x)  print(max_x) [PRE46] x = [-3, 10, 2, 5, -6, 12, 0, 1]  max_x = reduce(maximum,
    x, -float("inf"))  print(max_x) [PRE47] def setbit(bitmap, bit):      return bitmap
    | (2**bit)    assertbits = [6, 2, 0, 3]  bitmap = reduce(setbit, assertbits, ???)  print(bitmap)
    [PRE48]'
