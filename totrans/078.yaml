- en: Python for Machine Learning (7-day mini-course)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/python-for-machine-learning-7-day-mini-course/](https://machinelearningmastery.com/python-for-machine-learning-7-day-mini-course/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Python for Machine Learning Crash Course.
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Learn core Python in 7 days.
  prefs: []
  type: TYPE_NORMAL
- en: Python is an amazing programming language. Not only it is widely used in machine
    learning projects, you can also find its presence in system tools, web projects,
    and many others. Having good Python skills can make you work more efficiently
    because it is famous for its simplicity. You can try out your idea faster. You
    can also present your idea in a concise code in Python.
  prefs: []
  type: TYPE_NORMAL
- en: As a practitioner, you are not required to know how the language is built, but
    you should know that the language can help you in various tasks. You can see how
    concise a Python code can be, and how much the functions from its libraries can
    do.
  prefs: []
  type: TYPE_NORMAL
- en: In this crash course, you will discover some common Python techniques, from
    doing the exercises in seven days.
  prefs: []
  type: TYPE_NORMAL
- en: This is a big and important post. You might want to bookmark it.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python for Machine Learning (7-Day Mini-Course)](../Images/e18684f37e65715779290e414b076135.png)'
  prefs: []
  type: TYPE_IMG
- en: Python for Machine Learning (7-Day Mini-Course)
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [David Clode](https://unsplash.com/photos/vec5yfUvCGs), some rights
    reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Who Is This Crash-Course For?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you get started, let’s make sure you are in the right place.
  prefs: []
  type: TYPE_NORMAL
- en: This course is for developers who may know some programming. Maybe you know
    another language, or you may be able to write a few lines of code in Python to
    do something simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'The lessons in this course do assume a few things about you, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: You know your way around basic Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You understand the basic programming concepts, such as variables, arrays, loops,
    and functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can work with Python in command line or inside an IDE.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You do NOT need to be:'
  prefs: []
  type: TYPE_NORMAL
- en: A star programmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Python expert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This crash course can help you transform from a novice programmer to an expert
    who can code comfortably in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'This crash course assumes you have a working Python 3.7 environment installed.
    If you need help with your environment, you can follow the step-by-step tutorial
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to Set Up Your Python Environment for Machine Learning With Anaconda](https://machinelearningmastery.com/setup-python-environment-machine-learning-deep-learning-anaconda/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crash-Course Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This crash course is broken down into seven lessons.
  prefs: []
  type: TYPE_NORMAL
- en: You could complete one lesson per day (recommended) or complete all of the lessons
    in one day (hardcore). It really depends on the time you have available and your
    level of enthusiasm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is a list of the seven lessons that will get you started and productive
    with Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lesson 01**: Manipulating lists'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 02**: Dictionaries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 03**: Tuples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 04**: Strings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 05**: List comprehension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 06**: Enumerate and zip'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lesson 07**: Map, filter, and reduce'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each lesson could take you between 5 and up to 30 minutes. Take your time and
    complete the lessons at your own pace. Ask questions, and even post results in
    the comments online.
  prefs: []
  type: TYPE_NORMAL
- en: The lessons might expect you to go off and find out how to do things. This guide
    will give you hints, but part of the point of each lesson is to force you to learn
    where to go to look for help with and about the algorithms and the best-of-breed
    tools in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '**Post your results in the comments**; I’ll cheer you on!'
  prefs: []
  type: TYPE_NORMAL
- en: Hang in there; don’t give up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 01: Manipulating lists'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this lesson, you will discover a basic data structures in Python, the list.
  prefs: []
  type: TYPE_NORMAL
- en: In other programming languages, there are arrays. The counterpart in Python
    is **list**. A Python list does not limit the number of elements it stores. You
    can always append elements into it, and it will automatically expand its size.
    Python list also does not require its elements to be in the same type. You can
    mix and match different elements into a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following, we create a list of some integers, and then append a string
    into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Python lists are zero-indexed. Namely, to get the first element in the above
    list, we do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will print `1` to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python lists allow negative indices to mean counting elements from the back.
    So the way to print the last element from the above list is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Python also has a handy syntax to find a slice of a list. To print the last
    two elements, we do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Usually, the slice syntax is `start:end` where the end is not included in the
    result. If omitted, the default will be the first element as the start and the
    one beyond the end of the entire list as the end. We can also use the slice syntax
    to make a `step.” For example, this is how we can extract even and odd numbers:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4] x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  odd = x[::2]  even = x[1::2]  print(odd)  print(even)
    [PRE5] price = {      "apple": 1.5,      "orange": 1.25,      "banana": 0.5  }  print("apple
    costs $", price["apple"]) [PRE6] price["lemon"] = 0.6  print("lemon costs $",
    price["lemon"]) [PRE7] if "strawberry" in price:      print("strawberry costs
    $", price["strawberry"])  else:      # if price is not found, assume $1      print("strawberry
    costs $1") [PRE8] print("strawberry costs $", price.get("strawberry", 1)) [PRE9]
    print("strawberry costs $", price.get("strawberry")) [PRE10] strawberry costs
    $ None [PRE11] fruits = list(price.keys())  numbers = list(price.values())  print(fruits)  print(numbers)
    [PRE12] pairs = list(price.items())  print(pairs) [PRE13] [(''apple'', 1.5), (''orange'',
    1.25), (''banana'', 0.5), (''lemon'', 0.6)] [PRE14] price1 = {      "apple": 1.5,      "orange":
    1.25,      "strawberry": 1.0  }  price2 = {      "banana": 0.5  }  pairs1 = list(price1.items())  pairs2
    = list(price2.items())  price = dict(pairs1 + pairs2)  print(price) [PRE15] {''apple'':
    1.5, ''orange'': 1.25, ''strawberry'': 1.0, ''banana'': 0.5} [PRE16] price = price1
    | price2  price = {**price1, **price2} [PRE17] x = (1, 2, 3) [PRE18] def powers(n):      return
    n, n**2, n**3  x = powers(2)  print(x) [PRE19] (2, 4, 8) [PRE20] itself, squared,
    cubed = powers(2) [PRE21] count, elements = 0, [] [PRE22] a, b = b, a [PRE23]
    x = [("alpha", 0.5), ("gamma", 0.1), ("beta", 1.1), ("alpha", -3)] [PRE24] x =
    "Hello ????"  print(x) [PRE25] if x.startswith("Hello"):      print("x starts
    with Hello")  if not x.endswith("World"):      print("x does not end with World")
    [PRE26] if "ll" in x:      print("x contains double-l") [PRE27] x = "hel" \    "lo
    world"  x = "hello" " world"  x = ("hello "      "world") [PRE28] x = "world"  y
    = "hello %s" % x  y = "hello {}".format(x)  y = f"hello {x}" [PRE29] coord = {"lat":
    51.5072, "lon": -0.1276}  print("latitude %(lat)f, longitude %(lon)f" % coord)  print("latitude
    {lat}, longitude {lon}".format(**coord)) [PRE30] numbers = ["fizzbuzz" if n%15==0
    else "fizz" if n%3==0 else "buzz" if n%5==0 else str(n)            for n in range(1,101)]  print("\n".join(numbers))
    [PRE31] mul3 = [n for n in range(1,101) if n%3 == 0] [PRE32] table = [[m*n for
    n in range(1,11)] for m in range(1,11)]  for row in table:      print(row) [PRE33]
    directions = [a+b for a in ["north", "south", ""] for b in ["east", "west", ""]
    if not (a=="" and b=="")]  print(directions) [PRE34] [''northeast'', ''northwest'',
    ''north'', ''southeast'', ''southwest'', ''south'', ''east'', ''west''] [PRE35]
    double = {n: 2*n for n in range(1,11)} [PRE36] keys = ["one", "two", "three",
    "four", "five", "six", "seven", "eight", "nine", "ten"]  mapping = {...} [PRE37]
    x = ["alpha", "beta", "gamma", "delta"]  for n in range(len(x)):      print("{}:
    {}".format(n, x[n])) [PRE38] x = ["alpha", "beta", "gamma", "delta"]  for n,string
    in enumerate(x):      print("{}: {}".format(n, string)) [PRE39] x = ["blue", "red",
    "green", "yellow"]  y = ["cheese", "apple", "pea", "mustard"]  for n in range(len(x)):      print("{}
    {}".format(x[n], y[n])) [PRE40] x = ["blue", "red", "green", "yellow"]  y = ["cheese",
    "apple", "pea", "mustard"]  for a, b in zip(x, y):      print("{} {}".format(a,
    b)) [PRE41] results = []  for n in range(1, 11):      squared, cubed = n**2, n**3      results.append([n,
    squared, cubed]) [PRE42] numbers, squares, cubes = zip(*results) [PRE43] def fizzbuzz(n):      if
    n%15 == 0:          return "fizzbuzz"      if n%3 == 0:          return "fizz"      if
    n%5 == 0:          return "buzz"      return str(n)    numbers = map(fizzbuzz,
    range(1,101))  print("\n".join(numbers)) [PRE44] def multiple3(n):      return
    n % 3 == 0    mul3 = filter(multiple3, range(1,101))  print(list(mul3)) [PRE45]
    from functools import reduce  def maximum(a,b):      if a > b:          return
    a      else:          return b    x = [-3, 10, 2, 5, -6, 12, 0, 1]  max_x = reduce(maximum,
    x)  print(max_x) [PRE46] x = [-3, 10, 2, 5, -6, 12, 0, 1]  max_x = reduce(maximum,
    x, -float("inf"))  print(max_x) [PRE47] def setbit(bitmap, bit):      return bitmap
    | (2**bit)    assertbits = [6, 2, 0, 3]  bitmap = reduce(setbit, assertbits, ???)  print(bitmap)
    [PRE48]`'
  prefs: []
  type: TYPE_NORMAL
