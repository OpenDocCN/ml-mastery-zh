["```py\npip install pandas_datareader requests\n```", "```py\nimport pandas_datareader as pdr\n\n# Reading Apple shares from yahoo finance server    \nshares_df = pdr.DataReader('AAPL', 'yahoo', start='2021-01-01', end='2021-12-31')\n# Look at the data read\nprint(shares_df)\n```", "```py\n                  High         Low        Open       Close       Volume   Adj Close\nDate                                                                               \n2021-01-04  133.610001  126.760002  133.520004  129.410004  143301900.0  128.453461\n2021-01-05  131.740005  128.429993  128.889999  131.009995   97664900.0  130.041611\n2021-01-06  131.050003  126.379997  127.720001  126.599998  155088000.0  125.664215\n2021-01-07  131.630005  127.860001  128.360001  130.919998  109578200.0  129.952271\n2021-01-08  132.630005  130.229996  132.429993  132.050003  105158200.0  131.073914\n...                ...         ...         ...         ...          ...         ...\n2021-12-27  180.419998  177.070007  177.089996  180.330002   74919600.0  180.100540\n2021-12-28  181.330002  178.529999  180.160004  179.289993   79144300.0  179.061859\n2021-12-29  180.630005  178.139999  179.330002  179.380005   62348900.0  179.151749\n2021-12-30  180.570007  178.089996  179.470001  178.199997   59773000.0  177.973251\n2021-12-31  179.229996  177.259995  178.089996  177.570007   64062300.0  177.344055\n\n[252 rows x 6 columns]\n```", "```py\ncompanies = ['AAPL', 'MSFT', 'GE']\nshares_multiple_df = pdr.DataReader(companies, 'yahoo', start='2021-01-01', end='2021-12-31')\nprint(shares_multiple_df.head())\n```", "```py\nAttributes   Adj Close                              Close              \\\nSymbols           AAPL        MSFT         GE        AAPL        MSFT   \nDate                                                                    \n2021-01-04  128.453461  215.434982  83.421600  129.410004  217.690002   \n2021-01-05  130.041611  215.642776  85.811905  131.009995  217.899994   \n2021-01-06  125.664223  210.051315  90.512833  126.599998  212.250000   \n2021-01-07  129.952286  216.028732  89.795753  130.919998  218.289993   \n2021-01-08  131.073944  217.344986  90.353485  132.050003  219.619995   \n\n...\n\nAttributes       Volume                          \nSymbols            AAPL        MSFT          GE  \nDate                                             \n2021-01-04  143301900.0  37130100.0   9993688.0  \n2021-01-05   97664900.0  23823000.0  10462538.0  \n2021-01-06  155088000.0  35930700.0  16448075.0  \n2021-01-07  109578200.0  27694500.0   9411225.0  \n2021-01-08  105158200.0  22956200.0   9089963.0\n```", "```py\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\n# General routine for plotting time series data\ndef plot_timeseries_df(df, attrib, ticker_loc=1, title='Timeseries', \n                       legend=''):\n    fig = plt.figure(figsize=(15,7))\n    plt.plot(df[attrib], 'o-')\n    _ = plt.xticks(rotation=90)\n    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(ticker_loc))\n    plt.title(title)\n    plt.gca().legend(legend)\n    plt.show()\n\nplot_timeseries_df(shares_multiple_df.loc[\"2021-04-01\":\"2021-06-30\"], \"Close\",\n                   ticker_loc=3, title=\"Close price\", legend=companies)\n```", "```py\nimport pandas_datareader as pdr\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ncompanies = ['AAPL', 'MSFT', 'GE']\nshares_multiple_df = pdr.DataReader(companies, 'yahoo', start='2021-01-01', end='2021-12-31')\nprint(shares_multiple_df)\n\ndef plot_timeseries_df(df, attrib, ticker_loc=1, title='Timeseries', legend=''):\n    \"General routine for plotting time series data\"\n    fig = plt.figure(figsize=(15,7))\n    plt.plot(df[attrib], 'o-')\n    _ = plt.xticks(rotation=90)\n    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(ticker_loc))\n    plt.title(title)\n    plt.gca().legend(legend)\n    plt.show()\n\nplot_timeseries_df(shares_multiple_df.loc[\"2021-04-01\":\"2021-06-30\"], \"Close\",\n                   ticker_loc=3, title=\"Close price\", legend=companies)\n```", "```py\nimport pandas_datareader as pdr\nimport matplotlib.pyplot as plt\n\n# Read data from FRED and print\nfred_df = pdr.DataReader(['CPIAUCSL','CPILFESL'], 'fred', \"2010-01-01\", \"2021-12-31\")\nprint(fred_df)\n\n# Show in plot the data of 2019-2021\nfig = plt.figure(figsize=(15,7))\nplt.plot(fred_df.loc[\"2019\":], 'o-')\nplt.xticks(rotation=90)\nplt.legend(fred_df.columns)\nplt.title(\"Consumer Price Index\")\nplt.show()\n```", "```py\nfrom pandas_datareader import wb\n\nmatches = wb.search('total.*population')\nprint(matches[[\"id\",\"name\"]])\n```", "```py\n                               id                                               name\n24     1.1_ACCESS.ELECTRICITY.TOT      Access to electricity (% of total population)\n164            2.1_ACCESS.CFT.TOT  Access to Clean Fuels and Technologies for coo...\n1999              CC.AVPB.PTPI.AI  Additional people below $1.90 as % of total po...\n2000              CC.AVPB.PTPI.AR  Additional people below $1.90 as % of total po...\n2001              CC.AVPB.PTPI.DI  Additional people below $1.90 as % of total po...\n...                           ...                                                ...\n13908           SP.POP.TOTL.FE.ZS         Population, female (% of total population)\n13912           SP.POP.TOTL.MA.ZS           Population, male (% of total population)\n13938              SP.RUR.TOTL.ZS           Rural population (% of total population)\n13958           SP.URB.TOTL.IN.ZS           Urban population (% of total population)\n13960              SP.URB.TOTL.ZS  Percentage of Population in Urban Areas (in % ...\n\n[137 rows x 2 columns]\n```", "```py\nimport pandas_datareader.wb as wb\n\ncountries = wb.get_countries()\nprint(countries)\n```", "```py\n    iso3c iso2c                 name               region          adminregion          incomeLevel     lendingType capitalCity  longitude  latitude\n0     ABW    AW                Aruba  Latin America & ...                               High income  Not classified  Oranjestad   -70.0167   12.5167\n1     AFE    ZH  Africa Eastern a...           Aggregates                                Aggregates      Aggregates                    NaN       NaN\n2     AFG    AF          Afghanistan           South Asia           South Asia           Low income             IDA       Kabul    69.1761   34.5228\n3     AFR    A9               Africa           Aggregates                                Aggregates      Aggregates                    NaN       NaN\n4     AFW    ZI  Africa Western a...           Aggregates                                Aggregates      Aggregates                    NaN       NaN\n..    ...   ...                  ...                  ...                  ...                  ...             ...         ...        ...       ...\n294   XZN    A5  Sub-Saharan Afri...           Aggregates                                Aggregates      Aggregates                    NaN       NaN\n295   YEM    YE          Yemen, Rep.  Middle East & No...  Middle East & No...           Low income             IDA      Sana'a    44.2075   15.3520\n296   ZAF    ZA         South Africa  Sub-Saharan Africa   Sub-Saharan Afri...  Upper middle income            IBRD    Pretoria    28.1871  -25.7460\n297   ZMB    ZM               Zambia  Sub-Saharan Africa   Sub-Saharan Afri...  Lower middle income             IDA      Lusaka    28.2937  -15.3982\n298   ZWE    ZW             Zimbabwe  Sub-Saharan Africa   Sub-Saharan Afri...  Lower middle income           Blend      Harare    31.0672  -17.8312\n```", "```py\nimport pandas_datareader.wb as wb\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Get a list of 2-letter country code excluding aggregates\ncountries = wb.get_countries()\ncountries = list(countries[countries.region != \"Aggregates\"][\"iso2c\"])\n\n# Read countries' total population data (SP.POP.TOTL) in year 2020\npopulation_df = wb.download(indicator=\"SP.POP.TOTL\", country=countries, start=2020, end=2020)\n\n# Sort by population, then take top 25 countries, and make the index (i.e., countries) as a column\npopulation_df = (population_df.dropna()\n                              .sort_values(\"SP.POP.TOTL\")\n                              .iloc[-25:]\n                              .reset_index())\n\n# Plot the population, in millions\nfig = plt.figure(figsize=(15,7))\nplt.bar(population_df[\"country\"], population_df[\"SP.POP.TOTL\"]/1e6)\nplt.xticks(rotation=90)\nplt.ylabel(\"Million Population\")\nplt.title(\"Population\")\nplt.show()\n```", "```py\nimport requests\n\n# Create query URL for list of countries, by default only 50 entries returned per page\nurl = \"http://api.worldbank.org/v2/country/all?format=json&per_page=500\"\nresponse = requests.get(url)\n# Expects HTTP status code 200 for correct query\nprint(response.status_code)\n# Get the response in JSON\nheader, data = response.json()\nprint(header)\n# Collect a list of 3-letter country code excluding aggregates\ncountries = [item[\"id\"]\n             for item in data\n             if item[\"region\"][\"value\"] != \"Aggregates\"]\nprint(countries)\n```", "```py\n200\n{'page': 1, 'pages': 1, 'per_page': '500', 'total': 299}\n['ABW', 'AFG', 'AGO', 'ALB', ..., 'YEM', 'ZAF', 'ZMB', 'ZWE']\n```", "```py\n...\n\n# Create query URL for total population from all countries in 2020\narguments = {\n    \"country\": \"all\",\n    \"indicator\": \"SP.POP.TOTL\",\n    \"date\": \"2020:2020\",\n    \"format\": \"json\"\n}\nurl = \"http://api.worldbank.org/v2/country/{country}/\" \\\n      \"indicator/{indicator}?date={date}&format={format}&per_page=500\"\nquery_population = url.format(**arguments)\nresponse = requests.get(query_population)\n# Get the response in JSON\nheader, population_data = response.json()\n```", "```py\n...\n\n# Filter for countries, not aggregates\npopulation = []\nfor item in population_data:\n    if item[\"countryiso3code\"] in countries:\n        name = item[\"country\"][\"value\"]\n        population.append({\"country\":name, \"population\": item[\"value\"]})\n# Create DataFrame for sorting and filtering\npopulation = pd.DataFrame.from_dict(population)\npopulation = population.dropna().sort_values(\"population\").iloc[-25:]\n# Plot bar chart\nfig = plt.figure(figsize=(15,7))\nplt.bar(population[\"country\"], population[\"population\"]/1e6)\nplt.xticks(rotation=90)\nplt.ylabel(\"Million Population\")\nplt.title(\"Population\")\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport requests\n\n# Create query URL for list of countries, by default only 50 entries returned per page\nurl = \"http://api.worldbank.org/v2/country/all?format=json&per_page=500\"\nresponse = requests.get(url)\n# Expects HTTP status code 200 for correct query\nprint(response.status_code)\n# Get the response in JSON\nheader, data = response.json()\nprint(header)\n# Collect a list of 3-letter country code excluding aggregates\ncountries = [item[\"id\"]\n             for item in data\n             if item[\"region\"][\"value\"] != \"Aggregates\"]\nprint(countries)\n\n# Create query URL for total population from all countries in 2020\narguments = {\n    \"country\": \"all\",\n    \"indicator\": \"SP.POP.TOTL\",\n    \"date\": 2020,\n    \"format\": \"json\"\n}\nurl = \"http://api.worldbank.org/v2/country/{country}/\" \\\n      \"indicator/{indicator}?date={date}&format={format}&per_page=500\"\nquery_population = url.format(**arguments)\nresponse = requests.get(query_population)\nprint(response.status_code)\n# Get the response in JSON\nheader, population_data = response.json()\nprint(header)\n\n# Filter for countries, not aggregates\npopulation = []\nfor item in population_data:\n    if item[\"countryiso3code\"] in countries:\n        name = item[\"country\"][\"value\"]\n        population.append({\"country\":name, \"population\": item[\"value\"]})\n# Create DataFrame for sorting and filtering\npopulation = pd.DataFrame.from_dict(population)\npopulation = population.dropna().sort_values(\"population\").iloc[-25:]\n# Plot bar chart\nfig = plt.figure(figsize=(15,7))\nplt.bar(population[\"country\"], population[\"population\"]/1e6)\nplt.xticks(rotation=90)\nplt.ylabel(\"Million Population\")\nplt.title(\"Population\")\nplt.show()\n```", "```py\nimport numpy as np\n\n# Predefined paramters\nar_n = 3                     # Order of the AR(n) data\nar_coeff = [0.7, -0.3, -0.1] # Coefficients b_3, b_2, b_1\nnoise_level = 0.1            # Noise added to the AR(n) data\nlength = 200                 # Number of data points to generate\n\n# Random initial values\nar_data = list(np.random.randn(ar_n))\n\n# Generate the rest of the values\nfor i in range(length - ar_n):\n    next_val = (np.array(ar_coeff) @ np.array(ar_data[-3:])) + np.random.randn() * noise_level\n    ar_data.append(next_val)\n\n# Plot the time series\nfig = plt.figure(figsize=(12,5))\nplt.plot(ar_data)\nplt.show()\n```", "```py\n...\n\n# Convert the data into a pandas DataFrame\nsynthetic = pd.DataFrame({\"AR(3)\": ar_data})\nsynthetic.index = pd.date_range(start=\"2021-07-01\", periods=len(ar_data), freq=\"D\")\n\n# Plot the time series\nfig = plt.figure(figsize=(12,5))\nplt.plot(synthetic.index, synthetic)\nplt.xticks(rotation=90)\nplt.title(\"AR(3) time series\")\nplt.show()\n```"]