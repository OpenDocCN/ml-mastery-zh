["```py\ndef indentprint(x, indent=0, prefix=\"\", suffix=\"\"):\n    if isinstance(x, dict):\n        printdict(x, indent, prefix, suffix)\n    elif isinstance(x, list):\n        printlist(x, indent, prefix, suffix)\n    elif isinstance(x, str):\n        printstring(x, indent, prefix, suffix)\n    else:\n        printnumber(x, indent, prefix, suffix)\n\ndef printdict(x, indent, prefix, suffix):\n    spaces = \" \" * indent\n    print(spaces + prefix + \"{\")\n    for n, key in enumerate(x):\n        comma = \",\" if n!=len(x)-1 else \"\"\n        indentprint(x[key], indent+2, str(key)+\": \", comma)\n    print(spaces + \"}\" + suffix)\n\ndef printlist(x, indent, prefix, suffix):\n    spaces = \" \" * indent\n    print(spaces + prefix + \"[\")\n    for n, item in enumerate(x):\n        comma = \",\" if n!=len(x)-1 else \"\"\n        indentprint(item, indent+2, \"\", comma)\n    print(spaces + \"]\" + suffix)\n\ndef printstring(x, indent, prefix, suffix):\n    spaces = \" \" * indent\n    print(spaces + prefix + '\"' + str(x) + '\"' + suffix)\n\ndef printnumber(x, indent, prefix, suffix):\n    spaces = \" \" * indent\n    print(spaces + prefix + str(x) + suffix)\n\ndata = {\n    \"a\": [{\n        \"p\": 3, \"q\": 4,\n        \"r\": [3,4,5],\n    },{\n        \"f\": \"foo\", \"g\": 2.71\n    },{\n        \"u\": None, \"v\": \"bar\"\n    }],\n    \"c\": {\n        \"s\": [\"fizz\", 2, 1.1],\n        \"t\": []\n    },\n}\n\nindentprint(data)\n```", "```py\n{\n  a: [\n    {\n      p: 3,\n      q: 4,\n      r: [\n        3,\n        4,\n        5\n      ]\n    },\n    {\n      f: \"foo\",\n      g: 2.71\n    },\n    {\n      u: None,\n      v: \"bar\"\n    }\n  ],\n  c: {\n    s: [\n      \"fizz\",\n      2,\n      1.1\n    ],\n    t: [\n    ]\n  }\n}\n```", "```py\ndef indentprint(x, indent=0, prefix=\"\", suffix=\"\"):\n    print(f'indentprint(x, {indent}, \"{prefix}\", \"{suffix}\")')\n    if isinstance(x, dict):\n        printdict(x, indent, prefix, suffix)\n    elif isinstance(x, list):\n        printlist(x, indent, prefix, suffix)\n    elif isinstance(x, str):\n        printstring(x, indent, prefix, suffix)\n    else:\n        printnumber(x, indent, prefix, suffix)\n\ndef printdict(x, indent, prefix, suffix):\n    print(f'printdict(x, {indent}, \"{prefix}\", \"{suffix}\")')\n    spaces = \" \" * indent\n    print(spaces + prefix + \"{\")\n    for n, key in enumerate(x):\n        comma = \",\" if n!=len(x)-1 else \"\"\n        indentprint(x[key], indent+2, str(key)+\": \", comma)\n    print(spaces + \"}\" + suffix)\n\ndef printlist(x, indent, prefix, suffix):\n    print(f'printlist(x, {indent}, \"{prefix}\", \"{suffix}\")')\n    spaces = \" \" * indent\n    print(spaces + prefix + \"[\")\n    for n, item in enumerate(x):\n        comma = \",\" if n!=len(x)-1 else \"\"\n        indentprint(item, indent+2, \"\", comma)\n    print(spaces + \"]\" + suffix)\n\ndef printstring(x, indent, prefix, suffix):\n    print(f'printstring(x, {indent}, \"{prefix}\", \"{suffix}\")')\n    spaces = \" \" * indent\n    print(spaces + prefix + '\"' + str(x) + '\"' + suffix)\n\ndef printnumber(x, indent, prefix, suffix):\n    print(f'printnumber(x, {indent}, \"{prefix}\", \"{suffix}\")')\n    spaces = \" \" * indent\n    print(spaces + prefix + str(x) + suffix)\n```", "```py\nindentprint(x, 0, \"\", \"\")\nprintdict(x, 0, \"\", \"\")\n{\nindentprint(x, 2, \"a: \", \",\")\nprintlist(x, 2, \"a: \", \",\")\n  a: [\nindentprint(x, 4, \"\", \",\")\nprintdict(x, 4, \"\", \",\")\n    {\nindentprint(x, 6, \"p: \", \",\")\nprintnumber(x, 6, \"p: \", \",\")\n      p: 3,\nindentprint(x, 6, \"q: \", \",\")\nprintnumber(x, 6, \"q: \", \",\")\n      q: 4,\nindentprint(x, 6, \"r: \", \"\")\nprintlist(x, 6, \"r: \", \"\")\n      r: [\nindentprint(x, 8, \"\", \",\")\nprintnumber(x, 8, \"\", \",\")\n        3,\nindentprint(x, 8, \"\", \",\")\nprintnumber(x, 8, \"\", \",\")\n        4,\nindentprint(x, 8, \"\", \"\")\nprintnumber(x, 8, \"\", \"\")\n        5\n      ]\n    },\nindentprint(x, 4, \"\", \",\")\nprintdict(x, 4, \"\", \",\")\n    {\nindentprint(x, 6, \"f: \", \",\")\nprintstring(x, 6, \"f: \", \",\")\n      f: \"foo\",\nindentprint(x, 6, \"g: \", \"\")\nprintnumber(x, 6, \"g: \", \"\")\n      g: 2.71\n    },\nindentprint(x, 4, \"\", \"\")\nprintdict(x, 4, \"\", \"\")\n    {\nindentprint(x, 6, \"u: \", \",\")\nprintnumber(x, 6, \"u: \", \",\")\n      u: None,\nindentprint(x, 6, \"v: \", \"\")\nprintstring(x, 6, \"v: \", \"\")\n      v: \"bar\"\n    }\n  ],\nindentprint(x, 2, \"c: \", \"\")\nprintdict(x, 2, \"c: \", \"\")\n  c: {\nindentprint(x, 4, \"s: \", \",\")\nprintlist(x, 4, \"s: \", \",\")\n    s: [\nindentprint(x, 6, \"\", \",\")\nprintstring(x, 6, \"\", \",\")\n      \"fizz\",\nindentprint(x, 6, \"\", \",\")\nprintnumber(x, 6, \"\", \",\")\n      2,\nindentprint(x, 6, \"\", \"\")\nprintnumber(x, 6, \"\", \"\")\n      1.1\n    ],\nindentprint(x, 4, \"t: \", \"\")\nprintlist(x, 4, \"t: \", \"\")\n    t: [\n    ]\n  }\n}\n```", "```py\ndef printdict(x, indent, prefix, suffix):\n    spaces = \" \" * indent\n    print(spaces + prefix + \"{\")\n    for n, key in enumerate(x):\n        comma = \",\" if n!=len(x)-1 else \"\"\n        indentprint(x[key], indent+2, str(key)+\": \", comma)\n    print(spaces + \"}\") + suffix\n```", "```py\n{\n  a: [\n    {\n      p: 3,\n      q: 4,\n      r: [\n        3,\n        4,\n        5\n      ]\n    }\nTraceback (most recent call last):\n  File \"tb.py\", line 52, in \n    indentprint(data)\n  File \"tb.py\", line 3, in indentprint\n    printdict(x, indent, prefix, suffix)\n  File \"tb.py\", line 16, in printdict\n    indentprint(x[key], indent+2, str(key)+\": \", comma)\n  File \"tb.py\", line 5, in indentprint\n    printlist(x, indent, prefix, suffix)\n  File \"tb.py\", line 24, in printlist\n    indentprint(item, indent+2, \"\", comma)\n  File \"tb.py\", line 3, in indentprint\n    printdict(x, indent, prefix, suffix)\n  File \"tb.py\", line 17, in printdict\n    print(spaces + \"}\") + suffix\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n```", "```py\n{\n  a: [\n    {\n      p: 3,\n      q: 4,\n      r: [\n        3,\n        4,\n        5\n      ]\n    }\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/var/folders/6z/w0ltb1ss08l593y5xt9jyl1w0000gn/T/ipykernel_37031/2508041071.py in \n----> 1 indentprint(x)\n\n/var/folders/6z/w0ltb1ss08l593y5xt9jyl1w0000gn/T/ipykernel_37031/2327707064.py in indentprint(x, indent, prefix, suffix)\n      1 def indentprint(x, indent=0, prefix=\"\", suffix=\"\"):\n      2     if isinstance(x, dict):\n----> 3         printdict(x, indent, prefix, suffix)\n      4     elif isinstance(x, list):\n      5         printlist(x, indent, prefix, suffix)\n\n/var/folders/6z/w0ltb1ss08l593y5xt9jyl1w0000gn/T/ipykernel_37031/2327707064.py in printdict(x, indent, prefix, suffix)\n     14     for n, key in enumerate(x):\n     15         comma = \",\" if n!=len(x)-1 else \"\"\n---> 16         indentprint(x[key], indent+2, str(key)+\": \", comma)\n     17     print(spaces + \"}\") + suffix\n     18 \n\n/var/folders/6z/w0ltb1ss08l593y5xt9jyl1w0000gn/T/ipykernel_37031/2327707064.py in indentprint(x, indent, prefix, suffix)\n      3         printdict(x, indent, prefix, suffix)\n      4     elif isinstance(x, list):\n----> 5         printlist(x, indent, prefix, suffix)\n      6     elif isinstance(x, str):\n      7         printstring(x, indent, prefix, suffix)\n\n/var/folders/6z/w0ltb1ss08l593y5xt9jyl1w0000gn/T/ipykernel_37031/2327707064.py in printlist(x, indent, prefix, suffix)\n     22     for n, item in enumerate(x):\n     23         comma = \",\" if n!=len(x)-1 else \"\"\n---> 24         indentprint(item, indent+2, \"\", comma)\n     25     print(spaces + \"]\" + suffix)\n     26 \n\n/var/folders/6z/w0ltb1ss08l593y5xt9jyl1w0000gn/T/ipykernel_37031/2327707064.py in indentprint(x, indent, prefix, suffix)\n      1 def indentprint(x, indent=0, prefix=\"\", suffix=\"\"):\n      2     if isinstance(x, dict):\n----> 3         printdict(x, indent, prefix, suffix)\n      4     elif isinstance(x, list):\n      5         printlist(x, indent, prefix, suffix)\n\n/var/folders/6z/w0ltb1ss08l593y5xt9jyl1w0000gn/T/ipykernel_37031/2327707064.py in printdict(x, indent, prefix, suffix)\n     15         comma = \",\" if n!=len(x)-1 else \"\"\n     16         indentprint(x[key], indent+2, str(key)+\": \", comma)\n---> 17     print(spaces + \"}\") + suffix\n     18 \n     19 def printlist(x, indent, prefix, suffix):\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n```", "```py\nimport traceback\n\ndef printdict(x, indent, prefix, suffix):\n    spaces = \" \" * indent\n    print(spaces + prefix + \"{\")\n    for n, key in enumerate(x):\n        comma = \",\" if n!=len(x)-1 else \"\"\n        indentprint(x[key], indent+2, str(key)+\": \", comma)\n    traceback.print_stack()    # print the current call stack\n    print(spaces + \"}\" + suffix)\n```", "```py\nimport traceback\nimport random\n\ndef compute():\n    n = random.randint(0, 10)\n    m = random.randint(0, 10)\n    return n/m\n\ndef compute_many(n_times):\n    try:\n        for _ in range(n_times):\n            x = compute()\n        print(f\"Completed {n_times} times\")\n    except:\n        print(\"Something wrong\")\n        traceback.print_exc()\n\ncompute_many(100)\n```", "```py\ndef print_tb_with_local():\n    \"\"\"Print stack trace with local variables. This does not need to be in\n    exception. Print is using the system's print() function to stderr.\n    \"\"\"\n    import traceback, sys\n    tb = sys.exc_info()[2]\n    stack = []\n    while tb:\n        stack.append(tb.tb_frame)\n        tb = tb.tb_next()\n    traceback.print_exc()\n    print(\"Locals by frame, most recent call first\", file=sys.stderr)\n    for frame in stack:\n        print(\"Frame {0} in {1} at line {2}\".format(\n            frame.f_code.co_name,\n            frame.f_code.co_filename,\n            frame.f_lineno), file=sys.stderr)\n        for key, value in frame.f_locals.items():\n            print(\"\\t%20s = \" % key, file=sys.stderr)\n            try:\n                if '__repr__' in dir(value):\n                    print(value.__repr__(), file=sys.stderr)\n                elif '__str__' in dir(value):\n                    print(value.__str__(), file=sys.stderr)\n                else:\n                    print(value, file=sys.stderr)\n            except:\n                print(\"\", file=sys.stderr)\n```", "```py\nimport numpy as np\n\nsequence = np.arange(0.1, 1.0, 0.1)  # 0.1 to 0.9\nn_in = len(sequence)\nsequence = sequence.reshape((1, n_in, 1))\n\n# define model\nimport tensorflow as tf\nfrom tensorflow.keras.layers import LSTM, RepeatVector, Dense, TimeDistributed, Input\nfrom tensorflow.keras import Sequential, Model\n\nmodel = Sequential([\n    LSTM(100, activation=\"relu\", input_shape=(n_in+1, 1)),\n    RepeatVector(n_in),\n    LSTM(100, activation=\"relu\", return_sequences=True),\n    TimeDistributed(Dense(1))\n])\nmodel.compile(optimizer=\"adam\", loss=\"mse\")\n\nmodel.fit(sequence, sequence, epochs=300, verbose=0)\n```", "```py\nTraceback (most recent call last):\n  File \"trback3.py\", line 20, in \n    model.fit(sequence, sequence, epochs=300, verbose=0)\n  File \"/usr/local/lib/python3.9/site-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/usr/local/lib/python3.9/site-packages/tensorflow/python/framework/func_graph.py\", line 1129, in autograph_handler\n    raise e.ag_error_metadata.to_exception(e)\nValueError: in user code:\n\n    File \"/usr/local/lib/python3.9/site-packages/keras/engine/training.py\", line 878, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.9/site-packages/keras/engine/training.py\", line 867, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.9/site-packages/keras/engine/training.py\", line 860, in run_step  **\n        outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.9/site-packages/keras/engine/training.py\", line 808, in train_step\n        y_pred = self(x, training=True)\n    File \"/usr/local/lib/python3.9/site-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.9/site-packages/keras/engine/input_spec.py\", line 263, in assert_input_compatibility\n        raise ValueError(f'Input {input_index} of layer \"{layer_name}\" is '\n\n    ValueError: Input 0 of layer \"sequential\" is incompatible with the layer: expected shape=(None, 10, 1), found shape=(None, 9, 1)\n```"]