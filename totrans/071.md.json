["```py\nfrom cv2 import imshow, waitKey\nfrom digits_dataset import split_images, split_data\nfrom feature_extraction import hog_descriptors\n\n# Load the full training image\nimg, sub_imgs = split_images('Images/digits.png', 20)\n\n# Check that the correct image has been loaded\nimshow('Training image', img)\nwaitKey(0)\n\n# Check that the sub-images have been correctly split\nimshow('Sub-image', sub_imgs[0, 0, :, :].reshape(20, 20))\nwaitKey(0)\n\n# Split the dataset into training and testing\ntrain_imgs, train_labels, test_imgs, test_labels = split_data(20, sub_imgs, 0.5)\n\n# Convert the training and testing images into feature vectors using the HOG technique\ntrain_hog = hog_descriptors(train_imgs)\ntest_hog = hog_descriptors(test_imgs)\n```", "```py\nfrom cv2 import ml\n\nknn = ml.KNearest_create()\n```", "```py\nknn.train(float32(train_imgs), ml.ROW_SAMPLE, train_labels)\n```", "```py\nknn.train(train_hog, ml.ROW_SAMPLE, train_labels)\n```", "```py\nfrom numpy import sum\n\nk = 3\nret, result, neighbours, dist = knn.findNearest(test_hog, k)\n\naccuracy = (sum(result == test_labels) / test_labels.size) * 100\n```", "```py\nfrom cv2 import imshow, waitKey, ml\nfrom numpy import sum\nfrom matplotlib.pyplot import plot, show, title, xlabel, ylabel, legend\nfrom digits_dataset import split_images, split_data\nfrom feature_extraction import hog_descriptors\n\n# Load the full training image\nimg, sub_imgs = split_images('Images/digits.png', 20)\n\n# Check that the correct image has been loaded\nimshow('Training image', img)\nwaitKey(0)\n\n# Check that the sub-images have been correctly split\nimshow('Sub-image', sub_imgs[0, 0, :, :].reshape(20, 20))\nwaitKey(0)\n\n# Define different training-testing splits\nratio = [0.5, 0.7, 0.9]\n\nfor i in ratio:\n\n    # Split the dataset into training and testing\n    train_imgs, train_labels, test_imgs, test_labels = split_data(20, sub_imgs, i)\n\n    # Convert the training and testing images into feature vectors using the HOG technique\n    train_hog = hog_descriptors(train_imgs)\n    test_hog = hog_descriptors(test_imgs)\n\n    # Initiate a kNN classifier and train it on the training data\n    knn = ml.KNearest_create()\n    knn.train(train_hog, ml.ROW_SAMPLE, train_labels)\n\n    # Initiate a dictionary to hold the ratio and accuracy values\n    accuracy_dict = {}\n\n    # Populate the dictionary with the keys corresponding to the values of 'k'\n    keys = range(3, 16)\n\n    for k in keys:\n\n        # Test the kNN classifier on the testing data\n        ret, result, neighbours, dist = knn.findNearest(test_hog, k)\n\n        # Compute the accuracy and print it\n        accuracy = (sum(result == test_labels) / test_labels.size) * 100\n        print(\"Accuracy: {0:.2f}%, Training: {1:.0f}%, k: {2}\".format(accuracy, i*100, k))\n\n        # Populate the dictionary with the values corresponding to the accuracy\n        accuracy_dict[k] = accuracy\n\n    # Plot the accuracy values against the value of 'k'\n    plot(accuracy_dict.keys(), accuracy_dict.values(), marker='o', label=str(i * 100) + '%')\n    title('Accuracy of the k-nearest neighbors model')\n    xlabel('k')\n    ylabel('Accuracy')\n    legend(loc='upper right')\n\nshow()\n```"]