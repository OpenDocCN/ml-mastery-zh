["```py\nimport torch\na = torch.tensor([[1,2,3], [4,5,6]], dtype=torch.int32)\nprint(a)\n```", "```py\ntensor([[1, 2, 3],\n        [4, 5, 6]], dtype=torch.int32)\n```", "```py\na = torch.linspace(-1, 1, 10)\nprint(a)\n```", "```py\ntensor([-1.0000, -0.7778, -0.5556, -0.3333, -0.1111,  0.1111,  0.3333,  0.5556,\n         0.7778,  1.0000])\n```", "```py\na = torch.rand(3,4)\nprint(a)\n```", "```py\ntensor([[0.4252, 0.1029, 0.9858, 0.7502],\n        [0.1993, 0.6412, 0.2424, 0.6451],\n        [0.7878, 0.7615, 0.9170, 0.8534]])\n```", "```py\na = torch.randn(3,4)\n```", "```py\na = torch.randint(3, 10, size=(3,4))\nprint(a)\n```", "```py\ntensor([[4, 5, 7, 9],\n        [3, 8, 8, 9],\n        [4, 7, 7, 6]])\n```", "```py\na = torch.randint(10, size=(3,4))\n```", "```py\na = torch.zeros(2, 3, 4)\nprint(a)\n```", "```py\ntensor([[[0., 0., 0., 0.],\n         [0., 0., 0., 0.],\n         [0., 0., 0., 0.]],\n\n        [[0., 0., 0., 0.],\n         [0., 0., 0., 0.],\n         [0., 0., 0., 0.]]])\n```", "```py\na = torch.full((2,3,4), 5)\nprint(a)\n```", "```py\ntensor([[[5, 5, 5, 5],\n         [5, 5, 5, 5],\n         [5, 5, 5, 5]],\n\n        [[5, 5, 5, 5],\n         [5, 5, 5, 5],\n         [5, 5, 5, 5]]])\n```", "```py\na = torch.ones(2,3,4)\n```", "```py\na = torch.eye(4)\nprint(a)\n```", "```py\ntensor([[1., 0., 0., 0.],\n        [0., 1., 0., 0.],\n        [0., 0., 1., 0.],\n        [0., 0., 0., 1.]])\n```", "```py\na = torch.zeros(2, 3, 4)\nprint(a.shape)\nprint(a.size())\n```", "```py\ntorch.Size([2, 3, 4])\ntorch.Size([2, 3, 4])\n```", "```py\nprint(a.ndim)\n```", "```py\na = torch.zeros(2, 3, 4)\nprint(len(a))\n```", "```py\n2\n```", "```py\nprint(a.dtype)\n```", "```py\ntorch.float32\n```", "```py\nb = a.type(torch.int32)\nprint(a.dtype)\nprint(b.dtype)\n```", "```py\ntorch.float32\ntorch.int32\n```", "```py\na = torch.randn(3,4,5)\nprint(a)\n```", "```py\ntensor([[[-1.1271e-01, -7.1124e-01,  1.1335e+00, -8.5644e-01, -1.4191e+00],\n         [-1.9065e+00, -6.8386e-02,  5.8727e-01,  6.5890e-03, -2.6947e-01],\n         [ 6.3194e-01, -7.7426e-01,  1.6546e+00,  1.2647e-01, -1.0944e+00],\n         [ 3.7819e-01, -8.8670e-01,  5.3772e-01,  1.4985e+00,  5.8396e-01]],\n\n        [[ 1.8704e+00,  2.0914e+00, -9.1604e-01,  1.2317e+00, -1.5722e-01],\n         [ 2.4689e-01, -2.3157e-01, -3.3033e-01,  1.4021e+00, -6.9540e-01],\n         [ 3.0298e-01, -1.4936e-01, -6.8863e-01,  1.6977e-01,  2.4682e+00],\n         [-8.1375e-01,  4.8489e-01, -1.2024e+00, -4.9771e-01,  1.1728e-01]],\n\n        [[-1.6011e+00,  1.5686e-03, -1.0560e-01, -1.2938e+00,  5.3077e-01],\n         [-9.7636e-01, -9.1854e-01, -1.0002e+00,  1.1852e+00,  1.0328e+00],\n         [ 9.6664e-01,  5.3752e-01, -3.1340e-02, -6.7852e-02, -7.2317e-01],\n         [-5.5263e-01,  9.4754e-01, -5.4503e-01,  6.3850e-02,  1.2879e+00]]])\n```", "```py\nprint(a[1])\n```", "```py\ntensor([[ 1.8704,  2.0914, -0.9160,  1.2317, -0.1572],\n        [ 0.2469, -0.2316, -0.3303,  1.4021, -0.6954],\n        [ 0.3030, -0.1494, -0.6886,  0.1698,  2.4682],\n        [-0.8137,  0.4849, -1.2024, -0.4977,  0.1173]])\n```", "```py\nprint(a[1:, 2:4])\n```", "```py\ntensor([[[ 0.3030, -0.1494, -0.6886,  0.1698,  2.4682],\n         [-0.8137,  0.4849, -1.2024, -0.4977,  0.1173]],\n\n        [[ 0.9666,  0.5375, -0.0313, -0.0679, -0.7232],\n         [-0.5526,  0.9475, -0.5450,  0.0638,  1.2879]]])\n```", "```py\nprint(a[:, None, :, None].shape)\n```", "```py\ntorch.Size([3, 1, 4, 1, 5])\n```", "```py\nb = torch.unsqueeze(a, dim=2)\nprint(a.shape)\nprint(b.shape)\n```", "```py\ntorch.Size([3, 4, 5])\ntorch.Size([3, 4, 1, 5])\n```", "```py\na = torch.randn(3,4)\nprint(a)\nprint(a[:, (a > -1).all(axis=0)])\n```", "```py\ntensor([[ 1.2548,  0.4078,  0.5548, -0.7016],\n        [-0.3720, -0.5682, -0.3430,  0.0886],\n        [ 0.2151,  0.3626, -2.0275,  1.8121]])\ntensor([[ 1.2548,  0.4078, -0.7016],\n        [-0.3720, -0.5682,  0.0886],\n        [ 0.2151,  0.3626,  1.8121]])\n```", "```py\nprint(a[:, [1,0,0,1]])\n```", "```py\ntensor([[ 0.4078,  1.2548,  1.2548,  0.4078],\n        [-0.5682, -0.3720, -0.3720, -0.5682],\n        [ 0.3626,  0.2151,  0.2151,  0.3626]])\n```", "```py\na = torch.randn(3,4)\nprint(a)\nprint(a.ravel())\n```", "```py\ntensor([[-0.2718, -0.8309,  0.6263, -0.2499],\n        [-0.1780,  1.1735, -1.3530, -1.2374],\n        [-0.6050, -1.5524, -0.1008, -1.2782]])\ntensor([-0.2718, -0.8309,  0.6263, -0.2499, -0.1780,  1.1735, -1.3530, -1.2374,\n        -0.6050, -1.5524, -0.1008, -1.2782])\n```", "```py\nprint(a.reshape(-1))\n```", "```py\nprint(a.reshape(3,2,2))\n```", "```py\ntensor([[[-0.2718, -0.8309],\n         [ 0.6263, -0.2499]],\n\n        [[-0.1780,  1.1735],\n         [-1.3530, -1.2374]],\n\n        [[-0.6050, -1.5524],\n         [-0.1008, -1.2782]]])\n```", "```py\nprint(a.T)\n```", "```py\ntensor([[-0.2718, -0.1780, -0.6050],\n        [-0.8309,  1.1735, -1.5524],\n        [ 0.6263, -1.3530, -0.1008],\n        [-0.2499, -1.2374, -1.2782]])\n```", "```py\nprint(a.transpose(0, 1))\n```", "```py\na = torch.randn(3,3)\nb = torch.randn(3,3)\nprint(a)\nprint(b)\nprint(torch.vstack([a,b]))\n```", "```py\ntensor([[ 1.1739,  1.3546, -0.2886],\n        [ 1.0444,  0.4437, -2.7933],\n        [ 0.6805,  0.8401, -1.2527]])\ntensor([[ 1.6273,  1.2622, -0.4362],\n        [-1.6529,  0.6457, -0.1454],\n        [-2.0960, -1.3024, -0.1033]])\ntensor([[ 1.1739,  1.3546, -0.2886],\n        [ 1.0444,  0.4437, -2.7933],\n        [ 0.6805,  0.8401, -1.2527],\n        [ 1.6273,  1.2622, -0.4362],\n        [-1.6529,  0.6457, -0.1454],\n        [-2.0960, -1.3024, -0.1033]])\n```", "```py\nc = torch.concatenate([a, b])\nprint(c)\n```", "```py\ntensor([[ 1.1739,  1.3546, -0.2886],\n        [ 1.0444,  0.4437, -2.7933],\n        [ 0.6805,  0.8401, -1.2527],\n        [ 1.6273,  1.2622, -0.4362],\n        [-1.6529,  0.6457, -0.1454],\n        [-2.0960, -1.3024, -0.1033]])\n```", "```py\nprint(torch.vsplit(c, 2))\n```", "```py\n(tensor([[ 1.1739,  1.3546, -0.2886],\n        [ 1.0444,  0.4437, -2.7933],\n        [ 0.6805,  0.8401, -1.2527]]), tensor([[ 1.6273,  1.2622, -0.4362],\n        [-1.6529,  0.6457, -0.1454],\n        [-2.0960, -1.3024, -0.1033]]))\n```", "```py\nprint(torch.split(c, 3, dim=0))\n```", "```py\na = torch.randn(2,3)\nprint(a)\nprint(torch.exp(a))\nprint(torch.log(a))\nprint(torch.sin(a))\nprint(torch.arctan(a))\nprint(torch.abs(a))\nprint(torch.square(a))\nprint(torch.sqrt(a))\nprint(torch.ceil(a))\nprint(torch.round(a))\nprint(torch.clip(a, 0.1, 0.9))\n```", "```py\ntensor([[ 1.0567, -1.2609, -1.0856],\n        [-0.9633,  1.3163, -0.4325]])\ntensor([[2.8770, 0.2834, 0.3377],\n        [0.3816, 3.7298, 0.6489]])\ntensor([[0.0552,    nan,    nan],\n        [   nan, 0.2749,    nan]])\ntensor([[ 0.8708, -0.9524, -0.8846],\n        [-0.8211,  0.9678, -0.4191]])\ntensor([[ 0.8130, -0.9003, -0.8264],\n        [-0.7667,  0.9211, -0.4082]])\ntensor([[1.0567, 1.2609, 1.0856],\n        [0.9633, 1.3163, 0.4325]])\ntensor([[1.1167, 1.5898, 1.1785],\n        [0.9280, 1.7328, 0.1871]])\ntensor([[1.0280,    nan,    nan],\n        [   nan, 1.1473,    nan]])\ntensor([[ 2., -1., -1.],\n        [-0.,  2., -0.]])\ntensor([[ 1., -1., -1.],\n        [-1.,  1., -0.]])\ntensor([[0.9000, 0.1000, 0.1000],\n        [0.1000, 0.9000, 0.1000]])\n```", "```py\nb = torch.sqrt(a)\nprint(b)\nprint(torch.isnan(b))\n```", "```py\ntensor([[1.0280,    nan,    nan],\n        [   nan, 1.1473,    nan]])\ntensor([[False,  True,  True],\n        [ True, False,  True]])\n```", "```py\na = torch.randn(2, 3)\nb = torch.randn(2, 3)\nprint(a)\nprint(b)\nprint(a+b)\nprint(a/b)\nprint(a ** 2)\n```", "```py\ntensor([[ 0.7378, -0.3469,  1.3089],\n        [-1.9152,  0.3745, -0.7248]])\ntensor([[-0.3650, -0.4768,  0.9331],\n        [ 0.5095,  1.7169, -0.5463]])\ntensor([[ 0.3729, -0.8237,  2.2421],\n        [-1.4058,  2.0914, -1.2711]])\ntensor([[-2.0216,  0.7275,  1.4027],\n        [-3.7594,  0.2181,  1.3269]])\ntensor([[0.5444, 0.1203, 1.7133],\n        [3.6682, 0.1403, 0.5254]])\n```", "```py\nprint(torch.matmul(a, b.T))\nprint(a @ b.T)\n```", "```py\ntensor([[ 1.1176, -0.9347],\n        [-0.1560,  0.0632]])\ntensor([[ 1.1176, -0.9347],\n        [-0.1560,  0.0632]])\n```", "```py\na = torch.randn(3)\nb = torch.randn(3)\nprint(a)\nprint(b)\nprint(torch.dot(a, b))\nprint(a @ b)\n```", "```py\ntensor([-0.8986, -0.6994,  1.1443])\ntensor([-1.0666,  0.1455,  0.1322])\ntensor(1.0081)\ntensor(1.0081)\n```", "```py\na = torch.randn(3,4)\nprint(a)\nprint(torch.mean(a, dim=0))\nprint(torch.std(a, dim=0))\nprint(torch.cumsum(a, dim=0))\nprint(torch.cumprod(a, dim=0))\n```", "```py\ntensor([[ 0.3331, -0.0190,  0.4814, -1.1484],\n        [-0.5712,  0.8430, -1.6147, -1.1664],\n        [ 1.7298, -1.7665, -0.5918,  0.3024]])\ntensor([ 0.4972, -0.3142, -0.5750, -0.6708])\ntensor([1.1593, 1.3295, 1.0482, 0.8429])\ntensor([[ 0.3331, -0.0190,  0.4814, -1.1484],\n        [-0.2381,  0.8240, -1.1333, -2.3148],\n        [ 1.4917, -0.9425, -1.7251, -2.0124]])\ntensor([[ 0.3331, -0.0190,  0.4814, -1.1484],\n        [-0.1903, -0.0160, -0.7774,  1.3395],\n        [-0.3291,  0.0283,  0.4601,  0.4051]])\n```", "```py\nprint(torch.linalg.svd(a))\n```", "```py\ntorch.return_types.linalg_svd(\nU=tensor([[-0.0353,  0.1313,  0.9907],\n        [-0.5576,  0.8201, -0.1286],\n        [ 0.8294,  0.5569, -0.0443]]),\nS=tensor([2.7956, 1.9465, 1.2715]),\nVh=tensor([[ 0.6229, -0.6919,  0.1404,  0.3369],\n        [ 0.2767, -0.1515, -0.8172, -0.4824],\n        [ 0.2570, -0.0385,  0.5590, -0.7874],\n        [ 0.6851,  0.7048, -0.0073,  0.1840]]))\n```", "```py\nb = torch.nn.functional.pad(a, (1,1,0,2), value=0)\nprint(b)\n```", "```py\ntensor([[ 0.0000,  0.3331, -0.0190,  0.4814, -1.1484,  0.0000],\n        [ 0.0000, -0.5712,  0.8430, -1.6147, -1.1664,  0.0000],\n        [ 0.0000,  1.7298, -1.7665, -0.5918,  0.3024,  0.0000],\n        [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\n        [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000]])\n```", "```py\nimport matplotlib.pyplot as plt\nimport torch\n\n# create tensors\nx = torch.linspace(-1, 1, 100)\ny = torch.linspace(-2, 2, 100)\n# create the surface\nxx, yy = torch.meshgrid(x, y, indexing=\"xy\")  # xy-indexing is matching numpy\nz = torch.sqrt(1 - xx**2 - (yy/2)**2)\nprint(xx)\n\nfig = plt.figure(figsize=(8,8))\nax = plt.axes(projection=\"3d\")\nax.set_xlim([-2, 2])\nax.set_ylim([-2, 2])\nax.set_zlim([0, 2])\nax.plot_surface(xx, yy, z, cmap=\"cividis\")\nax.view_init(45, 35)\nplt.show()\n```", "```py\ntensor([[-1.0000, -0.9798, -0.9596,  ...,  0.9596,  0.9798,  1.0000],\n        [-1.0000, -0.9798, -0.9596,  ...,  0.9596,  0.9798,  1.0000],\n        [-1.0000, -0.9798, -0.9596,  ...,  0.9596,  0.9798,  1.0000],\n        ...,\n        [-1.0000, -0.9798, -0.9596,  ...,  0.9596,  0.9798,  1.0000],\n        [-1.0000, -0.9798, -0.9596,  ...,  0.9596,  0.9798,  1.0000],\n        [-1.0000, -0.9798, -0.9596,  ...,  0.9596,  0.9798,  1.0000]])\n```"]