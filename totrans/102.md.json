["```py\nimport sys\n\nn = int(sys.argv[1])\nprint(n+1)\n```", "```py\n$ python commandline.py 15\n16\n```", "```py\nrsync -a -v --exclude=\"*.pyc\" -B 1024 --ignore-existing 192.168.0.3:/tmp/ ./\n```", "```py\nimport argparse\n\nparser = argparse.ArgumentParser(description=\"Just an example\",\n                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)\nparser.add_argument(\"-a\", \"--archive\", action=\"store_true\", help=\"archive mode\")\nparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"increase verbosity\")\nparser.add_argument(\"-B\", \"--block-size\", help=\"checksum blocksize\")\nparser.add_argument(\"--ignore-existing\", action=\"store_true\", help=\"skip files that exist\")\nparser.add_argument(\"--exclude\", help=\"files to exclude\")\nparser.add_argument(\"src\", help=\"Source location\")\nparser.add_argument(\"dest\", help=\"Destination location\")\nargs = parser.parse_args()\nconfig = vars(args)\nprint(config)\n```", "```py\n$ python argparse_example.py\nusage: argparse_example.py [-h] [-a] [-v] [-B BLOCK_SIZE] [--ignore-existing] [--exclude EXCLUDE] src dest\nargparse_example.py: error: the following arguments are required: src, dest\n```", "```py\n$ python argparse_example.py --help\nusage: argparse_example.py [-h] [-a] [-v] [-B BLOCK_SIZE] [--ignore-existing] [--exclude EXCLUDE] src dest\n\nJust an example\n\npositional arguments:\n  src                   Source location\n  dest                  Destination location\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --archive         archive mode (default: False)\n  -v, --verbose         increase verbosity (default: False)\n  -B BLOCK_SIZE, --block-size BLOCK_SIZE\n                        checksum blocksize (default: None)\n  --ignore-existing     skip files that exist (default: False)\n  --exclude EXCLUDE     files to exclude (default: None)\n```", "```py\n$ python argparse_example.py -a --ignore-existing 192.168.0.1:/tmp/ /home\n{'archive': True, 'verbose': False, 'block_size': None, 'ignore_existing': True, 'exclude': None, 'src': '192.168.0.1:/tmp/', 'dest': '/home'}\n```", "```py\nparser.add_argument(\"-B\", \"--block-size\", type=int, help=\"checksum blocksize\")\n```", "```py\npython argparse_example.py -a -B hello --ignore-existing 192.168.0.1:/tmp/ /home\nusage: argparse_example.py [-h] [-a] [-v] [-B BLOCK_SIZE] [--ignore-existing] [--exclude EXCLUDE] src dest\nargparse_example.py: error: argument -B/--block-size: invalid int value: 'hello'\n```", "```py\npip install pandas_datareader\n```", "```py\nfrom pandas_datareader.wb import WorldBankReader\n\ngdp = WorldBankReader(\"NY.GDP.MKTP.CN\", \"SE\", start=1960, end=2020).read()\n```", "```py\nimport pandas as pd\n\n# Drop country name from index\ngdp = gdp.droplevel(level=0, axis=0)\n# Sort data in choronological order and set data point at year-end\ngdp.index = pd.to_datetime(gdp.index)\ngdp = gdp.sort_index().resample(\"y\").last()\n# Convert pandas DataFrame into pandas Series\ngdp = gdp[\"NY.GDP.MKTP.CN\"]\n```", "```py\nimport statsmodels.api as sm\n\nmodel = sm.tsa.ARIMA(endog=gdp[:40], order=(1,1,1)).fit()\nforecast = model.forecast(steps=3)\ncompare = pd.DataFrame({\"actual\":gdp, \"forecast\":forecast}).dropna()\ncompare[\"rel error\"] = (compare[\"forecast\"] - compare[\"actual\"])/compare[\"actual\"]\nprint(compare)\n```", "```py\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nfrom pandas_datareader.wb import WorldBankReader\nimport statsmodels.api as sm\nimport pandas as pd\n\nseries = \"NY.GDP.MKTP.CN\"\ncountry = \"SE\" # Sweden\nlength = 40\nstart = 0\nsteps = 3\norder = (1,1,1)\n\n# Read the GDP data from WorldBank database\ngdp = WorldBankReader(series, country, start=1960, end=2020).read()\n# Drop country name from index\ngdp = gdp.droplevel(level=0, axis=0)\n# Sort data in choronological order and set data point at year-end\ngdp.index = pd.to_datetime(gdp.index)\ngdp = gdp.sort_index().resample(\"y\").last()\n# Convert pandas dataframe into pandas series\ngdp = gdp[series]\n# Fit arima model\nresult = sm.tsa.ARIMA(endog=gdp[start:start+length], order=order).fit()\n# Forecast, and calculate the relative error\nforecast = result.forecast(steps=steps)\ndf = pd.DataFrame({\"Actual\":gdp, \"Forecast\":forecast}).dropna()\ndf[\"Rel Error\"] = (df[\"Forecast\"] - df[\"Actual\"]) / df[\"Actual\"]\n# Print result\nwith pd.option_context('display.max_rows', None, 'display.max_columns', 3):\n    print(df)\n```", "```py\n                   Actual      Forecast  Rel Error\n2000-12-31  2408151000000  2.367152e+12  -0.017025\n2001-12-31  2503731000000  2.449716e+12  -0.021574\n2002-12-31  2598336000000  2.516118e+12  -0.031643\n```", "```py\nfrom argparse import ArgumentParser, ArgumentDefaultsHelpFormatter\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nfrom pandas_datareader.wb import WorldBankReader\nimport statsmodels.api as sm\nimport pandas as pd\n\n# Parse command line arguments\nparser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)\nparser.add_argument(\"-c\", \"--country\", default=\"SE\", help=\"Two-letter country code\")\nparser.add_argument(\"-l\", \"--length\", default=40, type=int, help=\"Length of time series to fit the ARIMA model\")\nparser.add_argument(\"-s\", \"--start\", default=0, type=int, help=\"Starting offset to fit the ARIMA model\")\nargs = vars(parser.parse_args())\n\n# Set up parameters\nseries = \"NY.GDP.MKTP.CN\"\ncountry = args[\"country\"]\nlength = args[\"length\"]\nstart = args[\"start\"]\nsteps = 3\norder = (1,1,1)\n\n# Read the GDP data from WorldBank database\ngdp = WorldBankReader(series, country, start=1960, end=2020).read()\n# Drop country name from index\ngdp = gdp.droplevel(level=0, axis=0)\n# Sort data in choronological order and set data point at year-end\ngdp.index = pd.to_datetime(gdp.index)\ngdp = gdp.sort_index().resample(\"y\").last()\n# Convert pandas dataframe into pandas series\ngdp = gdp[series]\n# Fit arima model\nresult = sm.tsa.ARIMA(endog=gdp[start:start+length], order=order).fit()\n# Forecast, and calculate the relative error\nforecast = result.forecast(steps=steps)\ndf = pd.DataFrame({\"Actual\":gdp, \"Forecast\":forecast}).dropna()\ndf[\"Rel Error\"] = (df[\"Forecast\"] - df[\"Actual\"]) / df[\"Actual\"]\n# Print result\nwith pd.option_context('display.max_rows', None, 'display.max_columns', 3):\n    print(df)\n```", "```py\n$ python gdp_arima.py --help\nusage: gdp_arima.py [-h] [-c COUNTRY] [-l LENGTH] [-s START]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c COUNTRY, --country COUNTRY\n                        Two-letter country code (default: SE)\n  -l LENGTH, --length LENGTH\n                        Length of time series to fit the ARIMA model (default: 40)\n  -s START, --start START\n                        Starting offset to fit the ARIMA model (default: 0)\n$ python gdp_arima.py\n                   Actual      Forecast  Rel Error\n2000-12-31  2408151000000  2.367152e+12  -0.017025\n2001-12-31  2503731000000  2.449716e+12  -0.021574\n2002-12-31  2598336000000  2.516118e+12  -0.031643\n$ python gdp_arima.py -c NO\n                   Actual      Forecast  Rel Error\n2000-12-31  1507283000000  1.337229e+12  -0.112821\n2001-12-31  1564306000000  1.408769e+12  -0.099429\n2002-12-31  1561026000000  1.480307e+12  -0.051709\n```", "```py\nfor C in DK FI IS NO SE; do\n    for S in 0 5 10 15; do\n        python gdp_arima.py -c $C -s $S\n    done\ndone\n```", "```py\nfor C in DK FI IS NO SE; do for S in 0 5 10 15; do python gdp_arima.py -c $C -s $S ; done ; done\n```", "```py\n$ for C in DK FI IS NO SE; do for S in 0 5 10 15; do echo $C $S; python gdp_arima.py -c $C -s $S ; done; done\nDK 0\n                  Actual      Forecast  Rel Error\n2000-12-31  1.326912e+12  1.290489e+12  -0.027449\n2001-12-31  1.371526e+12  1.338878e+12  -0.023804\n2002-12-31  1.410271e+12  1.386694e+12  -0.016718\nDK 5\n                  Actual      Forecast  Rel Error\n2005-12-31  1.585984e+12  1.555961e+12  -0.018931\n2006-12-31  1.682260e+12  1.605475e+12  -0.045644\n2007-12-31  1.738845e+12  1.654548e+12  -0.048479\nDK 10\n                  Actual      Forecast  Rel Error\n2010-12-31  1.810926e+12  1.762747e+12  -0.026605\n2011-12-31  1.846854e+12  1.803335e+12  -0.023564\n2012-12-31  1.895002e+12  1.843907e+12  -0.026963\n\n...\n\nSE 5\n                   Actual      Forecast  Rel Error\n2005-12-31  2931085000000  2.947563e+12   0.005622\n2006-12-31  3121668000000  3.043831e+12  -0.024934\n2007-12-31  3320278000000  3.122791e+12  -0.059479\nSE 10\n                   Actual      Forecast  Rel Error\n2010-12-31  3573581000000  3.237310e+12  -0.094099\n2011-12-31  3727905000000  3.163924e+12  -0.151286\n2012-12-31  3743086000000  3.112069e+12  -0.168582\nSE 15\n                   Actual      Forecast  Rel Error\n2015-12-31  4260470000000  4.086529e+12  -0.040827\n2016-12-31  4415031000000  4.180213e+12  -0.053186\n2017-12-31  4625094000000  4.273781e+12  -0.075958\n```", "```py\nfor %C in (DK FI IS NO SE) do for %S in (0 5 10 15) do python gdp_arima.py -c $C -s $S\n```", "```py\nforeach ($C in \"DK\",\"FI\",\"IS\",\"NO\",\"SE\") { foreach ($S in 0,5,10,15) { python gdp_arima.py -c $C -s $S } }\n```", "```py\nimport os\nprint(os.environ[\"MYVALUE\"])\n```", "```py\n$ export MYVALUE=\"hello\"\n$ python show_env.py\nhello\n```", "```py\nC:\\MLM> set MYVALUE=hello\n\nC:\\MLM> python show_env.py\nhello\n```", "```py\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nfrom pandas_datareader.wb import WorldBankReader\nimport statsmodels.api as sm\nimport pandas as pd\nimport yaml\n\n# Load config from YAML file\nwith open(\"config.yaml\", \"r\") as fp:\n    args = yaml.safe_load(fp)\n\n# Set up parameters\nseries = \"NY.GDP.MKTP.CN\"\ncountry = args[\"country\"]\nlength = args[\"length\"]\nstart = args[\"start\"]\nsteps = 3\norder = (1,1,1)\n\n# Read the GDP data from WorldBank database\ngdp = WorldBankReader(series, country, start=1960, end=2020).read()\n# Drop country name from index\ngdp = gdp.droplevel(level=0, axis=0)\n# Sort data in choronological order and set data point at year-end\ngdp.index = pd.to_datetime(gdp.index)\ngdp = gdp.sort_index().resample(\"y\").last()\n# Convert pandas dataframe into pandas series\ngdp = gdp[series]\n# Fit arima model\nresult = sm.tsa.ARIMA(endog=gdp[start:start+length], order=order).fit()\n# Forecast, and calculate the relative error\nforecast = result.forecast(steps=steps)\ndf = pd.DataFrame({\"Actual\":gdp, \"Forecast\":forecast}).dropna()\ndf[\"Rel Error\"] = (df[\"Forecast\"] - df[\"Actual\"]) / df[\"Actual\"]\n# Print result\nwith pd.option_context('display.max_rows', None, 'display.max_columns', 3):\n    print(df)\n```", "```py\ncountry: SE\nlength: 40\nstart: 0\n```", "```py\nimport json\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nfrom pandas_datareader.wb import WorldBankReader\nimport statsmodels.api as sm\nimport pandas as pd\n\n# Load config from JSON file\nwith open(\"config.json\", \"r\") as fp:\n    args = json.load(fp)\n\n# Set up parameters\nseries = \"NY.GDP.MKTP.CN\"\ncountry = args[\"country\"]\nlength = args[\"length\"]\nstart = args[\"start\"]\nsteps = 3\norder = (1,1,1)\n\n# Read the GDP data from WorldBank database\ngdp = WorldBankReader(series, country, start=1960, end=2020).read()\n# Drop country name from index\ngdp = gdp.droplevel(level=0, axis=0)\n# Sort data in choronological order and set data point at year-end\ngdp.index = pd.to_datetime(gdp.index)\ngdp = gdp.sort_index().resample(\"y\").last()\n# Convert pandas dataframe into pandas series\ngdp = gdp[series]\n# Fit arima model\nresult = sm.tsa.ARIMA(endog=gdp[start:start+length], order=order).fit()\n# Forecast, and calculate the relative error\nforecast = result.forecast(steps=steps)\ndf = pd.DataFrame({\"Actual\":gdp, \"Forecast\":forecast}).dropna()\ndf[\"Rel Error\"] = (df[\"Forecast\"] - df[\"Actual\"]) / df[\"Actual\"]\n# Print result\nwith pd.option_context('display.max_rows', None, 'display.max_columns', 3):\n    print(df)\n```", "```py\n{\n    \"country\": \"SE\",\n    \"length\": 40,\n    \"start\": 0\n}\n```"]