- en: Visualizing a PyTorch Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化 PyTorch 模型
- en: 原文：[https://machinelearningmastery.com/visualizing-a-pytorch-model/](https://machinelearningmastery.com/visualizing-a-pytorch-model/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/visualizing-a-pytorch-model/](https://machinelearningmastery.com/visualizing-a-pytorch-model/)
- en: 'PyTorch is a deep learning library. You can build very sophisticated deep learning
    models with PyTorch. However, there are times you want to have a graphical representation
    of your model architecture. In this post, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 是一个深度学习库。你可以用 PyTorch 构建非常复杂的深度学习模型。然而，有时你可能需要模型架构的图形化表示。在这篇文章中，你将学习：
- en: How to save your PyTorch model in an exchange format
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将你的 PyTorch 模型保存为交换格式
- en: How to use Netron to create a graphical representation.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Netron 创建图形表示。
- en: '**Kick-start your project** with my book [Deep Learning with PyTorch](https://machinelearningmastery.com/deep-learning-with-pytorch/).
    It provides **self-study tutorials** with **working code**.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动你的项目**，请参考我的书籍 [《深度学习与 PyTorch》](https://machinelearningmastery.com/deep-learning-with-pytorch/)。它提供了
    **自学教程** 和 **可运行代码**。'
- en: Let’s get started.![](../Images/efea4b2258dc7e93cdff3b26bcbc6afc.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。![](../Images/efea4b2258dc7e93cdff3b26bcbc6afc.png)
- en: Visualizing a PyTorch Model
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化 PyTorch 模型
- en: Photo by [Ken Cheung](https://unsplash.com/photos/10py7Mvmf1g). Some rights
    reserved.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Ken Cheung](https://unsplash.com/photos/10py7Mvmf1g) 拍摄。版权所有。
- en: Overview
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: This post is divided into two parts; they are
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文分为两部分；它们是
- en: Why Graphical Representation of a PyTorch Model is Hard
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么 PyTorch 模型的图形化表示很困难
- en: How to Use Netron to Create a Model Graph
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Netron 创建模型图
- en: Why Graphical Represetnation of a PyTorch Model is Hard
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么 PyTorch 模型的图形化表示很困难
- en: 'PyTorch is a very flexible library for deep learning. Strictly speaking, it
    never mandates how you should build your model as long as it works like a function
    that can transform an input tensor into output tensor. This is a problem: With
    a model, you never knows how it works unless you follows the input tensor and
    collect the trace until you get the output tensor. Therefore it is not trivial
    to convert a PyTorch model into a picture.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 是一个非常灵活的深度学习库。严格来说，它从不强制规定你应如何构建模型，只要模型能像一个函数那样将输入张量转换为输出张量即可。这是一个问题：使用一个模型，你永远无法知道它是如何工作的，除非你跟踪输入张量并收集轨迹直到得到输出张量。因此，将
    PyTorch 模型转换为图片并非易事。
- en: 'There are multiple libraries to solve this problem. But in general, there are
    only two ways to solve it: You can follow a tensor on the forward pass and see
    what operation (i.e., layers) are applied, or follow a tensor on the backward
    pass and see how the gradient propagated to the input. You can only find clues
    about the structure inside a model in this manner.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题有多个库。但一般来说，只有两种方法可以解决：你可以在前向传递中跟踪一个张量，看看应用了什么操作（即，层），或者在反向传递中跟踪一个张量，查看梯度是如何传播到输入的。你只能以这种方式找到关于模型内部结构的线索。
- en: Want to Get Started With Deep Learning with PyTorch?
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想开始使用 PyTorch 进行深度学习吗？
- en: Take my free email crash course now (with sample code).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 立即获取我的免费电子邮件速成课程（包含示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注册并获得课程的免费 PDF 电子书版本。
- en: How to Use Netron to Create a Model Graph
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 Netron 创建模型图
- en: 'When you save a PyTorch model, you are saving its states. You can get the model
    states using `model.state_dict()`. While the weight tensors have names so it helps
    you to restore them to a model, you do not have the clues on how the weights are
    connected to each other. The only way you can connect tensors and find out their
    relationship is to get the tensor gradient: When you run a model and get an output,
    the calculations involved, including the dependencies to other tensors, are remembered
    by each intermediate tensors so automatic differentiation can be performed.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存一个 PyTorch 模型时，你是在保存它的状态。你可以使用 `model.state_dict()` 获取模型状态。虽然权重张量有名称，这有助于你将它们恢复到模型中，但你无法获得权重之间如何连接的线索。你唯一能够连接张量并找出它们关系的方法是获取张量梯度：当你运行一个模型并获得输出时，包括对其他张量的依赖在内的计算会被每个中间张量记住，以便进行自动微分。
- en: 'Indeed, if you want to know the algorithm behind a PyTorch model, this is also
    the way to go. There are only a few tools to create graphics from a PyTorch model.
    In below, you will learn about the tool Netron. It is a “deep learning model viewer”.
    It is a software that you can install and run on macOS, Linux, and Windows. You
    can visit the page below and download the software for your platform:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如果你想了解 PyTorch 模型背后的算法，这也是一种方法。只有少数工具可以从 PyTorch 模型创建图形。下面，你将了解工具 Netron。它是一个“深度学习模型查看器”。这是一个可以在
    macOS、Linux 和 Windows 上安装和运行的软件。你可以访问以下页面并下载适用于你的平台的软件：
- en: '[https://github.com/lutzroeder/netron/releases](https://github.com/lutzroeder/netron/releases)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/lutzroeder/netron/releases](https://github.com/lutzroeder/netron/releases)'
- en: There is also an [online version](https://netron.app/) available, that you can
    see your model by uploading a model file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个 [在线版本](https://netron.app/)，你可以通过上传模型文件来查看你的模型。
- en: Netron cannot visualize a PyTorch model from the saved states because there’s
    not enough clues to tell about the structure of the model. However, PyTorch allows
    you to convert the model to an exchange format, ONNX, that Netron can understand.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Netron 不能从保存的状态中可视化 PyTorch 模型，因为没有足够的线索来说明模型的结构。然而，PyTorch 允许你将模型转换为 Netron
    可以理解的交换格式 ONNX。
- en: 'Let’s start with an example. In below you created a simple model to classify
    the iris dataset. It is a classification problem with three classes. Therefore
    the model should output a vector of three values. A complete code that you would
    create for this problem is as follows, which the dataset is obtained from scikit-learn:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个例子开始。在下面，你创建了一个简单的模型来对鸢尾花数据集进行分类。这是一个有三个类别的分类问题。因此，模型应该输出一个包含三个值的向量。你为这个问题创建的完整代码如下，其中数据集来自
    scikit-learn：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running the above produces the following, for example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码将生成以下结果，例如：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So you know that `model` is a PyTorch model that can take a tensor and return
    a tensor. You can **convert** this model into ONNX format using the `torch.onnx.export()`
    function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你知道 `model` 是一个可以接受张量并返回张量的 PyTorch 模型。你可以使用 `torch.onnx.export()` 函数将此模型**转换**为
    ONNX 格式：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running this will create a file `iris.onnx` at the local directory. You need
    to provide a **sample tensor** that works with the model as input (`X_test` in
    the example above). This is because during the conversion, it needs to follow
    this sample tensor to understand what operations shall be applied so you can convert
    the algorithm step by step into ONNX format. Every weight in a PyTorch model is
    a tensor and there is a name assigned to them. But the input and output tensors
    are not named usually, hence you need to provide a name to them when you run `export()`.
    These names should be provided as a list of strings because in general, a model
    can take multiple tensors and return multiple tensors.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此操作将会在本地目录创建一个文件 `iris.onnx`。你需要提供一个与模型兼容的**示例张量**作为输入（上例中的`X_test`）。这是因为在转换过程中，需要跟随这个示例张量来理解应应用哪些操作，从而可以一步步将算法转换为
    ONNX 格式。PyTorch 模型中的每个权重都是一个张量，并且每个张量都有一个名称。但输入和输出张量通常没有命名，因此你需要在运行 `export()`
    时为它们提供一个名称。这些名称应作为字符串列表提供，因为通常情况下，一个模型可以接受多个张量并返回多个张量。
- en: Usually you should run `export()` after the training loop. It is because the
    ONNX model created contains a complete model that you can run without the PyTorch
    library. You want to save the optimized weight to it. However, for the purpose
    of visualizing a model in Netron, the quality of the model is not a concern. You
    can run `export()` as soon as the PyTorch model is created.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你应该在训练循环之后运行 `export()`。这是因为创建的 ONNX 模型包含一个完整的模型，你可以在没有 PyTorch 库的情况下运行它。你希望将优化后的权重保存到其中。然而，为了在
    Netron 中可视化模型，模型的质量并不是问题。你可以在创建 PyTorch 模型后立即运行 `export()`。
- en: 'After you launched Netron, you can open the saved ONNX file. In this example,
    you should see the following screen:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Netron 后，你可以打开保存的 ONNX 文件。在这个例子中，你应该会看到以下屏幕：
- en: '![](../Images/c42c718ae5cd2d16240ae1be9ef59569.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c42c718ae5cd2d16240ae1be9ef59569.png)'
- en: It shows how the input tensor connected to the output tensor via different operations
    in the deep learning model. The name of the input and output tensors you provided
    to the `export()` function is used in the visualization. Clicking on a box will
    give you more details about that particular tensor or operation. The names of
    operations as you can see in Netron may be different from what you call them in
    PyTorch, however. In the screen above, you see the `nn.Linear()` layer becomes
    “Gemm”, which stands for “general matrix multiply” operation. You can even examine
    the weights on a layer with Netron by a few points and clicks.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它展示了输入张量如何通过不同的操作连接到深度学习模型的输出张量。你提供给 `export()` 函数的输入和输出张量的名称会在可视化中使用。点击一个框会给你更多关于该张量或操作的详细信息。然而，你在
    Netron 中看到的操作名称可能与 PyTorch 中的名称不同。例如，在上面的屏幕中，`nn.Linear()` 层变成了“Gemm”，代表“通用矩阵乘法”操作。你甚至可以通过
    Netron 对层的权重进行检查，方法是点击几下。
- en: If you would like to keep a copy of this visualization, you can export it into
    PNG format in Netron.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望保存这个可视化的副本，你可以在 Netron 中将其导出为 PNG 格式。
- en: Further Readings
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Netron is an open source project which you can find its source code in Github:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Netron 是一个开源项目，你可以在 GitHub 上找到它的源代码：
- en: '[https://github.com/lutzroeder/netron](https://github.com/lutzroeder/netron)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/lutzroeder/netron](https://github.com/lutzroeder/netron)'
- en: 'An online version of Netron is available below:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Netron 的在线版本如下：
- en: '[https://netron.app/](https://netron.app/)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://netron.app/](https://netron.app/)'
- en: 'Another library for visualization is torchviz, but unlike the example you saw
    above, it traces the model from a backward pass:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可视化库是 torchviz，但与上面你看到的例子不同，它跟踪模型的反向传递：
- en: '[https://github.com/szagoruyko/pytorchviz](https://github.com/szagoruyko/pytorchviz)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/szagoruyko/pytorchviz](https://github.com/szagoruyko/pytorchviz)'
- en: Summary
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this post, you learned how to visualize a model. In particular, you learned:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你学会了如何可视化一个模型。特别是，你学到了：
- en: Why visualizing a PyTorch model is difficult
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么可视化 PyTorch 模型很困难
- en: How to convert a PyTorch model into ONNX format
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将 PyTorch 模型转换为 ONNX 格式
- en: How to use Netron to visualize a ONNX model
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Netron 可视化 ONNX 模型
