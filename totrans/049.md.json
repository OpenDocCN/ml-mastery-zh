["```py\n# Load and obtain the data types from the Ames dataset\nimport pandas as pd\nAmes = pd.read_csv('Ames.csv')\n\nprint(Ames.dtypes)\nprint(Ames.dtypes.value_counts())\n```", "```py\nPID                int64\nGrLivArea          int64\nSalePrice          int64\nMSSubClass         int64\nMSZoning          object\n                  ...   \nSaleCondition     object\nGeoRefNo         float64\nProp_Addr         object\nLatitude         float64\nLongitude        float64\nLength: 85, dtype: object\n\nobject     44\nint64      27\nfloat64    14\ndtype: int64\n```", "```py\n# Build on the above block of code\n# Separating numerical and categorical features\nnumerical_features = Ames.select_dtypes(include=['int64', 'float64']).columns\ncategorical_features = Ames.select_dtypes(include=['object']).columns\n\n# Displaying the separated lists\nprint(\"Numerical Features:\", numerical_features)\nprint(\"Categorical Features:\", categorical_features)\n```", "```py\nNumerical Features: Index(['PID', 'GrLivArea', 'SalePrice', 'MSSubClass', 'LotFrontage', 'LotArea',\n       'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF',\n       '2ndFlrSF', 'LowQualFinSF', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n       'MiscVal', 'MoSold', 'YrSold', 'GeoRefNo', 'Latitude', 'Longitude'],\n      dtype='object')\nCategorical Features: Index(['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n       'SaleType', 'SaleCondition', 'Prop_Addr'],\n      dtype='object')\n```", "```py\n# Building on the above 2 blocks of code\nAmes['MSSubClass'] = Ames['MSSubClass'].astype('object')\nAmes['YrSold'] = Ames['YrSold'].astype('object')\nAmes['MoSold'] = Ames['MoSold'].astype('object')\nprint(Ames.dtypes.value_counts())\n```", "```py\nobject     47\nint64      24\nfloat64    14\ndtype: int64\n```", "```py\n# Calculating the percentage of missing values for each column\nmissing_data = Ames.isnull().sum()\nmissing_percentage = (missing_data / len(Ames)) * 100\ndata_type = Ames.dtypes\n\n# Combining the counts and percentages into a DataFrame for better visualization\nmissing_info = pd.DataFrame({'Missing Values': missing_data, 'Percentage': missing_percentage,\n                             'Data Type':data_type})\n\n# Sorting the DataFrame by the percentage of missing values in descending order\nmissing_info = missing_info.sort_values(by='Percentage', ascending=False)\n\n# Display columns with missing values of 'object' data type\nprint(missing_info[(missing_info['Missing Values'] > 0) & (missing_info['Data Type'] == 'object')])\n```", "```py\n              Missing Values  Percentage Data Type\nPoolQC                  2570   99.651028    object\nMiscFeature             2482   96.238852    object\nAlley                   2411   93.485847    object\nFence                   2054   79.643273    object\nFireplaceQu             1241   48.119426    object\nGarageCond               129    5.001939    object\nGarageQual               129    5.001939    object\nGarageFinish             129    5.001939    object\nGarageType               127    4.924389    object\nBsmtExposure              71    2.753005    object\nBsmtFinType2              70    2.714230    object\nBsmtFinType1              69    2.675456    object\nBsmtQual                  69    2.675456    object\nBsmtCond                  69    2.675456    object\nProp_Addr                 20    0.775494    object\nMasVnrType                14    0.542846    object\nElectrical                 1    0.038775    object\n```", "```py\n# Building on the above block of code\n# Imputing Missing Categorical Data\n\nmode_value = Ames['Electrical'].mode()[0]\nAmes['Electrical'].fillna(mode_value, inplace=True)\n\nmissing_categorical = missing_info[(missing_info['Missing Values'] > 0)\n                           & (missing_info['Data Type'] == 'object')]\n\nfor item in missing_categorical.index.tolist():\n    Ames[item].fillna(\"None\", inplace=True)\n\nprint(Ames[missing_categorical.index].isnull().sum())\n```", "```py\nPoolQC          0\nMiscFeature     0\nAlley           0\nFence           0\nFireplaceQu     0\nGarageCond      0\nGarageQual      0\nGarageFinish    0\nGarageType      0\nBsmtExposure    0\nBsmtFinType2    0\nBsmtFinType1    0\nBsmtQual        0\nBsmtCond        0\nProp_Addr       0\nMasVnrType      0\nElectrical      0\n```", "```py\n# Build on the above blocks of code\n# Import Numpy\nimport numpy as np\n\n# Calculating the percentage of missing values for each column\nmissing_data = Ames.isnull().sum()\nmissing_percentage = (missing_data / len(Ames)) * 100\ndata_type = Ames.dtypes\n\n# Combining the counts and percentages into a DataFrame for better visualization\nmissing_info = pd.DataFrame({'Missing Values': missing_data, 'Percentage': missing_percentage,\n                             'Data Type':data_type})\n\n# Sorting the DataFrame by the percentage of missing values in descending order\nmissing_info = missing_info.sort_values(by='Percentage', ascending=False)\n\n# Display columns with missing values of numeric data type\nprint(missing_info[(missing_info['Missing Values'] > 0)\n                   & (missing_info['Data Type'] == np.number)])\n```", "```py\n              Missing Values  Percentage Data Type\nLotFrontage              462   17.913920   float64\nGarageYrBlt              129    5.001939   float64\nLongitude                 97    3.761148   float64\nLatitude                  97    3.761148   float64\nGeoRefNo                  20    0.775494   float64\nMasVnrArea                14    0.542846   float64\nBsmtFullBath               2    0.077549   float64\nBsmtHalfBath               2    0.077549   float64\nBsmtFinSF2                 1    0.038775   float64\nGarageArea                 1    0.038775   float64\nBsmtFinSF1                 1    0.038775   float64\nBsmtUnfSF                  1    0.038775   float64\nTotalBsmtSF                1    0.038775   float64\nGarageCars                 1    0.038775   float64\n```", "```py\n# Build on the above blocks of code\n# Initialize a DataFrame to store the concise information\nconcise_info = pd.DataFrame(columns=['Feature', 'Missing Values After Imputation', \n                                     'Mean Value Used to Impute'])\n\n# Identify and impute missing numerical values, and store the related concise information\nmissing_numeric_df = missing_info[(missing_info['Missing Values'] > 0)\n                           & (missing_info['Data Type'] == np.number)]\n\nfor item in missing_numeric_df.index.tolist():\n    mean_value = Ames[item].mean(skipna=True)\n    Ames[item].fillna(mean_value, inplace=True)\n\n    # Append the concise information to the concise_info DataFrame\n    concise_info.loc[len(concise_info)] = pd.Series({\n        'Feature': item,\n        'Missing Values After Imputation': Ames[item].isnull().sum(),\n        # This should be 0 as we are imputing all missing values\n        'Mean Value Used to Impute': mean_value\n    })\n\n# Display the concise_info DataFrame\nprint(concise_info)\n```", "```py\n         Feature Missing Values After Imputation  Mean Value Used to Impute\n0    LotFrontage                               0               6.851063e+01\n1    GarageYrBlt                               0               1.976997e+03\n2      Longitude                               0              -9.364254e+01\n3       Latitude                               0               4.203456e+01\n4       GeoRefNo                               0               7.136762e+08\n5     MasVnrArea                               0               9.934698e+01\n6   BsmtFullBath                               0               4.353900e-01\n7   BsmtHalfBath                               0               6.208770e-02\n8     BsmtFinSF2                               0               5.325950e+01\n9     GarageArea                               0               4.668646e+02\n10    BsmtFinSF1                               0               4.442851e+02\n11     BsmtUnfSF                               0               5.391947e+02\n12   TotalBsmtSF                               0               1.036739e+03\n13    GarageCars                               0               1.747867e+00\n```", "```py\n# Build on the above blocks of code\nmissing_values_count = Ames.isnull().sum().sum()\nprint(f'The DataFrame has a total of {missing_values_count} missing values.')\n```", "```py\nThe DataFrame has a total of 0 missing values.\n```"]