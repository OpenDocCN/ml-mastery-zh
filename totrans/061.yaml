- en: Using Haar Cascade for Object Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://machinelearningmastery.com/using-haar-cascade-for-object-detection/](https://machinelearningmastery.com/using-haar-cascade-for-object-detection/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Before the deep learning revolution redefined computer vision, Haar features
    and Haar cascades were the tools you must not ignore for object detection. Even
    today, they are very useful object detectors because they are lightweight. In
    this post, you will learn about the Haar cascade and how it can detect objects.
    After completing this post, you will know:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Haar features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Haar cascade is using Haar features to detect objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some predefined Haar cascade object detectors in OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kick-start your project** with my book [Machine Learning in OpenCV](https://machinelearning.samcart.com/products/machine-learning-opencv/).
    It provides **self-study tutorials** with **working code**.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.![](../Images/404249c392c97438aa42b0feed32889f.png)
  prefs: []
  type: TYPE_NORMAL
- en: Using Haar Cascade for Object Detection
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Alexander Hipp](https://unsplash.com/photos/time-lapse-photo-of-waterfalls-5tIuYKRRHj8).
    Some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This tutorial is divided into two parts; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: What are Haar Features and Haar Cascade?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Haar Cascade in OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are Haar Features and Haar Cascade?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the technique developed by Paul Viola and Michael Jones in 2001, Haar
    features and Haar cascades have revolutionized object detection. They have become
    integral components in various applications, ranging from facial recognition to
    real-time object detection.
  prefs: []
  type: TYPE_NORMAL
- en: Haar features are extracted from rectangular areas in an image. The feature’s
    value is based on the pixel intensities. Usually, it is calculated using a sliding
    window, and the area within the window is partitioned into two or more rectangular
    areas. Haar feature is the difference in the sum of pixel intensities between
    these areas.
  prefs: []
  type: TYPE_NORMAL
- en: It is believed that an object’s presence will distort the variation of pixel
    intensity. For example, the background is usually in a uniform pattern, in which
    a foreground object will not fit. By checking the pixel intensity between neighboring
    rectangular areas, you should be able to notice a difference. Hence it is indicative
    of the object’s presence.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the efficiency of calculation, the rectangular areas in Haar features are
    usually parallel to the edges of the image rather than tilted. However, we can
    use multiple sizes and shapes of rectangles to capture different features and
    scale variations of an object. Therefore, the key strength of Haar features lies
    in their ability to represent three patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Edges**: Either vertical or horizontal due to how we oriented the rectangular
    area. They are useful for identifying boundaries between different image regions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Lines**: The diagonal edges in an image. They are useful for identifying
    lines and contours in objects.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Center-surrounded features**: This detects the changes in intensity between
    the center of a rectangular region and its surrounding area. This is useful to
    identify objects with a distinct shape or pattern.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Haar cascade combines multiple Haar features in a hierarchy to build a classifier.
    Instead of analyzing the entire image with each Haar feature, cascades break down
    the detection process into stages, each consisting of a set of features.
  prefs: []
  type: TYPE_NORMAL
- en: The key idea behind Haar cascade is that only a small number of pixels among
    the entire image is related to the object in concern. Therefore, it is essential
    to discard the irrelevant part of the image as quickly as possible. During the
    detection process, the Haar cascade scans the image at different scales and locations
    to eliminate irrelevant regions. The cascade structure, trained using the AdaBoost
    algorithm, enables an efficient, hierarchical evaluation of features, reducing
    the computational load and accelerating the detection speed.
  prefs: []
  type: TYPE_NORMAL
- en: Haar Cascade in OpenCV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Haar cascade is an algorithm, but first, you need to train a Haar cascade classifier
    before you can use it as an object detector.
  prefs: []
  type: TYPE_NORMAL
- en: 'In OpenCV, there are pre-trained Haar cascade classifiers for the following
    (you can download the model files from [https://github.com/opencv/opencv/tree/4.x/data/haarcascades](https://github.com/opencv/opencv/tree/4.x/data/haarcascades)):'
  prefs: []
  type: TYPE_NORMAL
- en: human face
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eye detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: full body, upper body, or lower body of a human
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vehicle license plate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The pre-trained classifier is stored as an XML file. You can find the filename
    of the built-in classifiers from the [GitHub link](https://github.com/opencv/opencv/tree/4.x/data/haarcascades).
    To create a classifier, you must provide the path to this XML file. If you’re
    using the one that shipped with OpenCV, you can use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Usually a photo has multiple channels for the different colors (such as red,
    green, and blue). Haar cascade depends on pixel intensity only. Hence you should
    provide a single channel image, such as the grayscale version.
  prefs: []
  type: TYPE_NORMAL
- en: Want to Get Started With Machine Learning with OpenCV?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take my free email crash course now (with sample code).
  prefs: []
  type: TYPE_NORMAL
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Haar cascade classifier to detect objects is to use the method `detectMultiScale()`.
    It takes the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image`: This is the input image on which you want to perform object detection.
    It should be in grayscale format, or the “V” channel for an image in HSV channel
    format'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scaleFactor`: This parameter compensates for the fact that an object at different
    distances from the camera will appear at different sizes. It controls how much
    the image size is reduced at each image scale. It must be strictly greater than
    1\. A lower `scaleFactor` increases the detection time but also increases the
    chance of detection. Typical values range from 1.01 to 1.3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`minNeighbors`: This parameter specifies how many neighbors each candidate
    object should have to retain it. Higher values result in fewer detections but
    with higher quality. Lower values may lead to more detections but with possible
    false positives. It’s a trade-off between precision and recall.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`minSize`: This parameter sets the minimum object size. Objects smaller than
    this will be ignored. It’s a tuple of the form `(width, height)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s try with an example. You can download a street photo at the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://unsplash.com/photos/people-walking-on-sidewalk-during-daytime-GBkAx9qUeus](https://unsplash.com/photos/people-walking-on-sidewalk-during-daytime-GBkAx9qUeus)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/035ee7893be5ca3e0f608a2841ad74ef.png)'
  prefs: []
  type: TYPE_IMG
- en: A photo for face detection using Haar cascade.
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [JACQUELINE BRANDWAYN](https://unsplash.com/photos/people-walking-on-sidewalk-during-daytime-GBkAx9qUeus).
    Some rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: A medium size resolution of 1920×1080 is used in this example. If you have a
    different resolution, you may need to tweak the arguments to `detectMultiScale()`
    below specifically the `minSize`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a face detector and find the location of the faces of the pedestrians.
    The classifier is created using the pre-trained model `haarcascade_frontalface_default.xml`
    that shipped with OpenCV. The model file is located in the path pointed by `cv2.data.haarcascades`.
    Then we can use it to detect faces as bounding boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to adjust the parameters in your case. To illustrate the result, you
    can make use of OpenCV’s function to draw on the **original** image,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `cv2.rectangle()` function asks for the coordinates of the opposite
    corners of a rectangular box, while the output of `detectMultiScale()` provides
    the coordinates of the top left corner and the width and height. The function
    above draws a blue box of two pixels wide on each face detected. Note that in
    OpenCV, images are presented in BGR channel order. Hence the pixel color `(255,
    0, 0)` represents blue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/466e207e8184ecdff233cb2997f292a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Faces as detected by Haar cascade
  prefs: []
  type: TYPE_NORMAL
- en: You can see that there are some false positives but overall, it provided a quite
    good result. You can adjust the parameters above to see how your result changes.
    The quality of the object detector using Haar cascade depends on how well it is
    trained to produce the model you read from the XML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section provides more resources on the topic if you want to go deeper.
  prefs: []
  type: TYPE_NORMAL
- en: Books
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Mastering OpenCV 4 with Python](https://www.amazon.com/Mastering-OpenCV-Python-practical-processing/dp/1789344913),
    2019.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Digital Image Processing](https://www.amazon.com/Digital-Image-Processing-Rafael-Gonzalez/dp/0133356728),
    2017'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Papers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Paul Viola and Michael J. Jones. [Robust real-time face detection](https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf).
    International Journal of Computer Vision, 57(2):137–154, 2004.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rainer Lienhart and Jochen Maydt. An extended set of haar-like features for
    rapid object detection. In Proc. Int. Conf. Image Processing. 2002, volume 1,
    pages 1-900\. IEEE, 2002.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Websites
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Haar features on Wikipedia: [https://en.wikipedia.org/wiki/Haar-like_feature](https://en.wikipedia.org/wiki/Haar-like_feature)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenCV, [https://opencv.org/](https://opencv.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenCV Cascade Classifier, [https://docs.opencv.org/4.x/db/d28/tutorial_cascade_classifier.html](https://docs.opencv.org/4.x/db/d28/tutorial_cascade_classifier.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, you learned how to use OpenCV’s Haar cascade classifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Haar features and Haar cascade, and how it sees an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the built-in Haar cascade classifier to detect objects in a photo
    using OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
