- en: A Gentle Introduction to Decorators in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中装饰器的温和介绍
- en: 原文：[https://machinelearningmastery.com/a-gentle-introduction-to-decorators-in-python/](https://machinelearningmastery.com/a-gentle-introduction-to-decorators-in-python/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/a-gentle-introduction-to-decorators-in-python/](https://machinelearningmastery.com/a-gentle-introduction-to-decorators-in-python/)
- en: When working on code, whether we know it or not, we often come across the decorator
    design pattern. This is a programming technique to extend the functionality of
    classes or functions without modifying them. The decorator design pattern allows
    us to mix and match extensions easily. Python has a decorator syntax rooted in
    the decorator design pattern. Knowing how to make and use a decorator can help
    you write more powerful code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时，无论我们是否意识到，我们常常会遇到装饰器设计模式。这是一种编程技术，可以在不修改类或函数的情况下扩展它们的功能。装饰器设计模式允许我们轻松混合和匹配扩展。Python
    具有根植于装饰器设计模式的装饰器语法。了解如何制作和使用装饰器可以帮助你编写更强大的代码。
- en: In this post, you will discover the decorator pattern and Python’s function
    decorators.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你将发现装饰器模式和 Python 的函数装饰器。
- en: 'After completing this tutorial, you will learn:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本教程后，你将学到：
- en: What is the decorator pattern, and why is it useful
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是装饰器模式，为什么它有用
- en: Python’s function decorators and how to use them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 的函数装饰器及其使用方法
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过我的新书** [《Python 机器学习》](https://machinelearningmastery.com/python-for-machine-learning/)，*逐步教程*
    和所有示例的 *Python 源代码* 文件来**快速启动你的项目**。'
- en: Let’s get started!![](../Images/a67e1d8293610400f6d7b5fd8ea10829.png)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！！[](../Images/a67e1d8293610400f6d7b5fd8ea10829.png)
- en: A Gentle Introduction to Decorators in Python
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中装饰器的温和介绍
- en: Photo by [Olya Kobruseva](https://www.pexels.com/photo/a-book-beside-a-cup-of-coffee-6560995/).
    Some rights reserved.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Olya Kobruseva](https://www.pexels.com/photo/a-book-beside-a-cup-of-coffee-6560995/)
    提供。保留部分权利。
- en: Overview
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'This tutorial is divided into four parts:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为四部分：
- en: What is the decorator pattern, and why is it useful?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是装饰器模式，为什么它有用？
- en: Function decorators in Python
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 中的函数装饰器
- en: The use cases of decorators
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装饰器的使用案例
- en: Some practical examples of decorators
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些实用的装饰器示例
- en: What is the decorator pattern, and why is it useful?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是装饰器模式，为什么它有用？
- en: The decorator pattern is a software design pattern that allows us to dynamically
    add functionality to classes without creating subclasses and affecting the behavior
    of other objects of the same class. By using the decorator pattern, we can easily
    generate different permutations of functionality that we might want without creating
    an exponentially increasing number of subclasses, making our code increasingly
    complex and bloated.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器模式是一种软件设计模式，允许我们动态地向类添加功能，而无需创建子类并影响同一类的其他对象的行为。通过使用装饰器模式，我们可以轻松生成我们可能需要的不同功能排列，而无需创建指数增长数量的子类，从而使我们的代码变得越来越复杂和臃肿。
- en: Decorators are usually implemented as sub-interfaces of the main interface that
    we want to implement and store an object of the main interface’s type. It will
    then modify the methods to which it wants to add certain functionality by overriding
    the methods in the original interface and calling on methods from the stored object.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器通常作为我们想要实现的主要接口的子接口来实现，并存储主要接口类型的对象。然后，它将通过覆盖原始接口中的方法并调用存储对象的方法来修改它希望添加某些功能的方法。
- en: '[![](../Images/20be37618a47d64073464ab0a407d0c5.png)](https://machinelearningmastery.com/wp-content/uploads/2022/03/Decorator-UML-Class-Diagram.png)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/20be37618a47d64073464ab0a407d0c5.png)](https://machinelearningmastery.com/wp-content/uploads/2022/03/Decorator-UML-Class-Diagram.png)'
- en: UML class diagram for decorator pattern
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器模式的 UML 类图
- en: Above is the UML class diagram for the decorator design pattern. The decorator
    abstract class contains an object of type `OriginalInterface`; this is the object
    whose functionality the decorator will be modifying. To instantiate our concrete
    `DecoratorClass`, we would need to pass in a concrete class that implements the
    `OriginalInterface,` and then when we make method calls to `DecoratorClass.method1()`,
    our `DecoratorClass` should modify the output from the object’s `method1()`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上图是装饰器设计模式的 UML 类图。装饰器抽象类包含一个`OriginalInterface`类型的对象；这是装饰器将修改其功能的对象。要实例化我们的具体`DecoratorClass`，我们需要传入一个实现了`OriginalInterface`的具体类，然后当我们调用`DecoratorClass.method1()`方法时，我们的`DecoratorClass`应修改该对象的`method1()`的输出。
- en: With Python, however, we are able to simplify many of these design patterns
    due to dynamic typing along with functions and classes being first-class objects.
    While modifying a class or a function without changing the implementation remained
    the key idea of decorators, we will explore Python’s decorator syntax in the following.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过 Python，我们能够简化许多这些设计模式，因为动态类型以及函数和类是头等对象。虽然在不改变实现的情况下修改类或函数仍然是装饰器的关键思想，但我们将在下面探讨
    Python 的装饰器语法。
- en: Function Decorators in Python
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 中的函数装饰器
- en: A function decorator is an incredibly useful feature in Python. It is built
    upon the idea that functions and classes are first-class objects in Python.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 函数装饰器是 Python 中一个极其有用的功能。它建立在函数和类在 Python 中是头等对象的概念之上。
- en: 'Let’s consider a simple example, that is, to call a function twice. Since a
    Python function is an object and we can pass a function as an argument to another
    function, this task can be done as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个简单的例子，即调用一个函数两次。由于 Python 函数是对象，并且我们可以将函数作为参数传递给另一个函数，因此这个任务可以如下完成：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Again, since a Python function is an object, we can make a function to return
    another function, which is to execute yet another function twice. This is done
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，由于 Python 函数是对象，我们可以创建一个函数来返回另一个函数，即执行另一个函数两次。这可以如下完成：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The function returned by `repeat_decorator()` above is created when it is invoked,
    as it depends on the argument provided. In the above, we passed the `hello_world`
    function as an argument to the `repeat_decorator()` function, and it returns the
    `decorated_fn` function, which is assigned to `hello_world_twice`. Afterward,
    we can invoke `hello_world_twice()` since it is now a function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`repeat_decorator()`返回的函数是在调用时创建的，因为它依赖于提供的参数。在上述代码中，我们将`hello_world`函数作为参数传递给`repeat_decorator()`函数，它返回`decorated_fn`函数，该函数被分配给`hello_world_twice`。之后，我们可以调用`hello_world_twice()`，因为它现在是一个函数。
- en: 'The idea of decorator pattern applies here. But we do not need to define the
    interface and subclasses explicitly. In fact, `hello_world` is a name defined
    as a function in the above example. There is nothing preventing us from redefining
    this name to something else. Hence we can also do the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器模式的理念在这里适用。但我们不需要显式地定义接口和子类。事实上，`hello_world`是在上述示例中定义为一个函数的名称。没有什么阻止我们将这个名称重新定义为其他名称。因此我们也可以这样做：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That is, instead of assigning the newly created function to `hello_world_twice`,
    we overwrite `hello_world` instead. While the name `hello_world` is reassigned
    to another function, the previous function still exists but is just not exposed
    to us.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们不是将新创建的函数分配给`hello_world_twice`，而是覆盖了`hello_world`。虽然`hello_world`的名称被重新分配给另一个函数，但之前的函数仍然存在，只是不对我们公开。
- en: 'Indeed, the above code is functionally equivalent to the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，上述代码在功能上等同于以下代码：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above code, `@repeat_decorator` before a function definition means to
    pass the function into `repeat_decorator()` and reassign its name to the output.
    That is, to mean `hello_world = repeat_decorator(hello_world)`. The `@` line is
    the decorator syntax in Python.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`@repeat_decorator`在函数定义之前意味着将函数传递给`repeat_decorator()`并将其名称重新分配给输出。也就是说，相当于`hello_world
    = repeat_decorator(hello_world)`。`@`行是 Python 中的装饰器语法。
- en: '**Note:** `@` syntax is also used in Java but has a different meaning where
    it’s an annotation that is basically metadata and not a decorator.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** `@` 语法在 Java 中也被使用，但含义不同，它是注解，基本上是元数据而不是装饰器。'
- en: 'We can also implement decorators that take in arguments, but this would be
    a bit more complicated as we need to have one more layer of nesting. If we extend
    our example above to define the number of times to repeat the function call:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以实现接受参数的装饰器，但这会稍微复杂一些，因为我们需要再多一层嵌套。如果我们扩展上面的例子以定义重复函数调用的次数：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `repeat_decorator()` takes in an argument and returns a function which
    is the actual decorator for the `hello_world` function (i.e., invoking `repeat_decorator(5)`
    returns `inner_decorator` with the local variable `num_repeats = 5` set). The
    above code will print the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeat_decorator()` 接受一个参数并返回一个函数，这个函数是 `hello_world` 函数的实际装饰器（即，调用 `repeat_decorator(5)`
    返回的是 `inner_decorator`，其中本地变量 `num_repeats = 5` 被设置）。上述代码将打印如下内容：'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Before we end this section, we should remember that decorators can also be applied
    to classes in addition to functions. Since class in Python is also an object,
    we may redefine a class in a similar fashion.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本节之前，我们应该记住，装饰器不仅可以应用于函数，也可以应用于类。由于 Python 中的类也是一个对象，我们可以用类似的方式重新定义一个类。
- en: Want to Get Started With Python for Machine Learning?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想开始学习 Python 机器学习吗？
- en: Take my free 7-day email crash course now (with sample code).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就来获取我的免费 7 天电子邮件速成课程（附有示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注册，并免费获得课程的 PDF 电子书版本。
- en: The Use Cases of Decorators
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰器的使用案例
- en: 'The decorator syntax in Python made the use of decorators easier. There are
    many reasons we may use a decorator. One of the most common use cases is to convert
    data implicitly. For example, we may define a function that assumes all operations
    are based on numpy arrays and then make a decorator to ensure that happens by
    modifying the input:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的装饰器语法使得装饰器的使用变得更简单。我们使用装饰器的原因有很多，其中一个最常见的用例是隐式地转换数据。例如，我们可以定义一个假设所有操作都基于
    numpy 数组的函数，然后创建一个装饰器来确保这一点，通过修改输入：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can further add to our decorator by modifying the output of the function,
    such as rounding off floating point values:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步修改装饰器，通过调整函数的输出，例如对浮点值进行四舍五入：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s consider the example of finding the sum of an array. A numpy array has
    `sum()` built-in, as does pandas DataFrame. But the latter is to sum over columns
    rather than sum over all elements. Hence a numpy array will sum to one floating
    point value while a DataFrame will sum to a vector of values. But with the above
    decorator, we can write a function that gives you consistent output in both cases:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个求数组和的例子。一个 numpy 数组有内置的 `sum()` 方法，pandas DataFrame 也是如此。但是，后者是对列求和，而不是对所有元素求和。因此，一个
    numpy 数组会得到一个浮点值的和，而 DataFrame 则会得到一个值的向量。但通过上述装饰器，我们可以编写一个函数，使得在这两种情况下都能得到一致的输出：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running the above code gives us the output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码会得到如下输出：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a simple example. But imagine if we define a new function that computes
    the standard deviation of elements in an array. We can simply use the same decorator,
    and then the function will also accept pandas DataFrame. Hence all the code to
    polish input is taken out of these functions by depositing them into the decorator.
    This is how we can efficiently reuse the code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子。但是想象一下，如果我们定义一个新函数来计算数组中元素的标准差。我们可以简单地使用相同的装饰器，这样函数也会接受 pandas DataFrame。因此，所有的输入处理代码都被移到了装饰器中。这就是我们如何高效重用代码的方法。
- en: Some Practical Examples of Decorators
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些实际的装饰器示例
- en: Now that we learned the decorator syntax in Python, let’s see what we can do
    with it!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们学习了 Python 中的装饰器语法，那我们来看看可以用它做些什么吧！
- en: Memoization
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备忘录化
- en: There are some function calls that we do repeatedly, but where the values rarely,
    if ever, change. This could be calls to a server where the data is relatively
    static or as part of a dynamic programming algorithm or computationally intensive
    math function. We might want to **memoize** these function calls, i.e., storing
    the value of their output on a virtual memo pad for reuse later.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有些函数调用我们会重复进行，但这些值很少甚至几乎不变。这可能是对数据相对静态的服务器的调用，或者作为动态编程算法或计算密集型数学函数的一部分。我们可能想要**备忘录化**这些函数调用，即将它们的输出值存储在虚拟备忘录中以便后续重用。
- en: 'A decorator is the best way to implement a memoization function. We just need
    to remember the input and output of a function but keep the function’s behavior
    as-is. Below is an example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器是实现备忘录化函数的最佳方式。我们只需要记住函数的输入和输出，但保持函数的行为不变。下面是一个例子：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, we implemented `memoize()` to work with a global dictionary
    `MEMO` such that the name of a function together with the arguments becomes the
    key and the function’s return becomes the value. When the function is called,
    the decorator will check if the corresponding key exists in `MEMO`, and the stored
    value will be returned. Otherwise, the actual function is invoked, and its return
    value is added to the dictionary.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们实现了`memoize()`函数以便与全局字典`MEMO`一起工作，使得函数名与参数组成键，函数的返回值成为值。当调用函数时，装饰器会检查对应的键是否存在于`MEMO`中，如果存在，则返回存储的值。否则，将调用实际的函数，并将其返回值添加到字典中。
- en: We use `pickle` to serialize the input and output and use `hashlib` to create
    a hash of the input because not everything can be a key to the Python dictionary
    (e.g., `list` is an unhashable type; thus, it cannot be a key). Serializing any
    arbitrary structure into a string can overcome this and guarantee that the return
    data is immutable. Furthermore, hashing the function argument would avoid storing
    an exceptionally long key in the dictionary (for example, when we pass in a huge
    numpy array to the function).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`pickle`来序列化输入和输出，并使用`hashlib`来创建输入的哈希，因为并不是所有东西都可以作为Python字典的键（例如，`list`是不可哈希的类型，因此不能作为键）。将任何任意结构序列化为字符串可以克服这个问题，并确保返回数据是不可变的。此外，对函数参数进行哈希处理可以避免在字典中存储异常长的键（例如，当我们将一个巨大的numpy数组传递给函数时）。
- en: The above example uses `fibonacci()` to demonstrate the power of memoization.
    Calling `fibonacci(n)` will produce the n-th Fibonacci number. Running the above
    example would produce the following output, in which we can see the 40th Fibonacci
    number is 102334155 and how the dictionary `MEMO` is used to store different calls
    to the function.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例使用`fibonacci()`演示了记忆化的强大功能。调用`fibonacci(n)`将生成第n个斐波那契数。运行上述示例将产生以下输出，其中我们可以看到第40个斐波那契数是102334155，以及字典`MEMO`是如何用于存储对函数的不同调用的。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You may try to remove the `@memoize` line in the code above. You will find the
    program takes significantly longer to run (because each function call invokes
    two more function calls; hence it is running in O(2^n) instead of O(n) as in the
    memoized case), or you may even be running out of memory.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试去掉上述代码中的`@memoize`行。你会发现程序运行时间显著增加（因为每次函数调用都会调用两个额外的函数调用，因此它的运行复杂度是O(2^n)，而记忆化情况下为O(n)），或者你可能会遇到内存不足的问题。
- en: 'Memoization is very helpful for expensive functions whose outputs don’t change
    frequently, for example, the following function that reads some stock market data
    from the Internet:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆化对那些输出不经常变化的昂贵函数非常有帮助，例如，下面的函数从互联网读取一些股市数据：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If implemented correctly, the call to `get_stock_data()` should be more expensive
    the first time and much less expensive subsequently. The output from the code
    snippet above gives us:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实现正确，第一次调用`get_stock_data()`应该会更昂贵，而后续调用则会便宜得多。上述代码片段的输出结果是：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is particularly useful if you are working on a Jupyter notebook. If you
    need to download some data, wrap it in a memoize decorator. Since developing a
    machine learning project means many iterations of changing your code to see if
    the result looks any better, a memoized download function saves you a lot of unnecessary
    waiting.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Jupyter notebook，这特别有用。如果需要下载一些数据，将其包装在memoize装饰器中。由于开发机器学习项目意味着多次更改代码以查看结果是否有所改善，使用记忆化下载函数可以节省大量不必要的等待时间。
- en: 'You may make a more powerful memoization decorator by saving the data in a
    database (e.g., a key-value store like GNU dbm or an in-memory database such as
    memcached or Redis). But if you just need the functionality as above, Python 3.2
    or later shipped you the decorator `lru_cache` from the built-in library `functools`,
    so you don’t need to write your own:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将数据存储在数据库中（例如，像GNU dbm这样的键值存储或像memcached或Redis这样的内存数据库）来创建一个更强大的记忆化装饰器。但如果你只需要上述功能，Python
    3.2或更高版本的内置库`functools`中已经提供了装饰器`lru_cache`，因此你不需要自己编写：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Note:** The `lru_cache` implements LRU caching, which limits its size to
    the most recent calls (default 128) to the function. In Python 3.9, there is a
    `@functools.cache` as well, which is unlimited in size without the LRU purging.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** `lru_cache`实现了LRU缓存，它将其大小限制为对函数的最新调用（默认128）。在Python 3.9中，还有一个`@functools.cache`，其大小无限制，不进行LRU清除。'
- en: Function Catalog
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数目录
- en: 'Another example where we might want to consider the use of function decorators
    is for registering functions in a catalog. It allows us to associate functions
    with a string and pass the strings as arguments for other functions. This is the
    start of making a system that will enable user-provided plug-ins. Let’s illustrate
    this with an example. Below is a decorator and a function `activate()` that we
    will use later. Let’s assume the following code is saved in the file `activation.py`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可能希望考虑使用函数装饰器的例子是用于在目录中注册函数。它允许我们将函数与字符串关联，并将这些字符串作为其他函数的参数传递。这是构建一个允许用户提供插件的系统的开始。让我们用一个例子来说明。以下是一个装饰器和我们稍后将使用的函数`activate()`。假设以下代码保存于文件`activation.py`中：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After defining the `register` decorator in the above code, we can now use it
    to register functions and associate strings with them. Let’s have the file `funcs.py`
    as such:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中定义了`register`装饰器之后，我们现在可以使用它来注册函数并将字符串与之关联。让我们来看一下`funcs.py`文件：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We’ve registered the “relu,” “sigmoid,” and “tanh” functions to their respective
    strings by building this association in the `ACTIVATION` dictionary.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在`ACTIVATION`字典中建立这种关联，将“relu”，“sigmoid”和“tanh”函数注册到各自的字符串。
- en: Now, let’s see how we can use our newly registered functions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用我们新注册的函数。
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'which gives us the output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们输出：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Observe that before we reached the `import func` line, the ReLU activation does
    not exist. Hence calling the function will have the error message print, and the
    result is `None`. Then after we run that `import` line, we are loading those functions
    defined just like a plug-in module. Then the same function call gave us the result
    we expected.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在我们到达`import func`这一行之前，ReLU 激活函数并不存在。因此调用该函数会打印错误信息，结果为`None`。然后在我们运行那一行`import`之后，我们就像加载插件模块一样加载了那些定义的函数。之后同样的函数调用给出了我们预期的结果。
- en: Note that we never invoked anything in the module `func` explicitly, and we
    didn’t modify anything in the call to `activate()`. Simply importing `func` caused
    those new functions to register and expanded the functionality of `activate()`.
    Using this technique allows us to develop a very large system while focusing on
    only one small part at a time without worrying about the interoperability of other
    parts. Without the registration decorators and function catalog, adding a new
    activation function would need modification to **every** function that uses activation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们从未显式调用模块`func`中的任何内容，也没有修改`activate()`的调用。仅仅导入`func`就使得那些新函数注册并扩展了`activate()`的功能。使用这种技术允许我们在开发非常大的系统时，只关注一小部分，而不必担心其他部分的互操作性。如果没有注册装饰器和函数目录，添加新的激活函数将需要修改**每一个**使用激活的函数。
- en: 'If you’re familiar with Keras, you should resonate the above with the following
    syntax:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Keras很熟悉，你应该能将上述内容与以下语法产生共鸣：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Keras defined almost all components using a decorator of similar nature. Hence
    we can refer to building blocks by name. Without this mechanism, we have to use
    the following syntax all the time, which puts a burden on us to remember the location
    of a lot of components:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Keras几乎使用类似性质的装饰器定义了所有组件。因此我们可以通过名称引用构建块。如果没有这种机制，我们必须一直使用以下语法，这让我们需要记住很多组件的位置：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Further reading
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This section provides more resources on the topic if you are looking to go deeper.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了更多关于该主题的资源，如果你希望深入了解。
- en: Articles
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文章
- en: '[Decorator pattern](https://blogs.oracle.com/javamagazine/post/the-decorator-pattern-in-depth)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[装饰器模式](https://blogs.oracle.com/javamagazine/post/the-decorator-pattern-in-depth)'
- en: Python Language Reference, Section 8.7, [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python语言参考，第8.7节，[函数定义](https://docs.python.org/3/reference/compound_stmts.html#function)
- en: '[PEP 318 – Decorators for Functions and Methods](https://peps.python.org/pep-0318/)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PEP 318 – 函数和方法的装饰器](https://peps.python.org/pep-0318/)'
- en: Books
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 书籍
- en: '[Fluent Python](https://www.amazon.com/dp/1492056359/), 2nd edition, by Luciano
    Ramalho'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Fluent Python](https://www.amazon.com/dp/1492056359/)，第二版，作者Luciano Ramalho'
- en: APIs
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API
- en: '[functools module](https://docs.python.org/3/library/functools.html) in Python
    standard library'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python标准库中的[functools模块](https://docs.python.org/3/library/functools.html)
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this post, you discovered the decorator design pattern and Python’s decorator
    syntax. You also saw some specific use cases of decorators that can help your
    Python program run faster or be easier to extend.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你了解了装饰器设计模式和Python的装饰器语法。你还看到了一些装饰器的具体使用场景，这些可以帮助你的Python程序运行得更快或更易扩展。
- en: 'Specifically, you learned:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，你学习了：
- en: The idea of a decorator pattern and the decorator syntax in Python
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装饰器模式的概念以及 Python 中的装饰器语法
- en: How to implement a decorator in Python for use with the decorator syntax
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Python 中实现装饰器，以便使用装饰器语法
- en: The use of a decorator for adapting function input and output, for memoization,
    and for registering functions in a catalog
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用装饰器来适配函数输入输出、实现记忆化以及在目录中注册函数
