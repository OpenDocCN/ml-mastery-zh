["```py\nimport cv2\nimport numpy as np\n\n# Load the image\nimg = cv2.imread('image.jpg')\n\n# Convert to grayscale\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n# Detect edges using Canny method\nedges = cv2.Canny(gray, 150, 300)\n\n# Display the image with corners\nimg[edges == 255] = (255,0,0)\ncv2.imshow('Canny Edges', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```", "```py\nimport cv2\nimport numpy as np\n\n# Load the image\nimg = cv2.imread('image.jpg')\n\n# Convert to grayscale\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n# Detect corners using the Harris method\ndst = cv2.cornerHarris(gray, 3, 5, 0.1)\n\n# Create a boolean bitmap of corner positions\ncorners = dst > 0.05 * dst.max()\n\n# Find the coordinates from the boolean bitmap\ncoord = np.argwhere(corners)\n\n# Draw circles on the coordinates to mark the corners\nfor y, x in coord:\n    cv2.circle(img, (x,y), 3, (0,0,255), -1)\n\n# Display the image with corners\ncv2.imshow('Harris Corners', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```", "```py\ncorners = dst &gt; 0.05 * dst.max()\n\n```"]