["```py\n# Load the digits image\nimg, sub_imgs = split_images('Images/digits.png', 20)\n\n# Obtain training and testing datasets from the digits image\ndigits_train_imgs, digits_train_labels, digits_test_imgs, digits_test_labels = split_data(20, sub_imgs, 0.8)\n```", "```py\n# Create an empty logistic regression model\nlr_digits = ml.LogisticRegression_create()\n```", "```py\n# Check the default training method\nprint('Training Method:', lr_digits.getTrainMethod())\n\n# Set the training method to Mini-Batch Gradient Descent and the size of the mini-batch\nlr_digits.setTrainMethod(ml.LogisticRegression_MINI_BATCH)\nlr_digits.setMiniBatchSize(400)\n```", "```py\n# Set the number of iterations\nlr.setIterations(10)\n```", "```py\n# Train the logistic regressor on the set of training data\nlr_digits.train(digits_train_imgs.astype(float32), ml.ROW_SAMPLE, digits_train_labels.astype(float32))\n```", "```py\n# Print the number of learned coefficients, and the number of input features\nprint('Number of coefficients:', len(lr_digits.get_learnt_thetas()[0]))\nprint('Number of input features:', len(digits_train_imgs[0, :]))\n```", "```py\nNumber of coefficients: 401\nNumber of input features: 400\n```", "```py\n# Predict the target labels of the testing data\n_, y_pred = lr_digits.predict(digits_test_imgs.astype(float32))\n\n# Compute and print the achieved accuracy\naccuracy = (sum(y_pred[:, 0] == digits_test_labels[:, 0]) / digits_test_labels.size) * 100\nprint('Accuracy:', accuracy, '%')\n```", "```py\nAccuracy: 88.8 %\n```", "```py\n# Generate and plot confusion matrix\ncm = confusion_matrix(digits_test_labels, y_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\ndisp.plot()\nshow()\n```", "```py\nfrom cv2 import ml\nfrom sklearn.datasets import make_blobs\nfrom sklearn import model_selection as ms\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom numpy import float32\nfrom matplotlib.pyplot import show\nfrom digits_dataset import split_images, split_data\n\n# Load the digits image\nimg, sub_imgs = split_images('Images/digits.png', 20)\n\n# Obtain training and testing datasets from the digits image\ndigits_train_imgs, digits_train_labels, digits_test_imgs, digits_test_labels = split_data(20, sub_imgs, 0.8)\n\n# Create an empty logistic regression model\nlr_digits = ml.LogisticRegression_create()\n\n# Check the default training method\nprint('Training Method:', lr_digits.getTrainMethod())\n\n# Set the training method to Mini-Batch Gradient Descent and the size of the mini-batch\nlr_digits.setTrainMethod(ml.LogisticRegression_MINI_BATCH)\nlr_digits.setMiniBatchSize(400)\n\n# Set the number of iterations\nlr_digits.setIterations(10)\n\n# Train the logistic regressor on the set of training data\nlr_digits.train(digits_train_imgs.astype(float32), ml.ROW_SAMPLE, digits_train_labels.astype(float32))\n\n# Print the number of learned coefficients, and the number of input features\nprint('Number of coefficients:', len(lr_digits.get_learnt_thetas()[0]))\nprint('Number of input features:', len(digits_train_imgs[0, :]))\n\n# Predict the target labels of the testing data\n_, y_pred = lr_digits.predict(digits_test_imgs.astype(float32))\n\n# Compute and print the achieved accuracy\naccuracy = (sum(y_pred[:, 0] == digits_test_labels[:, 0]) / digits_test_labels.size) * 100\nprint('Accuracy:', accuracy, '%')\n\n# Generate and plot confusion matrix\ncm = confusion_matrix(digits_test_labels, y_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\ndisp.plot()\nshow()\n```"]