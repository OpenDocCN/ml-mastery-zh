- en: More Special Features in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的更多特性
- en: 原文：[https://machinelearningmastery.com/python-special-features/](https://machinelearningmastery.com/python-special-features/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/python-special-features/](https://machinelearningmastery.com/python-special-features/)
- en: Python is an awesome programming language! It is one of the most popular languages
    for developing AI and machine learning applications. With a very easy-to-learn
    syntax, Python has some special features that distinguish it from other languages.
    In this tutorial, we’ll talk about some unique attributes of the Python programming
    language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一门非常棒的编程语言！它是开发 AI 和机器学习应用的最受欢迎的语言之一。Python 的语法非常易学，且具有一些特别的功能，使其与其他语言区分开来。在本教程中，我们将讨论
    Python 编程语言的一些独特特性。
- en: 'After completing this tutorial, you will know:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本教程后，你将会了解到：
- en: Constructs for list and dictionary comprehension
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表和字典推导的构造
- en: How to use the zip and enumerate functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 zip 和 enumerate 函数
- en: What are function contexts and decorators
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是函数上下文和装饰器
- en: What is the purpose of generators in Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 中生成器的目的是什么
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动你的项目**，通过我的新书 [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/)，包括
    *逐步教程* 和所有示例的 *Python 源代码* 文件。'
- en: Let’s get started.[![](../Images/d72e3c6b8343429d3dd3f7df0e770326.png)](https://machinelearningmastery.com/wp-content/uploads/2021/12/m-mani.png)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。[![](../Images/d72e3c6b8343429d3dd3f7df0e770326.png)](https://machinelearningmastery.com/wp-content/uploads/2021/12/m-mani.png)
- en: Python Special Features
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 特性
- en: Photo by M Mani, some rights reserved.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源 M Mani，保留部分权利。
- en: Tutorial Overview
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程概述
- en: 'This tutorial is divided into four parts; they are:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为四部分，它们是：
- en: List and dictionary comprehension
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表和字典推导
- en: Zip and enumerate functions
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zip 和 enumerate 函数
- en: Function contexts and decorators
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数上下文和装饰器
- en: Generators in Python with an example of Keras generator
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 中的生成器示例，使用 Keras 生成器
- en: Import Section
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入部分
- en: The libraries used in this tutorial are imported in the code below.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中使用的库在下面的代码中进行了导入。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: List Comprehension
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表推导
- en: 'List comprehension provides a short, simple syntax for creating new lists from
    existing ones. For example, suppose we require a new list, where each new item
    is the old item multiplied by 3\. One method is to use a `for` loop as shown below:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导提供了一种简短、简单的语法，用于从现有列表创建新列表。例如，假设我们需要一个新列表，其中每个新项是旧项乘以 3。一个方法是使用 `for` 循环，如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Output
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The shorter method using list comprehension requires only a single line of
    code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表推导式的简短方法只需一行代码：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Output
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can even create a new list based on a special criterion. For example, if
    we want only even numbers added to the new list:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以基于特定的标准创建一个新列表。例如，如果我们只想将偶数添加到新列表中：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Output
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is also possible to have an `else` associated with the above. For example,
    we can leave all even numbers intact and replace the odd numbers with zero:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以与上述代码一起使用 `else`。例如，我们可以保留所有偶数不变，并将奇数替换为零：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Output
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'List comprehension can also used to replace nested loops. For example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导也可以用来替代嵌套循环。例如：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Output
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'can be done as follows, with two “for” inside the list comprehension:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以如下完成，列表推导式中包含两个“for”：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Syntax
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法
- en: 'Syntax for list comprehension is given by:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导的语法如下：
- en: '*newlist = [expression for item in iterable if condition == True]*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*newlist = [expression for item in iterable if condition == True]*'
- en: or
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '*newList = [expression if condition == True else expression for item in iterable]*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*newList = [expression if condition == True else expression for item in iterable]*'
- en: Want to Get Started With Python for Machine Learning?
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想要开始使用 Python 进行机器学习吗？
- en: Take my free 7-day email crash course now (with sample code).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 立即参加我的 7 天免费电子邮件速成课程（附示例代码）。
- en: Click to sign-up and also get a free PDF Ebook version of the course.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 点击报名，还可以免费获得课程的 PDF 电子书版本。
- en: Dictionary Comprehension
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典推导
- en: 'Dictionary comprehension is similar to list comprehension, except now we have
    (key, value) pairs. Here is an example; we’ll modify each value of the dictionary
    by concatenating the string ‘number ‘ to each value:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 字典推导类似于列表推导，不过现在我们有了 (key, value) 对。这里是一个示例；我们将通过将字符串 'number ' 连接到每个值来修改字典的每个值：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Output
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Again, conditionals are also possible. We can choose to add (key, value) pairs
    based on a criterion in the new dictionary.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，条件判断也是可能的。我们可以根据标准在新字典中选择添加(key, value)对。
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Output
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Enumerators and Zip in Python
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的枚举器和Zip
- en: In Python, an iterable is defined as any data structure that can return all
    its items, one at a time. This way, you can use a `for` loop to further process
    all items one by one. Python has two additional constructs that make `for` loops
    easier to use, i.e., `enumerate()` and `zip()`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，可迭代对象定义为任何可以逐个返回所有项的数据结构。这样，你可以使用`for`循环逐一处理所有项。Python有两个附加的构造使`for`循环更易于使用，即`enumerate()`和`zip()`。
- en: Enumerate
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举
- en: 'In traditional programming languages, you need a loop variable to iterate through
    different values of a container. In Python, this is simplified by giving you access
    to a loop variable along with one value of the iterable object. The `enumerate(x)`
    function returns two iterables. One iterable varies from 0 to len(x)-1\. The other
    is an iterable with a value equal to items of x. An example is shown below:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统编程语言中，你需要一个循环变量来遍历容器中的不同值。在Python中，这通过提供对循环变量和可迭代对象的一个值的访问来简化。`enumerate(x)`函数返回两个可迭代对象。一个可迭代对象从0到len(x)-1。另一个是值等于x项的可迭代对象。下面显示了一个示例：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Output
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'By default, enumerate starts at 0, but we can start at some other number if
    we specify it. This is useful in some situations, for example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，enumerate从0开始，但如果我们指定其他数字，则可以从其他数字开始。这在某些情况下非常有用，例如：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Zip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Zip
- en: Zip allows you to create an iterable object of tuples. Zip takes as an argument
    multiple containers $(m_1, m_2, \ldots, m_n)$ and creates the i-th tuple by pairing
    one item from each container. The i-th tuple is then $(m_{1i}, m_{2i}, \ldots,
    m_{ni})$. If the passed objects have different lengths, then the total number
    of tuples formed has a length equal to the minimum length of passed objects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Zip允许你创建一个由元组组成的可迭代对象。Zip将多个容器$(m_1, m_2, \ldots, m_n)$作为参数，并通过配对每个容器中的一个项来创建第i个元组。第i个元组是$(m_{1i},
    m_{2i}, \ldots, m_{ni})$。如果传递的对象长度不同，则形成的元组总数的长度等于传递对象的最小长度。
- en: Below are examples of using both `zip()` and `enumerate().`
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用`zip()`和`enumerate()`的示例。
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Output
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Function Context
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数上下文
- en: Python allows nested functions, where you can define an inner function within
    an outer function. There are some awesome features related to nested functions
    in Python.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Python允许嵌套函数，你可以在外部函数内部定义一个内部函数。Python中的嵌套函数有一些非常棒的特性。
- en: The outer function can return a handle to the inner function.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部函数可以返回指向内部函数的句柄。
- en: The inner function retains all its environment and variables local to it and
    in its enclosing function even if the outer function ends its execution.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部函数保留了其环境和在其封闭函数中的所有局部变量，即使外部函数结束执行也不例外。
- en: An example is given below, with an explanation in the comments.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，解释在注释中。
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Output
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Decorators in Python
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的装饰器
- en: Decorators are a powerful feature of Python. You can use decorators to customize
    the working of a class or a function. Think of them as a function applied to another
    function. Use the function name with the `@` symbol to define the decorator function
    on the decorated function. The decorator takes a function as an argument, giving
    a lot of flexibility.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器是Python的一个强大特性。你可以使用装饰器来定制类或函数的工作。可以将它们看作是应用于另一个函数的函数。使用`@`符号与函数名来定义装饰器函数。装饰器以函数作为参数，提供了很大的灵活性。
- en: Consider the following function `square_decorator()` that takes a function as
    an argument and also returns a function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下函数`square_decorator()`，它接受一个函数作为参数，并返回一个函数。
- en: The inner nested function `square_it()`takes an argument `arg.`
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部嵌套函数`square_it()`接受一个参数`arg`。
- en: The `square_it()`function applies the function to `arg` and squares the result.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`square_it()`函数将函数应用于`arg`并对结果进行平方运算。'
- en: We can pass a function such as `sin` to `square_decorator()`, which in turn
    would return $\sin^2(x)$.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将函数如`sin`传递给`square_decorator()`，它将返回$\sin^2(x)$。
- en: You can also write your own customized function and use the `square_decorator()`
    function on it using the special @ symbol as shown below. The function `plus_one(x)`
    returns `x+1`. This function is decorated by the `square_decorator(),` and hence
    we get $(x+1)^2$.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以编写自定义函数，并使用特殊的@符号对其应用`square_decorator()`函数，如下所示。函数`plus_one(x)`返回`x+1`。这个函数被`square_decorator()`装饰，因此我们得到$(x+1)^2$。
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Output
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Generators in Python
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的生成器
- en: Generators in Python allow you to generate sequences. Instead of writing a `return`
    statement, a generator returns multiple values via multiple `yield` statements.
    The first call to the function returns the first value from yield. The second
    call returns the second value from yield and so on.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的生成器允许你生成序列。生成器通过多个 `yield` 语句返回多个值，而不是编写 `return` 语句。第一次调用函数时，返回的是
    `yield` 的第一个值。第二次调用返回的是 `yield` 的第二个值，以此类推。
- en: The generator function can be invoked via `next().`Every time `next()` is called,
    the next `yield` value is returned. An example of generating the Fibonacci sequence
    up to a given number `x` is shown below.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器函数可以通过 `next()` 调用。每次调用 `next()` 时，都会返回下一个 `yield` 值。下面是生成 Fibonacci 序列直到给定数字
    `x` 的示例。
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Output
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Example of Data Generator in Keras
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Keras 数据生成器示例
- en: 'One use of a generator is the data generator in Keras. It is useful because
    we do not want to keep all data in memory but want to create it on the fly when
    the training loop needs it. Remember, in Keras, a neural network model is trained
    in batches, so a generator is to emit batches of data. The function below is from
    our previous post, “[Using CNN for financial time series prediction](https://machinelearningmastery.com/using-cnn-for-financial-time-series-prediction/)“:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器的一个用途是 Keras 中的数据生成器。它非常有用，因为我们不想将所有数据保存在内存中，而是希望在训练循环需要时动态创建它。请记住，在 Keras
    中，神经网络模型是按批训练的，因此生成器是用来发出数据批次的。下面的函数来自我们之前的帖子，“[使用 CNN 进行金融时间序列预测](https://machinelearningmastery.com/using-cnn-for-financial-time-series-prediction/)”：
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The function above is to pick a random row of a pandas dataframe as a starting
    point and clip the next several rows as a one-time interval sample. This process
    is repeated several times to collect many time intervals into one batch. When
    we collect enough interval samples, at the second to the last line in the above
    function, the batch is dispatched using the `yield` command. You may have already
    noticed that generator functions do not have a return statement. In this example,
    the function will run forever. This is useful and necessary because it allows
    our Keras training process to run as many epochs as we want.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的函数用于从 pandas 数据框中随机选择一行作为起点，并将接下来的几行剪切为一次时间间隔样本。这个过程重复几次，将许多时间间隔收集成一个批次。当我们收集到足够的间隔样本时，在上面函数的倒数第二行，使用
    `yield` 命令分发批次。你可能已经注意到生成器函数没有返回语句。在这个示例中，函数将永远运行。这是有用且必要的，因为它允许我们的 Keras 训练过程运行任意多的轮次。
- en: If we do not use a generator, we will need to convert the dataframe into all
    possible time intervals and keep them in memory for the training loop. This will
    be a lot of repeating data (because the time intervals are overlapping) and take
    up a lot of memory.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不使用生成器，我们将需要将数据框转换为所有可能的时间间隔，并将它们保存在内存中以供训练循环使用。这将涉及大量重复的数据（因为时间间隔是重叠的），并且占用大量内存。
- en: Because it is useful, Keras has some generator function predefined in the library.
    Below is an example of the `ImageDataGenerator()`. We have loaded the `cifar10`
    dataset of 32×32 images in `x_train`. The data is connected to the generator via
    `the flow()` method. The `next()` function returns the next batch of data. In
    the example below, there are 4 calls to `next()`. In each case, 8 images are returned
    as the batch size is 8.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它的实用性，Keras 库中预定义了一些生成器函数。下面是 `ImageDataGenerator()` 的示例。我们在 `x_train` 中加载了
    32×32 图像的 `cifar10` 数据集。通过 `flow()` 方法将数据连接到生成器。`next()` 函数返回下一批数据。在下面的示例中，有 4
    次对 `next()` 的调用。在每次调用中，返回 8 张图像，因为批量大小为 8。
- en: Below is the entire code that also displays all images after every call to `next()`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整代码，也在每次调用 `next()` 后显示所有图像。
- en: '[PRE29]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![](../Images/cf093fbd42e38b864c68b3e206eec0a2.png)](https://machinelearningmastery.com/wp-content/uploads/2021/12/Untitled-1.png)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/cf093fbd42e38b864c68b3e206eec0a2.png)](https://machinelearningmastery.com/wp-content/uploads/2021/12/Untitled-1.png)'
- en: Further Reading
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This section provides more resources on the topic if you are looking to go deeper.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更深入地了解这个主题，本节提供了更多资源。
- en: Python Documentation
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 文档
- en: '[Python Documentation at python.org](https://docs.python.org/3/contents.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 文档在 python.org](https://docs.python.org/3/contents.html)'
- en: Books
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 书籍
- en: '[Think Python: How to Think Like a Computer Scientist](https://greenteapress.com/thinkpython/html/index.html)
    by Allen B. Downey'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《Think Python: How to Think Like a Computer Scientist》](https://greenteapress.com/thinkpython/html/index.html)
    由 Allen B. Downey 编写'
- en: '[Programming in Python 3: A Complete Introduction to the Python Language](https://www.amazon.com/Programming-Python-Complete-Introduction-Language-ebook-dp-B001OFK2DK/dp/B001OFK2DK/ref=mt_other?_encoding=UTF8&me=&qid=1638910263)
    by Mark Summerfield'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 3编程：Python语言完全介绍](https://www.amazon.com/Programming-Python-Complete-Introduction-Language-ebook-dp-B001OFK2DK/dp/B001OFK2DK/ref=mt_other?_encoding=UTF8&me=&qid=1638910263)
    由Mark Summerfield编写'
- en: '[Python Programming: An Introduction to Computer Science](https://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/1590282418/ref=sr_1_1?s=books&ie=UTF8&qid=1441293398&sr=1-1&keywords=Python+Zelle&pebp=1441293404611&perid=1B2BP6WM3RQHW4CY6990)
    by John Zelle'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python编程：计算机科学导论](https://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/1590282418/ref=sr_1_1?s=books&ie=UTF8&qid=1441293398&sr=1-1&keywords=Python+Zelle&pebp=1441293404611&perid=1B2BP6WM3RQHW4CY6990)
    由John Zelle编写'
- en: API Reference
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API参考
- en: '[Keras ImageDataGenerator](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Keras ImageDataGenerator](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator)'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this tutorial, you discovered some special features of Python.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你发现了一些Python的特殊功能。
- en: 'Specifically, you learned:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，你学习了：
- en: The purpose of list and dictionary comprehension
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表和字典推导的目的
- en: How to use zip and enumerate
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用zip和enumerate
- en: Nested functions, function contexts, and decorators
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套函数、函数上下文和装饰器
- en: Generators in Python and the ImageDataGenerator in Python
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的生成器和Python中的ImageDataGenerator
- en: Do you have any questions about the Python features discussed in this post?
    Ask your questions in the comments below, and I will do my best to answer.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本文讨论的Python功能，你有任何问题吗？在下方评论中提出你的问题，我会尽力回答。
