- en: Understanding LangChain LLM Output Parser
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 LangChain LLM 输出解析器
- en: 原文：[https://machinelearningmastery.com/understanding-langchain-llm-output-parser/](https://machinelearningmastery.com/understanding-langchain-llm-output-parser/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/understanding-langchain-llm-output-parser/](https://machinelearningmastery.com/understanding-langchain-llm-output-parser/)
- en: '![Understanding LangChain LLM Output Parser](../Images/da4313cfc413dea84a5ed4b24931a0ff.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![理解 LangChain LLM 输出解析器](../Images/da4313cfc413dea84a5ed4b24931a0ff.png)'
- en: Image by nikitabuida on [Freepik](https://www.freepik.com/free-photo/computer-program-code_1154343.htm#fromView=search&page=2&position=42&uuid=15ea92ef-e413-4e1e-8489-219875d1a2af)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 [Freepik](https://www.freepik.com/free-photo/computer-program-code_1154343.htm#fromView=search&page=2&position=42&uuid=15ea92ef-e413-4e1e-8489-219875d1a2af)
    的 nikitabuida
- en: The large Language Model, or LLM, has revolutionized how people work. By helping
    users generate the answer from a text prompt, LLM can do many things, such as
    answering questions, summarizing, planning events, and more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大型语言模型（LLM）彻底改变了人们的工作方式。通过帮助用户从文本提示中生成答案，LLM 可以完成许多任务，例如回答问题、总结、计划事件等。
- en: However, there are times when the output from LLM is not up to our standard.
    For example, the text generated could be thoroughly wrong and need further direction.
    This is where the LLM Output Parser could help.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时 LLM 的输出可能达不到我们的标准。例如，生成的文本可能完全错误，需要进一步的指导。这时 LLM 输出解析器可以提供帮助。
- en: By standardizing the output result with LangChain Output Parser, we can have
    some control over the output. So, how does it work? Let’s get into it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 LangChain 输出解析器标准化输出结果，我们可以对输出进行一些控制。那么它是如何工作的呢？让我们深入了解一下。
- en: Preparation
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this article, we would rely on the LangChain packages, so we need to install
    them in the environment. To do that, you can use the following code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将依赖于 LangChain 包，因此需要在环境中安装这些包。为此，你可以使用以下`code`。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Also, we would use the OpenAI GPT model for text generation, so ensure that
    you have API access to them. You can get the API key from the OpenAI platform.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用 OpenAI GPT 模型进行文本生成，因此确保你拥有对它们的 API 访问权限。你可以从 OpenAI 平台获取 API 密钥。
- en: I would work in the Visual Studio Code IDE, but you could work in any preferred
    IDE. Create a file called `.env` within your project folder and put the OpenAI
    API key inside. It should look like this.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我会在 Visual Studio Code IDE 中工作，但你可以在任何你喜欢的 IDE 中工作。在项目文件夹中创建一个名为`.env`的文件，并将
    OpenAI API 密钥放入其中。它应该如下所示。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once everything is ready, we will move on to the central part of the article.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，我们将进入文章的核心部分。
- en: Output Parser
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出解析器
- en: We can use many types of output parsers from LangChain to standardize our LLM
    output. We would try several of them to understand the output parser better.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 LangChain 的多种输出解析器来标准化我们的 LLM 输出。我们将尝试其中几种，以更好地理解输出解析器。
- en: First, we would try Pydantic Parser. It’s an output parser that we could use
    to control and validate the output from the generated text. Let’s use them better
    with an example. Create a Python script in your IDE and then copy the code below
    to your script.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们会尝试 Pydantic Parser。这是一个输出解析器，我们可以用来控制和验证生成文本的输出。让我们通过一个例子更好地使用它们。在你的 IDE
    中创建一个 Python 脚本，然后将下面的代码复制到你的脚本中。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We initially imported the packages in the code above and loaded the OpenAI key
    with the `load_dotenv`. After that, we create a class called `MovieReview` which
    contains all the information output we want. The output would deliver output from
    the title, year, genre, rating, summary, and review. In each output, we define
    the description of the output we want.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初在上面的代码中导入了这些包，并使用 `load_dotenv` 加载了 OpenAI 密钥。之后，我们创建了一个名为 `MovieReview`
    的类，该类包含我们想要的所有信息输出。输出将包括标题、年份、类型、评分、摘要和评论。对于每个输出，我们定义了所需输出的描述。
- en: From the output, we create a validator for the year and rating to ensure the
    result is not what we wanted. You can also add more validation mechanisms if required.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们创建一个用于验证年份和评分的验证器，以确保结果符合我们的期望。你也可以根据需要添加更多验证机制。
- en: Then we create the prompt template that would accept our query input and the
    format it should be.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建了一个提示模板，该模板接受我们的查询输入以及其应有的格式。
- en: The last thing we do is create the model chain and pass the query to get our
    result. For note, the `chain` variable above accepts structure using “|” which
    is a unique method in the LangChain.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后做的事情是创建模型链并传递查询以获取结果。值得注意的是，上面的 `chain` 变量使用 “|” 接受结构，这是 LangChain 中的一种独特方法。
- en: Overall, the result is similar to below.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，结果类似于下面的内容。
- en: 'Output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see the output follows the format we want and the result passes our
    validation method.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，输出符合我们想要的格式，并且结果通过了我们的验证方法。
- en: Pedantic Parser is the standard Output Parser we can use. We can use the other
    Output Parser if we already have a specific format in mind. For example, we can
    use the CSV Parser if we want the result only in the comma-separated items.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Pedantic Parser 是我们可以使用的标准输出解析器。如果我们已经有特定的格式需求，可以使用其他输出解析器。例如，如果我们希望结果以逗号分隔的项呈现，可以使用
    CSV Parser。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The result is a list with the values separated by the comma. You can expand
    the template in any way you like if the result is comma-separated.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个以逗号分隔的值的列表。如果结果是逗号分隔的，你可以按任何方式扩展模板。
- en: It’s also possible to get the output in datetime format. By changing the code
    and prompt, we can expect the result we want.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将输出格式更改为日期时间格式。通过修改代码和提示，我们可以期望得到我们想要的结果。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see that the result is in the datetime format.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到结果是日期时间格式。
- en: That’s all about the LangChain LLM Output Parsers. You can visit their documentation
    to find the Output Parsers you require or use the Pydantic to structure it yourself.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以上就是关于 LangChain LLM 输出解析器的内容。你可以访问它们的文档来找到你需要的输出解析器，或者使用 Pydantic 自行结构化输出。
- en: Conclusion
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we have learned about the LangChain Output Parser, which standardizes
    the generated text from LLM. We can use the Pydantic Parser to structure the LLM
    output and provide the result you want. There are many other Output Parsers from
    LangChain that could be suitable for your situation, such as the CSV parser and
    the Datetime parser.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们了解了 LangChain 输出解析器，它可以将 LLM 生成的文本标准化。我们可以使用 Pydantic Parser 来结构化 LLM
    输出并提供所需结果。LangChain 还提供了许多其他可能适合你情况的输出解析器，如 CSV 解析器和日期时间解析器。
