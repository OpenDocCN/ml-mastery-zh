- en: How to Learn Python for Machine Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何学习 Python 以用于机器学习
- en: 原文：[https://machinelearningmastery.com/how-to-learn-python-for-machine-learning/](https://machinelearningmastery.com/how-to-learn-python-for-machine-learning/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://machinelearningmastery.com/how-to-learn-python-for-machine-learning/](https://machinelearningmastery.com/how-to-learn-python-for-machine-learning/)
- en: Python has become a de facto lingua franca for machine learning. It is not a
    difficult language to learn, but if you are not particularly familiar with the
    language, there are some tips that can help you learn faster or better.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python 已成为机器学习的事实上的通用语言。它并不是一门难学的语言，但如果你对这门语言不是特别熟悉，有一些技巧可以帮助你更快或更好地学习。
- en: 'In this post, you will discover what the right way to learn a programming language
    is and how to get help. After reading this post, you will know:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你将发现学习编程语言的正确方法以及如何获得帮助。阅读完这篇文章后，你将知道：
- en: The right mentality to learn Python for use in machine learning
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 Python 以用于机器学习的正确心态
- en: Good resources to learn Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 Python 的好资源
- en: How to find answers for questions related to Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何找到与 Python 相关问题的答案
- en: '**Kick-start your project** with my new book [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/),
    including *step-by-step tutorials* and the *Python source code* files for all
    examples.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过我的新书 [Python for Machine Learning](https://machinelearningmastery.com/python-for-machine-learning/)**
    启动你的项目，其中包括 *逐步教程* 和所有示例的 *Python 源代码* 文件。'
- en: Let’s get started.![](../Images/8240096af0d42640224d38deaa7f11a2.png)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。![](../Images/8240096af0d42640224d38deaa7f11a2.png)
- en: How to Learn Python for Machine Learning
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如何学习 Python 以用于机器学习
- en: Photo by [Federico Di Dio](https://unsplash.com/@didiofederico_photographer),
    some rights reserved.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Federico Di Dio](https://unsplash.com/@didiofederico_photographer) 提供，部分权利保留。
- en: How to Learn Python
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何学习 Python
- en: There are many ways to learn a language, whether for natural languages like
    English or programming language like Python. Babies learn a language from listening
    and mimicking. Slowly, when they learn the pattern and some vocabulary, they can
    make up their own sentences. On the contrary, when college students learn Latin, 
    they probably start with grammar rules—singular and plural, indicative and subjunctive,
    nominative and accusative. Then they can build up to forming a sentence in Latin.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 学习语言有很多方式，无论是自然语言如英语，还是编程语言如 Python。婴儿通过听和模仿来学习语言。随着他们逐渐学会模式和一些词汇，他们可以自己组成句子。相反，当大学生学习拉丁语时，他们可能从语法规则开始——单数和复数，直陈式和虚拟式，主格和宾格。然后，他们可以逐步构建拉丁语句子。
- en: Similarly, when learning Python or any programming language, you can either
    read other people’s code, try to understand, and then modify from it. Or you can
    learn the language rules and build up a program from scratch. The latter would
    be beneficial if your ultimate goal is to work on the language, such as writing
    the Python interpreter. But usually, the former approach is faster to get some
    results.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，当学习 Python 或任何编程语言时，你可以选择阅读他人的代码，试图理解，并在此基础上进行修改。或者你可以学习语言规则，从头开始构建程序。如果你的最终目标是处理该语言，例如编写
    Python 解释器，那么后者会更有利。但通常情况下，前者的方法能更快地得到一些结果。
- en: 'My suggestion is to learn from examples first. But strengthen your foundation
    in understanding the language by revisiting the language rules from time to time.
    Let’s look at [an example from Wikipedia](https://en.wikipedia.org/wiki/Secant_method):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是首先从例子中学习。但是通过时不时地回顾语言规则，来加强你对语言的基础理解。让我们看看 [维基百科上的一个例子](https://en.wikipedia.org/wiki/Secant_method)：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This Python code is implementing the secant method to find a root for a function.
    If you are new to Python, you should look at the example and see how much you
    can understand. If you have prior knowledge from other programming languages,
    you would probably guess `def` defines a function. But if you do not, you might
    feel confused. If this is the case, it is best for you to start from a beginner’s
    book on programming to learn about the concept of functions, variables, loops,
    etc.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这段 Python 代码实现了割线法以寻找函数的根。如果你是 Python 新手，你应该查看这个例子，看看你能理解多少。如果你有其他编程语言的知识，你可能会猜到
    `def` 定义了一个函数。但如果没有，你可能会感到困惑。如果是这样，最好从一本初学者编程书籍开始，了解函数、变量、循环等概念。
- en: The next thing you might think you can do is modify the functions. For example,
    what if we are not using the secant method to find the root but instead use Newton’s
    method? You might guess how to modify the equation on line 4 to do it. What about
    the bisection method? You would need to add a statement of `if f(x2)>0` to decide
    which way we should go. If we look at the function `f_example`, we see the symbol
    `**`. This is the exponent operator to mean $x$ to the power of 2 there. But should
    it be $x^2 – 612$ or $x^{2-612}$? You would need to go back and check the language
    manual to see the *operator precedence* hierarchy.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来你可能会想到的是修改函数。例如，如果我们不使用割线法来找根，而是使用牛顿法，你可以猜测如何修改第4行的方程来实现。那么二分法呢？你需要添加一个语句`if
    f(x2)>0`来决定我们应该走哪条路。如果我们看一下函数`f_example`，我们会看到符号`**`。这是指数运算符，表示$x$的平方。但它应该是$x^2
    – 612$还是$x^{2-612}$呢？你需要回去查看语言手册，看看*操作符优先级*的层次结构。
- en: Therefore, even with a short example like this, you can learn a lot of language
    features. By learning from more examples, you can deduce the syntax, get used
    to the idiomatic way of coding, and do some work even if you cannot explain it
    in detail.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使像这样的简短示例，你也可以学到很多语言特性。通过学习更多的例子，你可以推断语法，习惯性地编写代码，并进行一些工作，即使你不能详细解释它。
- en: What to Avoid
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免的事情
- en: If you decide to learn Python, it is inevitable you will want to learn from
    a book. Just picking up any beginner’s book on Python from your local library
    should work. But when you read, keep the bigger picture of your learning goal
    in mind. Do some exercises while you read, try out the codes from the book, and
    make up your own. It is not a bad idea to skip some pages. Reading a book cover
    to cover may not be the most efficient way to learn. You should prevent yourself
    from drilling too deep into a single topic because this will make you lose track
    of the bigger goal of using Python to do useful things. Topics such as multithreading,
    network sockets, and object-oriented programming can be treated as advanced topics
    for later.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定学习Python，你肯定会想要从一本书上学习。只需从你当地的图书馆拿起任何一本Python的初学者书籍即可。但在阅读时，请牢记你学习目标的大局观。边读书边做一些练习，尝试书中的代码，并创造出你自己的代码。跳过一些页面并不是个坏主意。逐页阅读可能不是学习效率最高的方式。你应该避免深入一个单一主题，因为这会使你忘记使用Python做有用事情的更大目标。像多线程、网络套接字和面向对象编程这样的主题可以作为以后的高级主题来处理。
- en: Python is a language that is decoupled from its interpreter or compiler. Therefore,
    different interpreters may behave a bit differently. The standard interpreter
    from python.org is CPython, also called the reference implementation. A common
    alternative is PyPy. Regardless of which one you use, you should learn with Python
    3 rather than Python 2 as the latter is an obsolete dialect. But bear in mind
    that Python gained its momentum with Python 2, and you may still see quite a lot
    of Python 2 programming around.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种与其解释器或编译器解耦的语言。因此，不同的解释器可能会有所不同。来自python.org的标准解释器是CPython，也称为参考实现。一个常见的替代方案是PyPy。无论你使用哪一种，你应该学习Python
    3而不是Python 2，因为后者是一种已经过时的方言。但请记住，Python在Python 2时期获得了它的势头，你可能仍然会看到很多Python 2编程的内容。
- en: Resources
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: Reading Resources
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读资源
- en: If you cannot go to the library to pick up a printed book, you can make use
    of some online resources instead. I would highly recommend beginners read [The
    Python Tutorial](https://docs.python.org/3/tutorial/index.html). It is short but
    guides you through different aspects of the language. It lets you take a peek
    at what Python can do and how to do it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不能去图书馆拿一本印刷书，你可以利用一些在线资源。我强烈推荐初学者阅读[Python教程](https://docs.python.org/3/tutorial/index.html)。它很短，但会引导你了解语言的不同方面。它让你一窥Python的能力和如何使用它的方法。
- en: After the tutorial, you probably should keep the [Python Language Reference](https://docs.python.org/3/reference/index.html)
    and the [Python Library Reference](https://docs.python.org/3/library/index.html)
    handy. You will reference them from time to time to check the syntax and lookup
    function usages. Do not force yourself to remember every function.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 教程结束后，你可能需要随时保持[Python语言参考](https://docs.python.org/3/reference/index.html)和[Python库参考](https://docs.python.org/3/library/index.html)在手边。你会时不时地参考它们，检查语法并查找函数用法。不要强迫自己记住每个函数。
- en: Programming Environment
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程环境
- en: Python is built-in in macOS, but you may want to install a newer version. In
    Windows, it is common to see people using Anaconda instead of installing just
    the Python interpreter. But if you feel it is too much hassle to install an IDE
    and the Python programming environment, you might consider using Google Colab.
    This allows you to write Python programs in a “notebook” format. Indeed, many
    machine learning projects are developed in the Jupyter notebook as it allows us
    to quickly explore different approaches to a problem and visually verify the result.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python在macOS中是内置的，但你可能想安装一个更新版本。在Windows中，人们通常使用Anaconda而不是仅安装Python解释器。但如果你觉得安装IDE和Python编程环境太麻烦，你可以考虑使用Google
    Colab。这允许你以“笔记本”格式编写Python程序。事实上，许多机器学习项目都是在Jupyter笔记本中开发的，因为它允许我们快速探索解决问题的不同方法并通过视觉验证结果。
- en: You can also use an online shell at [https://www.python.org/shell/](https://www.python.org/shell/)
    to try out a short snippet. The downside compared to the Google Colab is that
    you cannot save your work.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 [https://www.python.org/shell/](https://www.python.org/shell/) 使用在线shell尝试一个简短的代码片段。与Google
    Colab相比的缺点是你无法保存你的工作。
- en: Asking for Help
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 寻求帮助
- en: When you start from an example you saw from a book and modify it, you might
    break the code, making it fail to run. It is especially true in machine learning
    examples, where you have many lines of code that cover data collection, preprocessing,
    building a model, training, validation, prediction, and finally presenting the
    result in a visualized manner. When you see an error result from your code, the
    first thing you need to do is pinpoint the few lines that caused the error. Try
    to check the output from each step to make sure it is in the correct format. Or
    try to roll back your code to see which change you made started to introduce errors.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从书本中看到一个例子并对其进行修改时，可能会导致代码出错，使其无法运行。在机器学习示例中尤其如此，其中有许多行代码涵盖数据收集、预处理、模型构建、训练、验证、预测，最后以可视化方式呈现结果。当你看到代码出错时，首先要做的事情是确定导致错误的几行代码。尝试检查每个步骤的输出以确保其格式正确。或者尝试回滚你的代码，看看哪个修改引入了错误。
- en: It is important to make mistakes and learn from mistakes. When you try out syntax
    and learn this way, you should encounter error messages from time to time. If
    you try to make sense from it, then it will be easier to figure out what caused
    the error. Almost always, if the error comes from a library that you’re using,
    double confirm your syntax with the library’s documentation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 犯错误并从错误中学习是很重要的。当你尝试语法并通过这种方式学习时，你可能会时不时地遇到错误消息。如果你试图理解它，那么找出错误的原因就会更容易。几乎总是，如果错误来自于你正在使用的库，确保通过库的文档再次确认你的语法是很重要的。
- en: If you are still confused, try to search for it on the internet. If you’re using
    Google, one trick you can use is to put the entire error message in a pair of
    double quotes when you search. Or sometimes, searching  on StackOverflow might
    give you better answers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然感到困惑，试着在互联网上搜索。如果你使用的是Google，你可以使用一个技巧，就是将整个错误消息用双引号括起来搜索。或者有时，在StackOverflow上搜索可能会给你更好的答案。
- en: Further Readings
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Here I list out some pointers for a beginner. As referenced above, the Python
    Tutorial is a good start. This is especially true at the time of this writing
    when Python 3.9 rolled out recently and some new syntax was introduced. Printed
    books are usually not as updated as the official tutorial online.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我列出了一些初学者的要点。如上所述，Python 教程是一个很好的开始。特别是在撰写此文时，Python 3.9 最近发布，并引入了一些新的语法。印刷版的书籍通常没有官方在线教程更新得及时。
- en: 'There are many primer-level books for Python. Some short ones that I know of
    are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Python有许多入门级书籍。我知道一些简短的书籍，比如：
- en: '[*Python Crash Course*](https://amzn.com/B07J4521M3), 2nd edition, by Eric
    Matthes, 2019.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*Python编程速成*](https://amzn.com/B07J4521M3)，第2版，埃里克·马泰斯（Eric Matthes），2019年。'
- en: '[*Introduction to Computation and Programming Using Python*](https://amzn.com/0262542366),
    3rd edition, by John Guttag, 2021.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*Python计算与编程导论*](https://amzn.com/0262542366)，第3版，约翰·古塔格（John Guttag），2021年。'
- en: For a bit more advanced learner, you may want to see more examples to get something
    done. A cookbook-style book might help a lot as you can learn not only the syntax
    and language tricks but also the different libraries that can get things done.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于稍微进阶的学习者，你可能希望看更多的例子来完成某些任务。像烹饪书式的书籍可能会帮助很多，因为你不仅可以学习语法和语言技巧，还可以了解可以完成任务的不同库。
- en: '[*Python Cookbook*](https://amzn.com/B00DQV4GGY), 3rd edition, by David Beazley
    and Brian K. Jones, 2013.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*Python Cookbook*](https://amzn.com/B00DQV4GGY)，第三版，由David Beazley和Brian K.
    Jones，2013年。'
- en: Summary
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: In this post, you learned how one should study Python and the resources that
    can help you start. A goal-oriented approach to study can help you get the result
    quicker. However, as always, you need to spend some significant time on it before
    you become proficient.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，你学到了如何学习Python以及可以帮助你入门的资源。目标导向的学习方法可以帮助你更快地获得结果。然而，一如既往，你需要在掌握之前投入相当多的时间。
